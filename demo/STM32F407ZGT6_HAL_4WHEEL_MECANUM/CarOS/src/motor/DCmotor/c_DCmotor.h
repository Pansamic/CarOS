/*****************************************************************************
THIS PROGRAM IS FREE SOFTWARE. YOU CAN REDISTRIBUTE IT AND/OR MODIFY IT
UNDER THE TERMS OF THE GNU GPLV3 AS PUBLISHED BY THE FREE SOFTWARE FOUNDATION.

Copyright (C), 2022-2023, pansamic(Wang GengJie) pansamic@foxmail.com

Filename:    c_DCmotor.c
Author:      Pansamic
Version:     0.1
Create date: 2022.12.10
Description: 
Others:      none

History:
1. <author>    <date>                  <desc>
   pansamic  2022.12.10    create v0.1 version.
*****************************************************************************/
#ifndef __C_MOTOR_H_
#define __C_MOTOR_H_
#ifdef __cplusplus
extern "C" {
#endif
#include "./src/c_includes.h"
#include "./src/motor/DCmotor/controller/c_controller.h"
#include "./src/motor/encoder/c_encoder.h"
#include "./src/motor/DCMotor/driver/DCMotor_Driver.h"

/*****************************************************************************************
 *                                                                                       *
 *                                      CONFIG                                           *
 *                                                                                       *
 *****************************************************************************************/


/*****************************************************************************************
 *                                                                                       *
 *                                  GLOBAL VARIABLE                                      *
 *                                                                                       *
 *****************************************************************************************/

/*****************************************************************************************
 *                                                                                       *
 *                                      TYPEDEF                                          *
 *                                                                                       *
 *****************************************************************************************/

/*****************************************************************************************
 * @brief:DC motor controller structure. It contains many important attributes of a
 *     DC motor.
 * @param:
 *     1.Name:name of this motor
 *     2.VelocityController:An object describing PID speed controlling algorithm and
 *         its attributes. For more details, please check description of structure
 *         'PID_t'.
 *     3.CurrentVelocity:This speed value is realistic speed calculated from encoder.
 *         This value will update after calling 'DCMotorAdjustVelocity()' function
 *         periodically. As expected, this value will be updated every 10-60ms,
 *         the same with the period of function 'DCMotorAdjustVelocity()'. unit:r/s
 *     4.TargetVelocity:This value is set when 'DCMotorSetVelocity()' function is called.
 *         unit:r/s.
 *     5.AdjustedVelocity:The speed value generated by speed controller. PID algorithm
 *         calculates the expected speed and applies the speed to motor. unit:r/s
 *     6.MaxVelocity:actual maximum speed of this motor. unit:r/s.
 *     7.RotateDirectionReverse:This attribute is suggested to be correctly set when
 *         CarOS system is initializing. When this value equals '1', the motor will
 *         rotate in reverse. But it's not recommended to set this value '1' because
 *         rotation reverse operation is done by changing speed value polarity, which
 *         may produce unnecessary problems.
 *     8.EncoderEnable:When this value is set to '1', this motor won't use velocity
 *         closed-loop controlling algorithm.
 *     9.Encoder:An object describing an encoder, which contains some necessary
 *         attributes about an encoder. For more details, please check description of
 *         structure 'Encoder'.
 *     10.Driver:This is a DCMotor driver object, which describes DC motor driver
 *         important attributes and drive program. For more details please check
 *         description of 'DCMotor_Driver'.
 *     11.DriverSetVelocitycb:callback function of setting speed of dc motor.
 *     12.DriverInitcb:callback function of initializing driver model.
 * */
typedef struct DCMotorDefinition
{
	const char       *Name;
	/* velocity controller related */
	void             *VelocityController;
	AngVelocity_t     CurrentVelocity;
	AngVelocity_t     TargetVelocity;
	AngVelocity_t     AdjustedVelocity;
	void            (*ControllerUpdate)(void *,AngVelocity_t,AngVelocity_t);
	void            (*ControllerGetOutVal)(void *,AngVelocity_t*);

	/* traits of dc motor */
    AngVelocity_t     MaxVelocity;
	uint8_t           RotateDirectionReverse;

	/* encoder related */
	uint8_t           EncoderEnable;
	Encoder           Encoder;
	uint32_t          PWMCounterPeriod;

	/* dc motor driver related */
	void             *Driver;
	void            (*DriverSetVelocitycb)(void*, int32_t);
}DCMotor;


/*****************************************************************************************
 *                                                                                       *
 *                                      Function                                         *
 *                                                                                       *
 *****************************************************************************************/
DCMotor*    DCMotor_Create              ( const char *Name );
void        DCMotor_Init                ( DCMotor *Motor,const char *Name,AngVelocity_t MaxAngVelocity,uint8_t RotateDirectionReverse,uint32_t PWMCounterPeriod );
void        DCMotor_SetVelocity         ( DCMotor *Motor, AngVelocity_t VelocityVal );
void        DCMotor_AdjustVelocity      ( DCMotor *Motor );
void        DCMotor_AddPID              ( DCMotor *Motor, float Kp, float Ki, float Kd );
void        DCMotor_AddEncoder          ( DCMotor *Motor, TIM_HandleTypeDef *htim, uint16_t PulsePerRound, uint16_t Interval);

#ifdef __cplusplus
} /*extern "C"*/
#endif
#endif /* __C_MOTOR_H_ */
