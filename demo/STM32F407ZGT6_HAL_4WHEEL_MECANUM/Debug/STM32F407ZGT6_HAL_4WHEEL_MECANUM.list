
STM32F407ZGT6_HAL_4WHEEL_MECANUM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbe8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001984  0800fd78  0800fd78  0001fd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116fc  080116fc  00030290  2**0
                  CONTENTS
  4 .ARM          00000008  080116fc  080116fc  000216fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011704  08011704  00030290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011704  08011704  00021704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011708  08011708  00021708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0801170c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030290  2**0
                  CONTENTS
 10 .bss          0000d8d8  20000290  20000290  00030290  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000db68  2000db68  00030290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef09  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e77  00000000  00000000  0004f1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  00054040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e8  00000000  00000000  00055748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d6f  00000000  00000000  00056c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020daf  00000000  00000000  0007e99f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7eb3  00000000  00000000  0009f74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00177601  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000771c  00000000  00000000  00177654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd60 	.word	0x0800fd60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	0800fd60 	.word	0x0800fd60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <LoadApp>:
 *     3.AppAmount:The amount of applications in 'AppList'.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void LoadApp(COS_io *ioDevice, COS_App AppList[], uint8_t AppAmount)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	4613      	mov	r3, r2
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for(i=0 ; i<AppAmount ; i++)
 8001026:	2300      	movs	r3, #0
 8001028:	75fb      	strb	r3, [r7, #23]
 800102a:	e06c      	b.n	8001106 <LoadApp+0xee>
	{
		/* deem that an incorrect name is a memory read error */
		if(!((*AppList[i].Name>='a'&&*AppList[i].Name<='z') || (*AppList[i].Name>='A'&&*AppList[i].Name<='Z')))
 800102c:	7dfa      	ldrb	r2, [r7, #23]
 800102e:	4613      	mov	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4413      	add	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	461a      	mov	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b60      	cmp	r3, #96	; 0x60
 8001042:	d90b      	bls.n	800105c <LoadApp+0x44>
 8001044:	7dfa      	ldrb	r2, [r7, #23]
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	461a      	mov	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4413      	add	r3, r2
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b7a      	cmp	r3, #122	; 0x7a
 800105a:	d920      	bls.n	800109e <LoadApp+0x86>
 800105c:	7dfa      	ldrb	r2, [r7, #23]
 800105e:	4613      	mov	r3, r2
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4413      	add	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	461a      	mov	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4413      	add	r3, r2
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b40      	cmp	r3, #64	; 0x40
 8001072:	d90b      	bls.n	800108c <LoadApp+0x74>
 8001074:	7dfa      	ldrb	r2, [r7, #23]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	461a      	mov	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4413      	add	r3, r2
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b5a      	cmp	r3, #90	; 0x5a
 800108a:	d908      	bls.n	800109e <LoadApp+0x86>
		{
			COS_Logf(err,"read app list error:check 'AppAmount'");
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <LoadApp+0xfc>)
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2303      	movs	r3, #3
 8001092:	222c      	movs	r2, #44	; 0x2c
 8001094:	4920      	ldr	r1, [pc, #128]	; (8001118 <LoadApp+0x100>)
 8001096:	4821      	ldr	r0, [pc, #132]	; (800111c <LoadApp+0x104>)
 8001098:	f002 fb0e 	bl	80036b8 <_Log_Write>
			return ;
 800109c:	e037      	b.n	800110e <LoadApp+0xf6>
		}
		COS_Logf(info,"load app \"%s\"", AppList[i].Name);
 800109e:	7dfa      	ldrb	r2, [r7, #23]
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	461a      	mov	r2, r3
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4413      	add	r3, r2
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <LoadApp+0x108>)
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2306      	movs	r3, #6
 80010b8:	222f      	movs	r2, #47	; 0x2f
 80010ba:	4917      	ldr	r1, [pc, #92]	; (8001118 <LoadApp+0x100>)
 80010bc:	4817      	ldr	r0, [pc, #92]	; (800111c <LoadApp+0x104>)
 80010be:	f002 fafb 	bl	80036b8 <_Log_Write>
		io_AddCmd(ioDevice, AppList[i].Name, AppList[i].ParamsDescription, AppList[i].CmdCallbackFunc);
 80010c2:	7dfa      	ldrb	r2, [r7, #23]
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	461a      	mov	r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	4413      	add	r3, r2
 80010d2:	6819      	ldr	r1, [r3, #0]
 80010d4:	7dfa      	ldrb	r2, [r7, #23]
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4413      	add	r3, r2
 80010e4:	6858      	ldr	r0, [r3, #4]
 80010e6:	7dfa      	ldrb	r2, [r7, #23]
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	461a      	mov	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	4413      	add	r3, r2
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4602      	mov	r2, r0
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f000 fd82 	bl	8001c04 <io_AddCmd>
	for(i=0 ; i<AppAmount ; i++)
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	3301      	adds	r3, #1
 8001104:	75fb      	strb	r3, [r7, #23]
 8001106:	7dfa      	ldrb	r2, [r7, #23]
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	429a      	cmp	r2, r3
 800110c:	d38e      	bcc.n	800102c <LoadApp+0x14>
	}
}
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	0800fd94 	.word	0x0800fd94
 8001118:	08010cb0 	.word	0x08010cb0
 800111c:	0800fd78 	.word	0x0800fd78
 8001120:	0800fdbc 	.word	0x0800fdbc

08001124 <PrintLogcb>:



#if LOG_STORAGE
void PrintLogcb(uint8_t* ParamList)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	COS_PrintLog();
 800112c:	f002 fb7a 	bl	8003824 <COS_PrintLog>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <PackageModecb>:
#endif


void PackageModecb(uint8_t *ParamList)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	io_PackageMode(&cosio, 1, 4, PackageTest);
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <PackageModecb+0x1c>)
 8001142:	2204      	movs	r2, #4
 8001144:	2101      	movs	r1, #1
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <PackageModecb+0x20>)
 8001148:	f001 ff44 	bl	8002fd4 <io_PackageMode>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0800115d 	.word	0x0800115d
 8001158:	200043dc 	.word	0x200043dc

0800115c <PackageTest>:


void PackageTest(COS_io* ioDevice, uint8_t* DataPackage)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	io_SendData(&cosio, DataPackage, 4);
 8001166:	2204      	movs	r2, #4
 8001168:	6839      	ldr	r1, [r7, #0]
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <PackageTest+0x2c>)
 800116c:	f001 fc68 	bl	8002a40 <io_SendData>
	if(*DataPackage == '+')
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b2b      	cmp	r3, #43	; 0x2b
 8001176:	d102      	bne.n	800117e <PackageTest+0x22>
	{
		io_CommandMode(&cosio);
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <PackageTest+0x2c>)
 800117a:	f001 fab9 	bl	80026f0 <io_CommandMode>
	}
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200043dc 	.word	0x200043dc

0800118c <Car_Init>:
 *     4.yAxisWheelDistance:The distance between the center of the left and right wheels.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void Car_Init(CarType_t *Car_instance, float WheelDiameter, float xAxisWheelDistance, float yAxisWheelDistance)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	ed87 0a02 	vstr	s0, [r7, #8]
 8001198:	edc7 0a01 	vstr	s1, [r7, #4]
 800119c:	ed87 1a00 	vstr	s2, [r7]
	/* set the motor pointer as NULL to avoid wild pointer.
	 * when function 'Car_AddWheel()' is called, the pointer
	 * will be correct value. Many of functions check whether
	 * DC motor is added by examining whether the pointer is
	 * NULL or not. */
	Car_instance->LeftFrontMotor = NULL;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
	Car_instance->LeftRearMotor  = NULL;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	605a      	str	r2, [r3, #4]
	Car_instance->RightFrontMotor= NULL;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
	Car_instance->RightRearMotor = NULL;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]

	Car_instance->WheelDiameter = WheelDiameter;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	611a      	str	r2, [r3, #16]

	Car_instance->xAxisWheelDistance = xAxisWheelDistance;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	615a      	str	r2, [r3, #20]
	Car_instance->yAxisWheelDistance = yAxisWheelDistance;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	619a      	str	r2, [r3, #24]

	/* All kinematic-related parameters are set to zero to avoid
	 * uninitialized random values affecting the initial state
	 * of the kinematic model. */
	Car_instance->CurrentXVelocity        = 0;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
	Car_instance->CurrentYVelocity        = 0;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
	Car_instance->CurrentAngularVelocity  = 0;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24

	Car_instance->AdjustedXVelocity       = 0;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
	Car_instance->AdjustedYVelocity       = 0;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
	Car_instance->AdjustedAngularVelocity = 0;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30

	Car_instance->TargetXVelocity         = 0;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	635a      	str	r2, [r3, #52]	; 0x34
	Car_instance->TargetYVelocity         = 0;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	639a      	str	r2, [r3, #56]	; 0x38
	Car_instance->TargetAngularVelocity   = 0;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <Car_AddWheel>:
 *     4.RightRear:The pointer of right rear 'DCMotor' struct.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void Car_AddWheel(DCMotor *LeftFront, DCMotor *LeftRear, DCMotor *RightFront, DCMotor *RightRear)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af02      	add	r7, sp, #8
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	603b      	str	r3, [r7, #0]

	COS_assert(LeftFront, warning, "car add Left Front Motor failed:passing null motor.");
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d107      	bne.n	8001244 <Car_AddWheel+0x24>
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <Car_AddWheel+0x88>)
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2304      	movs	r3, #4
 800123a:	227a      	movs	r2, #122	; 0x7a
 800123c:	491b      	ldr	r1, [pc, #108]	; (80012ac <Car_AddWheel+0x8c>)
 800123e:	481c      	ldr	r0, [pc, #112]	; (80012b0 <Car_AddWheel+0x90>)
 8001240:	f002 fa3a 	bl	80036b8 <_Log_Write>
	COS_assert(LeftRear,  warning, "car add Left Front Motor failed:passing null motor.");
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d107      	bne.n	800125a <Car_AddWheel+0x3a>
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <Car_AddWheel+0x88>)
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2304      	movs	r3, #4
 8001250:	227b      	movs	r2, #123	; 0x7b
 8001252:	4916      	ldr	r1, [pc, #88]	; (80012ac <Car_AddWheel+0x8c>)
 8001254:	4816      	ldr	r0, [pc, #88]	; (80012b0 <Car_AddWheel+0x90>)
 8001256:	f002 fa2f 	bl	80036b8 <_Log_Write>
	COS_assert(RightFront,warning, "car add Left Front Motor failed:passing null motor.");
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <Car_AddWheel+0x50>
 8001260:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <Car_AddWheel+0x88>)
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2304      	movs	r3, #4
 8001266:	227c      	movs	r2, #124	; 0x7c
 8001268:	4910      	ldr	r1, [pc, #64]	; (80012ac <Car_AddWheel+0x8c>)
 800126a:	4811      	ldr	r0, [pc, #68]	; (80012b0 <Car_AddWheel+0x90>)
 800126c:	f002 fa24 	bl	80036b8 <_Log_Write>
	COS_assert(RightRear, warning, "car add Left Front Motor failed:passing null motor.");
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d107      	bne.n	8001286 <Car_AddWheel+0x66>
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <Car_AddWheel+0x88>)
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2304      	movs	r3, #4
 800127c:	227d      	movs	r2, #125	; 0x7d
 800127e:	490b      	ldr	r1, [pc, #44]	; (80012ac <Car_AddWheel+0x8c>)
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <Car_AddWheel+0x90>)
 8001282:	f002 fa19 	bl	80036b8 <_Log_Write>

	Car.LeftFrontMotor  = LeftFront;
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <Car_AddWheel+0x94>)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6013      	str	r3, [r2, #0]
	Car.LeftRearMotor   = LeftRear;
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <Car_AddWheel+0x94>)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	6053      	str	r3, [r2, #4]
	Car.RightFrontMotor = RightFront;
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <Car_AddWheel+0x94>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6093      	str	r3, [r2, #8]
	Car.RightRearMotor  = RightRear;
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <Car_AddWheel+0x94>)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	60d3      	str	r3, [r2, #12]

}
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	0800fe68 	.word	0x0800fe68
 80012ac:	08010cb8 	.word	0x08010cb8
 80012b0:	0800fe44 	.word	0x0800fe44
 80012b4:	200002ac 	.word	0x200002ac

080012b8 <Car_SetVelocity>:
 *     4.AngVelocity:Angular velocity of car.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void Car_SetVelocity(CarType_t *Car, Angle_t Angle, LinVelocity_t Velocity, AngVelocity_t AngVelocity)
{
 80012b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012bc:	b08c      	sub	sp, #48	; 0x30
 80012be:	af08      	add	r7, sp, #32
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80012c6:	edc7 0a01 	vstr	s1, [r7, #4]
 80012ca:	ed87 1a00 	vstr	s2, [r7]
	Car->TargetYVelocity = Velocity * sinf(Angle);
 80012ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80012d2:	f00d ffe9 	bl	800f2a8 <sinf>
 80012d6:	eeb0 7a40 	vmov.f32	s14, s0
 80012da:	edd7 7a01 	vldr	s15, [r7, #4]
 80012de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	Car->TargetXVelocity = Velocity * cosf(Angle);
 80012e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ec:	f00d ff98 	bl	800f220 <cosf>
 80012f0:	eeb0 7a40 	vmov.f32	s14, s0
 80012f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	Car->TargetAngularVelocity = AngVelocity;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	63da      	str	r2, [r3, #60]	; 0x3c
	COS_Logf(info,"car set move towards %.2fdegree at speed %.2fcm/s, at angular velocity %.2frad/s.",Angle*180/3.141593,Velocity,AngVelocity);
 8001308:	edd7 7a02 	vldr	s15, [r7, #8]
 800130c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001370 <Car_SetVelocity+0xb8>
 8001310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001314:	ee17 0a90 	vmov	r0, s15
 8001318:	f7ff f926 	bl	8000568 <__aeabi_f2d>
 800131c:	a312      	add	r3, pc, #72	; (adr r3, 8001368 <Car_SetVelocity+0xb0>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff faa3 	bl	800086c <__aeabi_ddiv>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4690      	mov	r8, r2
 800132c:	4699      	mov	r9, r3
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff f91a 	bl	8000568 <__aeabi_f2d>
 8001334:	4604      	mov	r4, r0
 8001336:	460d      	mov	r5, r1
 8001338:	6838      	ldr	r0, [r7, #0]
 800133a:	f7ff f915 	bl	8000568 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001346:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800134a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <Car_SetVelocity+0xbc>)
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2306      	movs	r3, #6
 8001354:	2295      	movs	r2, #149	; 0x95
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <Car_SetVelocity+0xc0>)
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <Car_SetVelocity+0xc4>)
 800135a:	f002 f9ad 	bl	80036b8 <_Log_Write>
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001368:	82c2bd7f 	.word	0x82c2bd7f
 800136c:	400921fb 	.word	0x400921fb
 8001370:	43340000 	.word	0x43340000
 8001374:	0800fe9c 	.word	0x0800fe9c
 8001378:	08010cc8 	.word	0x08010cc8
 800137c:	0800fe44 	.word	0x0800fe44

08001380 <Car_AdjustedVelocity>:
 *     1.Car:Pointer of 'CarType_t' instance.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void Car_AdjustedVelocity(CarType_t *Car)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	/* caution:this is the velocity of wheel ranther than motor,
	 * so its unit is cm/s rather than rad/s */
	AngVelocity_t LeftFrontWheelAngularVelocity   = 0;  // unit:rad/s
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
	AngVelocity_t LeftRearWheelAngularVelocity    = 0;  // unit:rad/s
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
	AngVelocity_t RightFrontWheelAngularVelocity  = 0;  // unit:rad/s
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
	AngVelocity_t RightRearWheelAngularVelocity   = 0;  // unit:rad/s
 800139a:	f04f 0300 	mov.w	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
	LinVelocity_t LeftFrontWheelVelocity          = 0;  // unit:cm/s
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
	LinVelocity_t LeftRearWheelVelocity           = 0;  // unit:cm/s
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
	LinVelocity_t RightFrontWheelVelocity         = 0;  // unit:cm/s
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
	LinVelocity_t RightRearWheelVelocity          = 0;  // unit:cm/s
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
	LinVelocity_t xAxisVelocity                   = 0;  // unit:cm/s
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
	LinVelocity_t yAxisVelocity                   = 0;  // unit:cm/s
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]

	/* closed-loop control */
	Car_VelocityControl(Car);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f8ca 	bl	800155e <Car_VelocityControl>

	xAxisVelocity = Car->AdjustedXVelocity;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	60fb      	str	r3, [r7, #12]
	yAxisVelocity = Car->AdjustedYVelocity;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	60bb      	str	r3, [r7, #8]

	LeftFrontWheelVelocity  = xAxisVelocity + yAxisVelocity - Car->AdjustedAngularVelocity * (Car->yAxisWheelDistance + Car->xAxisWheelDistance);
 80013d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80013da:	edd7 7a02 	vldr	s15, [r7, #8]
 80013de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	ed93 6a06 	vldr	s12, [r3, #24]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80013f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80013f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001400:	edc7 7a07 	vstr	s15, [r7, #28]
	LeftRearWheelVelocity   = xAxisVelocity - yAxisVelocity - Car->AdjustedAngularVelocity * (Car->yAxisWheelDistance + Car->xAxisWheelDistance);
 8001404:	ed97 7a03 	vldr	s14, [r7, #12]
 8001408:	edd7 7a02 	vldr	s15, [r7, #8]
 800140c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	ed93 6a06 	vldr	s12, [r3, #24]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001422:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142e:	edc7 7a06 	vstr	s15, [r7, #24]
	RightFrontWheelVelocity = xAxisVelocity - yAxisVelocity + Car->AdjustedAngularVelocity * (Car->yAxisWheelDistance + Car->xAxisWheelDistance);
 8001432:	ed97 7a03 	vldr	s14, [r7, #12]
 8001436:	edd7 7a02 	vldr	s15, [r7, #8]
 800143a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	ed93 6a06 	vldr	s12, [r3, #24]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001450:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145c:	edc7 7a05 	vstr	s15, [r7, #20]
	RightRearWheelVelocity  = xAxisVelocity + yAxisVelocity + Car->AdjustedAngularVelocity * (Car->yAxisWheelDistance + Car->xAxisWheelDistance);
 8001460:	ed97 7a03 	vldr	s14, [r7, #12]
 8001464:	edd7 7a02 	vldr	s15, [r7, #8]
 8001468:	ee37 7a27 	vadd.f32	s14, s14, s15
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	ed93 6a06 	vldr	s12, [r3, #24]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	edd3 7a05 	vldr	s15, [r3, #20]
 800147e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148a:	edc7 7a04 	vstr	s15, [r7, #16]

	LeftFrontWheelAngularVelocity  = LinVelToAngVel(Car->WheelDiameter/2,LeftFrontWheelVelocity);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	edd3 7a04 	vldr	s15, [r3, #16]
 8001494:	edd7 6a07 	vldr	s13, [r7, #28]
 8001498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800149c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	LeftRearWheelAngularVelocity   = LinVelToAngVel(Car->WheelDiameter/2,LeftRearWheelVelocity );
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80014ae:	edd7 6a06 	vldr	s13, [r7, #24]
 80014b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	RightFrontWheelAngularVelocity = LinVelToAngVel(Car->WheelDiameter/2,RightFrontWheelVelocity);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80014c8:	edd7 6a05 	vldr	s13, [r7, #20]
 80014cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	RightRearWheelAngularVelocity  = LinVelToAngVel(Car->WheelDiameter/2,RightRearWheelVelocity);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edd3 7a04 	vldr	s15, [r3, #16]
 80014e2:	edd7 6a04 	vldr	s13, [r7, #16]
 80014e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80014ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f2:	edc7 7a08 	vstr	s15, [r7, #32]

	DCMotor_SetVelocity(Car->LeftFrontMotor, LeftFrontWheelAngularVelocity );
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fb7a 	bl	8003bf8 <DCMotor_SetVelocity>
	DCMotor_SetVelocity(Car->LeftRearMotor,  LeftRearWheelAngularVelocity  );
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fb73 	bl	8003bf8 <DCMotor_SetVelocity>
	DCMotor_SetVelocity(Car->RightFrontMotor,RightFrontWheelAngularVelocity);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800151a:	4618      	mov	r0, r3
 800151c:	f002 fb6c 	bl	8003bf8 <DCMotor_SetVelocity>
	DCMotor_SetVelocity(Car->RightRearMotor, RightRearWheelAngularVelocity );
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	ed97 0a08 	vldr	s0, [r7, #32]
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fb65 	bl	8003bf8 <DCMotor_SetVelocity>

	DCMotor_AdjustVelocity(Car->LeftFrontMotor );
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f002 fbb6 	bl	8003ca4 <DCMotor_AdjustVelocity>
	DCMotor_AdjustVelocity(Car->LeftRearMotor  );
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fbb1 	bl	8003ca4 <DCMotor_AdjustVelocity>
	DCMotor_AdjustVelocity(Car->RightFrontMotor);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fbac 	bl	8003ca4 <DCMotor_AdjustVelocity>
	DCMotor_AdjustVelocity(Car->RightRearMotor );
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fba7 	bl	8003ca4 <DCMotor_AdjustVelocity>

}
 8001556:	bf00      	nop
 8001558:	3730      	adds	r7, #48	; 0x30
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <Car_VelocityControl>:
 *     1.Car:Pointer of 'CarType_t' instance.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void Car_VelocityControl(CarType_t *Car)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
	/* The driver for MPU has not yet been developed yet,
	 * so velocity control has nothing to do */
	Car->AdjustedAngularVelocity = Car->TargetAngularVelocity;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
	Car->AdjustedXVelocity       = Car->TargetXVelocity;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	629a      	str	r2, [r3, #40]	; 0x28
	Car->AdjustedYVelocity       = Car->TargetYVelocity;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <SetVelocitycb>:
 *     1.4.VelocityVal4:Right rear  wheel velocity. type:float ; unit:rad/s.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void SetVelocitycb(uint8_t* ParamList)
{
 800158c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001590:	b094      	sub	sp, #80	; 0x50
 8001592:	af0a      	add	r7, sp, #40	; 0x28
 8001594:	6078      	str	r0, [r7, #4]
	uint8_t SizeSum = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float LeftFrontVelocity = *(float*)(ParamList + SizeSum);
 800159c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	623b      	str	r3, [r7, #32]
	SizeSum += sizeof(float);
 80015a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015ac:	3304      	adds	r3, #4
 80015ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float LeftRearVelocity = *(float*)(ParamList + SizeSum);
 80015b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61fb      	str	r3, [r7, #28]
	SizeSum += sizeof(float);
 80015be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015c2:	3304      	adds	r3, #4
 80015c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float RightFrontVelocity = *(float*)(ParamList + SizeSum);
 80015c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	61bb      	str	r3, [r7, #24]
	SizeSum += sizeof(float);
 80015d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d8:	3304      	adds	r3, #4
 80015da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float RightRearVelocity = *(float*)(ParamList + SizeSum);
 80015de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	617b      	str	r3, [r7, #20]

	float xAxisVelocity = (LeftFrontVelocity+RightFrontVelocity)/2;
 80015ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80015ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80015f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015f6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fe:	edc7 7a04 	vstr	s15, [r7, #16]
	float yAxisVelocity = (LeftRearVelocity+RightRearVelocity)/2;
 8001602:	ed97 7a07 	vldr	s14, [r7, #28]
 8001606:	edd7 7a05 	vldr	s15, [r7, #20]
 800160a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800160e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001616:	edc7 7a03 	vstr	s15, [r7, #12]
	float AngVelocity = (RightFrontVelocity+RightRearVelocity-LeftFrontVelocity-LeftRearVelocity)/(4*(Car.xAxisWheelDistance+Car.yAxisWheelDistance));
 800161a:	ed97 7a06 	vldr	s14, [r7, #24]
 800161e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001622:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001626:	edd7 7a08 	vldr	s15, [r7, #32]
 800162a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800162e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001632:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <SetVelocitycb+0x130>)
 8001638:	ed93 7a05 	vldr	s14, [r3, #20]
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <SetVelocitycb+0x130>)
 800163e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001646:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800164a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800164e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001652:	edc7 7a02 	vstr	s15, [r7, #8]

	Car.TargetXVelocity = xAxisVelocity;
 8001656:	4a19      	ldr	r2, [pc, #100]	; (80016bc <SetVelocitycb+0x130>)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	6353      	str	r3, [r2, #52]	; 0x34
	Car.TargetYVelocity = yAxisVelocity;
 800165c:	4a17      	ldr	r2, [pc, #92]	; (80016bc <SetVelocitycb+0x130>)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6393      	str	r3, [r2, #56]	; 0x38
	Car.TargetAngularVelocity = AngVelocity;
 8001662:	4a16      	ldr	r2, [pc, #88]	; (80016bc <SetVelocitycb+0x130>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	63d3      	str	r3, [r2, #60]	; 0x3c

    COS_Logf(info,"set motor velocity: LF:%.2f ; LR:%.2f ; RF:%.2f ; RR:%.2f",LeftFrontVelocity,
 8001668:	6a38      	ldr	r0, [r7, #32]
 800166a:	f7fe ff7d 	bl	8000568 <__aeabi_f2d>
 800166e:	4604      	mov	r4, r0
 8001670:	460d      	mov	r5, r1
 8001672:	69f8      	ldr	r0, [r7, #28]
 8001674:	f7fe ff78 	bl	8000568 <__aeabi_f2d>
 8001678:	4680      	mov	r8, r0
 800167a:	4689      	mov	r9, r1
 800167c:	69b8      	ldr	r0, [r7, #24]
 800167e:	f7fe ff73 	bl	8000568 <__aeabi_f2d>
 8001682:	4682      	mov	sl, r0
 8001684:	468b      	mov	fp, r1
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7fe ff6e 	bl	8000568 <__aeabi_f2d>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001694:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001698:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800169c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <SetVelocitycb+0x134>)
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2306      	movs	r3, #6
 80016a6:	22fe      	movs	r2, #254	; 0xfe
 80016a8:	4906      	ldr	r1, [pc, #24]	; (80016c4 <SetVelocitycb+0x138>)
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <SetVelocitycb+0x13c>)
 80016ac:	f002 f804 	bl	80036b8 <_Log_Write>
                                                                              LeftRearVelocity,
                                                                              RightFrontVelocity,
                                                                              RightRearVelocity);
}
 80016b0:	bf00      	nop
 80016b2:	3728      	adds	r7, #40	; 0x28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ba:	bf00      	nop
 80016bc:	200002ac 	.word	0x200002ac
 80016c0:	0800fef0 	.word	0x0800fef0
 80016c4:	08010cd8 	.word	0x08010cd8
 80016c8:	0800fe44 	.word	0x0800fe44

080016cc <ShowPIDcb>:
 *     1.ParamList:The parameters' data passed from command processor.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void ShowPIDcb(uint8_t* ParamList)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	if(((PID_t*)(Car.LeftFrontMotor->VelocityController))->Identifier!=CONTROLLER_PID)
 80016d4:	4b65      	ldr	r3, [pc, #404]	; (800186c <ShowPIDcb+0x1a0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d007      	beq.n	80016f0 <ShowPIDcb+0x24>
	{
		COS_printf("%s doesn't have PID controller.\r\n",Car.LeftFrontMotor->Name);
 80016e0:	4b62      	ldr	r3, [pc, #392]	; (800186c <ShowPIDcb+0x1a0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4861      	ldr	r0, [pc, #388]	; (8001870 <ShowPIDcb+0x1a4>)
 80016ea:	f000 fec7 	bl	800247c <COS_printf>
 80016ee:	e023      	b.n	8001738 <ShowPIDcb+0x6c>
	}
	else
	{
		COS_printf("LeftFront   Kp:%-6.3f\r\n",((PID_t*)(Car.LeftFrontMotor->VelocityController))->Kp);
 80016f0:	4b5e      	ldr	r3, [pc, #376]	; (800186c <ShowPIDcb+0x1a0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff35 	bl	8000568 <__aeabi_f2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	485c      	ldr	r0, [pc, #368]	; (8001874 <ShowPIDcb+0x1a8>)
 8001704:	f000 feba 	bl	800247c <COS_printf>
		COS_printf("LeftFront   Ki:%-6.3f\r\n",((PID_t*)(Car.LeftFrontMotor->VelocityController))->Ki);
 8001708:	4b58      	ldr	r3, [pc, #352]	; (800186c <ShowPIDcb+0x1a0>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe ff29 	bl	8000568 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4857      	ldr	r0, [pc, #348]	; (8001878 <ShowPIDcb+0x1ac>)
 800171c:	f000 feae 	bl	800247c <COS_printf>
		COS_printf("LeftFront   Kd:%-6.3f\r\n",((PID_t*)(Car.LeftFrontMotor->VelocityController))->Kd);
 8001720:	4b52      	ldr	r3, [pc, #328]	; (800186c <ShowPIDcb+0x1a0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff1d 	bl	8000568 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4852      	ldr	r0, [pc, #328]	; (800187c <ShowPIDcb+0x1b0>)
 8001734:	f000 fea2 	bl	800247c <COS_printf>
	}
	if(((PID_t*)(Car.LeftRearMotor->VelocityController))->Identifier!=CONTROLLER_PID)
 8001738:	4b4c      	ldr	r3, [pc, #304]	; (800186c <ShowPIDcb+0x1a0>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d007      	beq.n	8001754 <ShowPIDcb+0x88>
	{
		COS_printf("%s doesn't have PID controller.\r\n",Car.LeftRearMotor->Name);
 8001744:	4b49      	ldr	r3, [pc, #292]	; (800186c <ShowPIDcb+0x1a0>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	4848      	ldr	r0, [pc, #288]	; (8001870 <ShowPIDcb+0x1a4>)
 800174e:	f000 fe95 	bl	800247c <COS_printf>
 8001752:	e023      	b.n	800179c <ShowPIDcb+0xd0>
	}
	else
	{
		COS_printf("LeftRear    Kp:%-6.3f\r\n",((PID_t*)(Car.LeftRearMotor->VelocityController))->Kp);
 8001754:	4b45      	ldr	r3, [pc, #276]	; (800186c <ShowPIDcb+0x1a0>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ff03 	bl	8000568 <__aeabi_f2d>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4846      	ldr	r0, [pc, #280]	; (8001880 <ShowPIDcb+0x1b4>)
 8001768:	f000 fe88 	bl	800247c <COS_printf>
		COS_printf("LeftRear    Ki:%-6.3f\r\n",((PID_t*)(Car.LeftRearMotor->VelocityController))->Ki);
 800176c:	4b3f      	ldr	r3, [pc, #252]	; (800186c <ShowPIDcb+0x1a0>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fef7 	bl	8000568 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4841      	ldr	r0, [pc, #260]	; (8001884 <ShowPIDcb+0x1b8>)
 8001780:	f000 fe7c 	bl	800247c <COS_printf>
		COS_printf("LeftRear    Kd:%-6.3f\r\n",((PID_t*)(Car.LeftRearMotor->VelocityController))->Kd);
 8001784:	4b39      	ldr	r3, [pc, #228]	; (800186c <ShowPIDcb+0x1a0>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe feeb 	bl	8000568 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	483c      	ldr	r0, [pc, #240]	; (8001888 <ShowPIDcb+0x1bc>)
 8001798:	f000 fe70 	bl	800247c <COS_printf>
	}
	if(((PID_t*)(Car.RightFrontMotor->VelocityController))->Identifier!=CONTROLLER_PID)
 800179c:	4b33      	ldr	r3, [pc, #204]	; (800186c <ShowPIDcb+0x1a0>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d007      	beq.n	80017b8 <ShowPIDcb+0xec>
	{
		COS_printf("%s doesn't have PID controller.\r\n",Car.RightFrontMotor->Name);
 80017a8:	4b30      	ldr	r3, [pc, #192]	; (800186c <ShowPIDcb+0x1a0>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	482f      	ldr	r0, [pc, #188]	; (8001870 <ShowPIDcb+0x1a4>)
 80017b2:	f000 fe63 	bl	800247c <COS_printf>
 80017b6:	e023      	b.n	8001800 <ShowPIDcb+0x134>
	}
	else
	{
		COS_printf("RightFront  Kp:%-6.3f\r\n",((PID_t*)(Car.RightFrontMotor->VelocityController))->Kp);
 80017b8:	4b2c      	ldr	r3, [pc, #176]	; (800186c <ShowPIDcb+0x1a0>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fed1 	bl	8000568 <__aeabi_f2d>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4830      	ldr	r0, [pc, #192]	; (800188c <ShowPIDcb+0x1c0>)
 80017cc:	f000 fe56 	bl	800247c <COS_printf>
		COS_printf("RightFront  Ki:%-6.3f\r\n",((PID_t*)(Car.RightFrontMotor->VelocityController))->Ki);
 80017d0:	4b26      	ldr	r3, [pc, #152]	; (800186c <ShowPIDcb+0x1a0>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fec5 	bl	8000568 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	482b      	ldr	r0, [pc, #172]	; (8001890 <ShowPIDcb+0x1c4>)
 80017e4:	f000 fe4a 	bl	800247c <COS_printf>
		COS_printf("RightFront  Kd:%-6.3f\r\n",((PID_t*)(Car.RightFrontMotor->VelocityController))->Kd);
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <ShowPIDcb+0x1a0>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe feb9 	bl	8000568 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4826      	ldr	r0, [pc, #152]	; (8001894 <ShowPIDcb+0x1c8>)
 80017fc:	f000 fe3e 	bl	800247c <COS_printf>
	}
	if(((PID_t*)(Car.RightRearMotor->VelocityController))->Identifier!=CONTROLLER_PID)
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <ShowPIDcb+0x1a0>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d007      	beq.n	800181c <ShowPIDcb+0x150>
	{
		COS_printf("%s doesn't have PID controller.\r\n",Car.RightRearMotor->Name);
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <ShowPIDcb+0x1a0>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	4816      	ldr	r0, [pc, #88]	; (8001870 <ShowPIDcb+0x1a4>)
 8001816:	f000 fe31 	bl	800247c <COS_printf>
	{
		COS_printf("RightRear   Kp:%-6.3f\r\n",((PID_t*)(Car.RightRearMotor->VelocityController))->Kp);
		COS_printf("RightRear   Ki:%-6.3f\r\n",((PID_t*)(Car.RightRearMotor->VelocityController))->Ki);
		COS_printf("RightRear   Kd:%-6.3f\r\n",((PID_t*)(Car.RightRearMotor->VelocityController))->Kd);
	}
}
 800181a:	e023      	b.n	8001864 <ShowPIDcb+0x198>
		COS_printf("RightRear   Kp:%-6.3f\r\n",((PID_t*)(Car.RightRearMotor->VelocityController))->Kp);
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <ShowPIDcb+0x1a0>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe9f 	bl	8000568 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	481a      	ldr	r0, [pc, #104]	; (8001898 <ShowPIDcb+0x1cc>)
 8001830:	f000 fe24 	bl	800247c <COS_printf>
		COS_printf("RightRear   Ki:%-6.3f\r\n",((PID_t*)(Car.RightRearMotor->VelocityController))->Ki);
 8001834:	4b0d      	ldr	r3, [pc, #52]	; (800186c <ShowPIDcb+0x1a0>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe93 	bl	8000568 <__aeabi_f2d>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4815      	ldr	r0, [pc, #84]	; (800189c <ShowPIDcb+0x1d0>)
 8001848:	f000 fe18 	bl	800247c <COS_printf>
		COS_printf("RightRear   Kd:%-6.3f\r\n",((PID_t*)(Car.RightRearMotor->VelocityController))->Kd);
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <ShowPIDcb+0x1a0>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe87 	bl	8000568 <__aeabi_f2d>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4810      	ldr	r0, [pc, #64]	; (80018a0 <ShowPIDcb+0x1d4>)
 8001860:	f000 fe0c 	bl	800247c <COS_printf>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200002ac 	.word	0x200002ac
 8001870:	0800ff2c 	.word	0x0800ff2c
 8001874:	0800ff50 	.word	0x0800ff50
 8001878:	0800ff68 	.word	0x0800ff68
 800187c:	0800ff80 	.word	0x0800ff80
 8001880:	0800ff98 	.word	0x0800ff98
 8001884:	0800ffb0 	.word	0x0800ffb0
 8001888:	0800ffc8 	.word	0x0800ffc8
 800188c:	0800ffe0 	.word	0x0800ffe0
 8001890:	0800fff8 	.word	0x0800fff8
 8001894:	08010010 	.word	0x08010010
 8001898:	08010028 	.word	0x08010028
 800189c:	08010040 	.word	0x08010040
 80018a0:	08010058 	.word	0x08010058

080018a4 <SetMotorPIDcb>:
 *     1.4.Kd:differential parameter.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void SetMotorPIDcb(uint8_t* ParamList)
{
 80018a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018a8:	b08f      	sub	sp, #60	; 0x3c
 80018aa:	af08      	add	r7, sp, #32
 80018ac:	6078      	str	r0, [r7, #4]

	uint8_t SizeSum    = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	75fb      	strb	r3, [r7, #23]
	uint8_t MotorIndex = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	75bb      	strb	r3, [r7, #22]
	float   Kp         = 0;
 80018b6:	f04f 0300 	mov.w	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
	float   Ki         = 0;
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
	float   Kd         = 0;
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]

	MotorIndex = *(uint8_t*)(ParamList + SizeSum);
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	75bb      	strb	r3, [r7, #22]
	SizeSum   += sizeof(uint8_t);
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	3301      	adds	r3, #1
 80018d6:	75fb      	strb	r3, [r7, #23]
	Kp         = *(float*)  (ParamList + SizeSum);
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	613b      	str	r3, [r7, #16]
	SizeSum   += sizeof(float);
 80018e2:	7dfb      	ldrb	r3, [r7, #23]
 80018e4:	3304      	adds	r3, #4
 80018e6:	75fb      	strb	r3, [r7, #23]
	Ki         = *(float*)  (ParamList + SizeSum);
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
	SizeSum   += sizeof(float);
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	3304      	adds	r3, #4
 80018f6:	75fb      	strb	r3, [r7, #23]
	Kd         = *(float*)  (ParamList + SizeSum);
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60bb      	str	r3, [r7, #8]

	switch(MotorIndex)
 8001902:	7dbb      	ldrb	r3, [r7, #22]
 8001904:	2b03      	cmp	r3, #3
 8001906:	f200 8103 	bhi.w	8001b10 <SetMotorPIDcb+0x26c>
 800190a:	a201      	add	r2, pc, #4	; (adr r2, 8001910 <SetMotorPIDcb+0x6c>)
 800190c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001910:	08001921 	.word	0x08001921
 8001914:	0800199d 	.word	0x0800199d
 8001918:	08001a19 	.word	0x08001a19
 800191c:	08001a95 	.word	0x08001a95
	{
	case 0:
	{
		((PID_t*)(Car.LeftFrontMotor->VelocityController))->Kp = Kp;
 8001920:	4b7e      	ldr	r3, [pc, #504]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	605a      	str	r2, [r3, #4]
		((PID_t*)(Car.LeftFrontMotor->VelocityController))->Ki = Ki;
 800192a:	4b7c      	ldr	r3, [pc, #496]	; (8001b1c <SetMotorPIDcb+0x278>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	609a      	str	r2, [r3, #8]
		((PID_t*)(Car.LeftFrontMotor->VelocityController))->Kd = Kd;
 8001934:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	60da      	str	r2, [r3, #12]
		COS_Logf(info,"%s has set pid Kp=%.2f Ki=%.2f Kd=%.2f.",Car.LeftFrontMotor->Name,
 800193e:	4b77      	ldr	r3, [pc, #476]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681e      	ldr	r6, [r3, #0]
 8001944:	4b75      	ldr	r3, [pc, #468]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe0b 	bl	8000568 <__aeabi_f2d>
 8001952:	4604      	mov	r4, r0
 8001954:	460d      	mov	r5, r1
 8001956:	4b71      	ldr	r3, [pc, #452]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe02 	bl	8000568 <__aeabi_f2d>
 8001964:	4680      	mov	r8, r0
 8001966:	4689      	mov	r9, r1
 8001968:	4b6c      	ldr	r3, [pc, #432]	; (8001b1c <SetMotorPIDcb+0x278>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdf9 	bl	8000568 <__aeabi_f2d>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800197e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001982:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001986:	9601      	str	r6, [sp, #4]
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <SetMotorPIDcb+0x27c>)
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2306      	movs	r3, #6
 800198e:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8001992:	4964      	ldr	r1, [pc, #400]	; (8001b24 <SetMotorPIDcb+0x280>)
 8001994:	4864      	ldr	r0, [pc, #400]	; (8001b28 <SetMotorPIDcb+0x284>)
 8001996:	f001 fe8f 	bl	80036b8 <_Log_Write>
				((PID_t*)(Car.LeftFrontMotor->VelocityController))->Kp,
				((PID_t*)(Car.LeftFrontMotor->VelocityController))->Ki,
				((PID_t*)(Car.LeftFrontMotor->VelocityController))->Kd);
		break;
 800199a:	e0ba      	b.n	8001b12 <SetMotorPIDcb+0x26e>
	}
	case 1:
	{
		((PID_t*)(Car.LeftRearMotor->VelocityController))->Kp = Kp;
 800199c:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <SetMotorPIDcb+0x278>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	605a      	str	r2, [r3, #4]
		((PID_t*)(Car.LeftRearMotor->VelocityController))->Ki = Ki;
 80019a6:	4b5d      	ldr	r3, [pc, #372]	; (8001b1c <SetMotorPIDcb+0x278>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	609a      	str	r2, [r3, #8]
		((PID_t*)(Car.LeftRearMotor->VelocityController))->Kd = Kd;
 80019b0:	4b5a      	ldr	r3, [pc, #360]	; (8001b1c <SetMotorPIDcb+0x278>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	60da      	str	r2, [r3, #12]
		COS_Logf(info,"%s has set pid Kp=%.2f Ki=%.2f Kd=%.2f.",Car.LeftRearMotor->Name,
 80019ba:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <SetMotorPIDcb+0x278>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	681e      	ldr	r6, [r3, #0]
 80019c0:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <SetMotorPIDcb+0x278>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fdcd 	bl	8000568 <__aeabi_f2d>
 80019ce:	4604      	mov	r4, r0
 80019d0:	460d      	mov	r5, r1
 80019d2:	4b52      	ldr	r3, [pc, #328]	; (8001b1c <SetMotorPIDcb+0x278>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fdc4 	bl	8000568 <__aeabi_f2d>
 80019e0:	4680      	mov	r8, r0
 80019e2:	4689      	mov	r9, r1
 80019e4:	4b4d      	ldr	r3, [pc, #308]	; (8001b1c <SetMotorPIDcb+0x278>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdbb 	bl	8000568 <__aeabi_f2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80019fa:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80019fe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001a02:	9601      	str	r6, [sp, #4]
 8001a04:	4b46      	ldr	r3, [pc, #280]	; (8001b20 <SetMotorPIDcb+0x27c>)
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2306      	movs	r3, #6
 8001a0a:	f240 126b 	movw	r2, #363	; 0x16b
 8001a0e:	4945      	ldr	r1, [pc, #276]	; (8001b24 <SetMotorPIDcb+0x280>)
 8001a10:	4845      	ldr	r0, [pc, #276]	; (8001b28 <SetMotorPIDcb+0x284>)
 8001a12:	f001 fe51 	bl	80036b8 <_Log_Write>
				((PID_t*)(Car.LeftRearMotor->VelocityController))->Kp,
				((PID_t*)(Car.LeftRearMotor->VelocityController))->Ki,
				((PID_t*)(Car.LeftRearMotor->VelocityController))->Kd);
		break;
 8001a16:	e07c      	b.n	8001b12 <SetMotorPIDcb+0x26e>
	}
	case 2:
	{
		((PID_t*)(Car.RightFrontMotor->VelocityController))->Kp = Kp;
 8001a18:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	605a      	str	r2, [r3, #4]
		((PID_t*)(Car.RightFrontMotor->VelocityController))->Ki = Ki;
 8001a22:	4b3e      	ldr	r3, [pc, #248]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	609a      	str	r2, [r3, #8]
		((PID_t*)(Car.RightFrontMotor->VelocityController))->Kd = Kd;
 8001a2c:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	60da      	str	r2, [r3, #12]
		COS_Logf(info,"%s has set pid Kp=%.2f Ki=%.2f Kd=%.2f.",Car.RightFrontMotor->Name,
 8001a36:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	681e      	ldr	r6, [r3, #0]
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fd8f 	bl	8000568 <__aeabi_f2d>
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	460d      	mov	r5, r1
 8001a4e:	4b33      	ldr	r3, [pc, #204]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd86 	bl	8000568 <__aeabi_f2d>
 8001a5c:	4680      	mov	r8, r0
 8001a5e:	4689      	mov	r9, r1
 8001a60:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd7d 	bl	8000568 <__aeabi_f2d>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a76:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001a7a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001a7e:	9601      	str	r6, [sp, #4]
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <SetMotorPIDcb+0x27c>)
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	2306      	movs	r3, #6
 8001a86:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8001a8a:	4926      	ldr	r1, [pc, #152]	; (8001b24 <SetMotorPIDcb+0x280>)
 8001a8c:	4826      	ldr	r0, [pc, #152]	; (8001b28 <SetMotorPIDcb+0x284>)
 8001a8e:	f001 fe13 	bl	80036b8 <_Log_Write>
				((PID_t*)(Car.RightFrontMotor->VelocityController))->Kp,
				((PID_t*)(Car.RightFrontMotor->VelocityController))->Ki,
				((PID_t*)(Car.RightFrontMotor->VelocityController))->Kd);
		break;
 8001a92:	e03e      	b.n	8001b12 <SetMotorPIDcb+0x26e>
	}
	case 3:
	{
		((PID_t*)(Car.RightRearMotor->VelocityController))->Kp = Kp;
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	605a      	str	r2, [r3, #4]
		((PID_t*)(Car.RightRearMotor->VelocityController))->Ki = Ki;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	609a      	str	r2, [r3, #8]
		((PID_t*)(Car.RightRearMotor->VelocityController))->Kd = Kd;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
		COS_Logf(info,"%s has set pid Kp=%.2f Ki=%.2f Kd=%.2f.",Car.RightRearMotor->Name,
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	681e      	ldr	r6, [r3, #0]
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd51 	bl	8000568 <__aeabi_f2d>
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	460d      	mov	r5, r1
 8001aca:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd48 	bl	8000568 <__aeabi_f2d>
 8001ad8:	4680      	mov	r8, r0
 8001ada:	4689      	mov	r9, r1
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <SetMotorPIDcb+0x278>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd3f 	bl	8000568 <__aeabi_f2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001af2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001af6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001afa:	9601      	str	r6, [sp, #4]
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <SetMotorPIDcb+0x27c>)
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2306      	movs	r3, #6
 8001b02:	f240 1281 	movw	r2, #385	; 0x181
 8001b06:	4907      	ldr	r1, [pc, #28]	; (8001b24 <SetMotorPIDcb+0x280>)
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <SetMotorPIDcb+0x284>)
 8001b0a:	f001 fdd5 	bl	80036b8 <_Log_Write>
				((PID_t*)(Car.RightRearMotor->VelocityController))->Kp,
				((PID_t*)(Car.RightRearMotor->VelocityController))->Ki,
				((PID_t*)(Car.RightRearMotor->VelocityController))->Kd);
		break;
 8001b0e:	e000      	b.n	8001b12 <SetMotorPIDcb+0x26e>
	}
	default:
		break;
 8001b10:	bf00      	nop
	}
}
 8001b12:	bf00      	nop
 8001b14:	371c      	adds	r7, #28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b1c:	200002ac 	.word	0x200002ac
 8001b20:	08010070 	.word	0x08010070
 8001b24:	08010ce8 	.word	0x08010ce8
 8001b28:	0800fe44 	.word	0x0800fe44
 8001b2c:	00000000 	.word	0x00000000

08001b30 <SetCarVelocitycb>:
 *     1.3.AngularVel:Angular velocity of rotation.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void SetCarVelocitycb(uint8_t* ParamList)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b086      	sub	sp, #24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	uint8_t  SizeSum    = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	75fb      	strb	r3, [r7, #23]
	float    Angle      = 0;
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
	float    Velocity   = 0;
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
	float    AngularVel = 0;
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]

	Angle      = *(uint16_t*)(ParamList + SizeSum);
 8001b4e:	7dfb      	ldrb	r3, [r7, #23]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5e:	edc7 7a04 	vstr	s15, [r7, #16]
	SizeSum   += sizeof(uint16_t);
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
 8001b64:	3302      	adds	r3, #2
 8001b66:	75fb      	strb	r3, [r7, #23]
	Velocity   = *(float*)   (ParamList + SizeSum);
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
	SizeSum   += sizeof(float);
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
 8001b74:	3304      	adds	r3, #4
 8001b76:	75fb      	strb	r3, [r7, #23]
	AngularVel = *(float*)   (ParamList + SizeSum);
 8001b78:	7dfb      	ldrb	r3, [r7, #23]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60bb      	str	r3, [r7, #8]

	Angle = Angle * 3.141593 / 180.0;
 8001b82:	6938      	ldr	r0, [r7, #16]
 8001b84:	f7fe fcf0 	bl	8000568 <__aeabi_f2d>
 8001b88:	a313      	add	r3, pc, #76	; (adr r3, 8001bd8 <SetCarVelocitycb+0xa8>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fd43 	bl	8000618 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <SetCarVelocitycb+0xa0>)
 8001ba0:	f7fe fe64 	bl	800086c <__aeabi_ddiv>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7ff f82c 	bl	8000c08 <__aeabi_d2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	613b      	str	r3, [r7, #16]
	Car_SetVelocity(&Car, Angle, Velocity, AngularVel);
 8001bb4:	ed97 1a02 	vldr	s2, [r7, #8]
 8001bb8:	edd7 0a03 	vldr	s1, [r7, #12]
 8001bbc:	ed97 0a04 	vldr	s0, [r7, #16]
 8001bc0:	4804      	ldr	r0, [pc, #16]	; (8001bd4 <SetCarVelocitycb+0xa4>)
 8001bc2:	f7ff fb79 	bl	80012b8 <Car_SetVelocity>
}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40668000 	.word	0x40668000
 8001bd4:	200002ac 	.word	0x200002ac
 8001bd8:	82c2bd7f 	.word	0x82c2bd7f
 8001bdc:	400921fb 	.word	0x400921fb

08001be0 <MotorPIDSelfAdjustcb>:
 *     1.ParamList:The parameters' data passed from command processor.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void MotorPIDSelfAdjustcb(uint8_t* ParamList)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	/* to be developed... */
	return ;
 8001be8:	bf00      	nop
}
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <CarKernelInit>:
#include "./src/car/c_car.h"
#include "./src/debug/c_debug.h"
#include "./src/communication/c_io.h"

void CarKernelInit()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	cosioInit();
 8001bf8:	f000 fbf0 	bl	80023dc <cosioInit>
    COS_DebugInit();
 8001bfc:	f001 fd4e 	bl	800369c <COS_DebugInit>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <io_AddCmd>:
 *     4.CmdCallbackFunc:command executive function.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_AddCmd(COS_io *ioDevice, const char *CmdName, const char *ParamsDescription, void* CmdCallbackFunc)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b0cd      	sub	sp, #308	; 0x134
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001c0e:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001c12:	6020      	str	r0, [r4, #0]
 8001c14:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001c18:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8001c1c:	6001      	str	r1, [r0, #0]
 8001c1e:	f507 7194 	add.w	r1, r7, #296	; 0x128
 8001c22:	f5a1 7192 	sub.w	r1, r1, #292	; 0x124
 8001c26:	600a      	str	r2, [r1, #0]
 8001c28:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001c2c:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8001c30:	6013      	str	r3, [r2, #0]
	COS_Cmd *NewCmd;
	char *pToken = NULL;                 // divided string of param type
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	char *pDivideTemp = NULL;            // for the third param of strtok_r()
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	static const char DivideSep[]=" ,";  // a string contains separator character.
	uint16_t ParamSize = 0;              // total size of all parameters.
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
	uint8_t *ParamContainer = NULL;      // dynamically allocated memory pointer.
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	char ParamsDscpCopy[256] = {0};      /* since strtok_r() doesn't accept const char* type, it is used to
 8001c4a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c4e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	3304      	adds	r3, #4
 8001c58:	22fc      	movs	r2, #252	; 0xfc
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f008 fa1e 	bl	800a09e <memset>
	                                      * carry original data of const char* type 'ParamsDescription' */

	/* allocate a piece of memory */
	NewCmd = (COS_Cmd*)cos_malloc(sizeof(COS_Cmd));
 8001c62:	2014      	movs	r0, #20
 8001c64:	f001 ff30 	bl	8003ac8 <cos_malloc>
 8001c68:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

	if(NewCmd==NULL) // memory allocation failed
 8001c6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d10e      	bne.n	8001c92 <io_AddCmd+0x8e>
	{
		COS_Logf(err,"create command '%s' fail:malloc fail.",CmdName);
 8001c74:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <io_AddCmd+0x1d4>)
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2303      	movs	r3, #3
 8001c86:	223a      	movs	r2, #58	; 0x3a
 8001c88:	4954      	ldr	r1, [pc, #336]	; (8001ddc <io_AddCmd+0x1d8>)
 8001c8a:	4855      	ldr	r0, [pc, #340]	; (8001de0 <io_AddCmd+0x1dc>)
 8001c8c:	f001 fd14 	bl	80036b8 <_Log_Write>
		return ;
 8001c90:	e09d      	b.n	8001dce <io_AddCmd+0x1ca>
	}
	else  // memory allocation succeed
	{
		NewCmd->CmdName = CmdName;
 8001c92:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001c96:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001c9a:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	601a      	str	r2, [r3, #0]
		NewCmd->ParamsDescription = ParamsDescription;
 8001ca2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ca6:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001caa:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
		NewCmd->CmdCallbackFunc = CmdCallbackFunc;
 8001cb2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cc0:	60da      	str	r2, [r3, #12]
		NewCmd->pNext = NULL;
 8001cc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]

		/* mount new command object to ioDevice */
		if(ioDevice->CmdList==NULL)
 8001cca:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d108      	bne.n	8001cec <io_AddCmd+0xe8>
		{
			ioDevice->CmdList = NewCmd;
 8001cda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cde:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8001cea:	e010      	b.n	8001d0e <io_AddCmd+0x10a>
		}
		else
		{
			NewCmd->pNext = ioDevice->CmdList;
 8001cec:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cf0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001cfc:	611a      	str	r2, [r3, #16]
			ioDevice->CmdList = NewCmd;
 8001cfe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
		}

		/* if this is a command without parameter */
		if(ParamsDescription == NULL || *ParamsDescription == '\0')
 8001d0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d12:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <io_AddCmd+0x128>
 8001d1c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <io_AddCmd+0x132>
		{
			NewCmd->ParamsContainer = NULL;
 8001d2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
			return ;
 8001d34:	e04b      	b.n	8001dce <io_AddCmd+0x1ca>
		}

		/* since strtok_r() doesn't accept constant string, the string variable
		 * which is a copy of original string is a must. */
		strncpy(ParamsDscpCopy,ParamsDescription, 256);
 8001d36:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d3a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d3e:	f107 0014 	add.w	r0, r7, #20
 8001d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d46:	6819      	ldr	r1, [r3, #0]
 8001d48:	f009 f9e5 	bl	800b116 <strncpy>

		/* get first parameter type */
		pToken = strtok_r(ParamsDscpCopy,DivideSep,&pDivideTemp);
 8001d4c:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4923      	ldr	r1, [pc, #140]	; (8001de4 <io_AddCmd+0x1e0>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f00a f856 	bl	800be08 <strtok_r>
 8001d5c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

		while(pToken!=NULL)
 8001d60:	e013      	b.n	8001d8a <io_AddCmd+0x186>
		{
			ParamSize += _io_GetParamSizeByStr(pToken);
 8001d62:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001d66:	f000 fa05 	bl	8002174 <_io_GetParamSizeByStr>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8001d72:	4413      	add	r3, r2
 8001d74:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
			pToken = strtok_r(NULL,DivideSep,&pDivideTemp);
 8001d78:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4919      	ldr	r1, [pc, #100]	; (8001de4 <io_AddCmd+0x1e0>)
 8001d80:	2000      	movs	r0, #0
 8001d82:	f00a f841 	bl	800be08 <strtok_r>
 8001d86:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		while(pToken!=NULL)
 8001d8a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1e7      	bne.n	8001d62 <io_AddCmd+0x15e>
		}
		ParamContainer = (uint8_t*)cos_malloc(ParamSize);
 8001d92:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8001d96:	4618      	mov	r0, r3
 8001d98:	f001 fe96 	bl	8003ac8 <cos_malloc>
 8001d9c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
		if(ParamContainer==NULL)
 8001da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10d      	bne.n	8001dc4 <io_AddCmd+0x1c0>
		{
			COS_Logf(warning,"command '%s' allocate parameter container failed:memory not enough.",CmdName);
 8001da8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001dac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <io_AddCmd+0x1e4>)
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	2304      	movs	r3, #4
 8001dba:	2265      	movs	r2, #101	; 0x65
 8001dbc:	4907      	ldr	r1, [pc, #28]	; (8001ddc <io_AddCmd+0x1d8>)
 8001dbe:	4808      	ldr	r0, [pc, #32]	; (8001de0 <io_AddCmd+0x1dc>)
 8001dc0:	f001 fc7a 	bl	80036b8 <_Log_Write>
		}
		NewCmd->ParamsContainer = ParamContainer;
 8001dc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001dc8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001dcc:	609a      	str	r2, [r3, #8]
	}
}
 8001dce:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	080100c0 	.word	0x080100c0
 8001ddc:	08010cf8 	.word	0x08010cf8
 8001de0:	08010098 	.word	0x08010098
 8001de4:	08010d04 	.word	0x08010d04
 8001de8:	080100e8 	.word	0x080100e8

08001dec <io_CmdProcess>:
 *     2.CmdStr:original command string.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_CmdProcess(COS_Cmd *CmdList, char *CmdStr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b0ce      	sub	sp, #312	; 0x138
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001df6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001dfa:	6018      	str	r0, [r3, #0]
 8001dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e04:	6019      	str	r1, [r3, #0]
	COS_Cmd *pCmdTemp = CmdList;        // command list operating pointer.
 8001e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	char *pCmdStrToken = NULL;          // get sub string of 'CmdStr'.
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	char *pDivideTemp1 = NULL;          // for the third param of strtok_r().
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	char *pParamTypeToken = NULL;       // get param type from param description string.
 8001e20:	2300      	movs	r3, #0
 8001e22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	char *pDivideTemp2 = NULL;          // for the third param of strtok_r().
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	const char *DivideSep = " ,\r";
 8001e2c:	4b6e      	ldr	r3, [pc, #440]	; (8001fe8 <io_CmdProcess+0x1fc>)
 8001e2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	uint8_t ParamType = 0;              // current parameter type when traversing.
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t CurrentParamsSizeSum = 0;  // current total size of parameters.
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
	int ParamOperationErrorCode = 0;    // the error code from scanwrite function.
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	/* check whether any of params is illegal */
	if((CmdList==NULL) || (CmdStr==NULL))
 8001e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80c5 	beq.w	8001fde <io_CmdProcess+0x1f2>
 8001e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80bd 	beq.w	8001fde <io_CmdProcess+0x1f2>
	{
		return ;
	}
	pCmdStrToken = CmdStr;
 8001e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	/* get command name */
	pCmdStrToken = strtok_r(CmdStr,DivideSep,&pDivideTemp1);
 8001e72:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e7e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	f009 ffc0 	bl	800be08 <strtok_r>
 8001e88:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

	/* find command in the command list*/
	while(pCmdTemp!=NULL)
 8001e8c:	e00f      	b.n	8001eae <io_CmdProcess+0xc2>
	{
		if(strstr(pCmdStrToken, pCmdTemp->CmdName))
 8001e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001e9a:	f009 f94f 	bl	800b13c <strstr>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d109      	bne.n	8001eb8 <io_CmdProcess+0xcc>
		{
			break;
		}
		else
		{
			pCmdTemp = pCmdTemp->pNext;
 8001ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	while(pCmdTemp!=NULL)
 8001eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1eb      	bne.n	8001e8e <io_CmdProcess+0xa2>
 8001eb6:	e000      	b.n	8001eba <io_CmdProcess+0xce>
			break;
 8001eb8:	bf00      	nop
		}
	}
	if(pCmdTemp==NULL)
 8001eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <io_CmdProcess+0xee>
	{
		COS_Logf(err,"%s : No such command.",pCmdStrToken);
 8001ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	4b48      	ldr	r3, [pc, #288]	; (8001fec <io_CmdProcess+0x200>)
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2303      	movs	r3, #3
 8001ece:	229a      	movs	r2, #154	; 0x9a
 8001ed0:	4947      	ldr	r1, [pc, #284]	; (8001ff0 <io_CmdProcess+0x204>)
 8001ed2:	4848      	ldr	r0, [pc, #288]	; (8001ff4 <io_CmdProcess+0x208>)
 8001ed4:	f001 fbf0 	bl	80036b8 <_Log_Write>
		return ;
 8001ed8:	e082      	b.n	8001fe0 <io_CmdProcess+0x1f4>
	}

	/* if the target command doesn't need parameter, directly
	 * call callback function */
	if(pCmdTemp->ParamsDescription==NULL)
 8001eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d104      	bne.n	8001eee <io_CmdProcess+0x102>
	{
		io_CmdExecute(pCmdTemp);
 8001ee4:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001ee8:	f000 f936 	bl	8002158 <io_CmdExecute>
		return ;
 8001eec:	e078      	b.n	8001fe0 <io_CmdProcess+0x1f4>
	}
	/* get first param value  */
	pCmdStrToken = strtok_r(NULL,DivideSep,&pDivideTemp1);
 8001eee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f009 ff85 	bl	800be08 <strtok_r>
 8001efe:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

	/* since string to be split for strtok_r() must be char* type rather
	 * than const char* type, the string must be copied to char* type variable. */
	char ParamsDscpCopy[256] = {0};
 8001f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f06:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	22fc      	movs	r2, #252	; 0xfc
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f008 f8c2 	bl	800a09e <memset>
	strncpy(ParamsDscpCopy, pCmdTemp->ParamsDescription, 256);
 8001f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f009 f8f4 	bl	800b116 <strncpy>

	/* get first param type string */
	pParamTypeToken = strtok_r(ParamsDscpCopy,DivideSep,&pDivideTemp2);
 8001f2e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f009 ff64 	bl	800be08 <strtok_r>
 8001f40:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

	/* traverse all params */
	while(pCmdStrToken!=NULL)
 8001f44:	e042      	b.n	8001fcc <io_CmdProcess+0x1e0>
	{
		/* get to know what type it is */
		ParamType = _io_GetParamType(pParamTypeToken);
 8001f46:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8001f4a:	f000 f927 	bl	800219c <_io_GetParamType>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

		/* put data into paramlist in order */
		ParamOperationErrorCode = _io_ScanWriteParamData(pCmdStrToken, ParamType, (pCmdTemp->ParamsContainer+CurrentParamsSizeSum));
 8001f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8001f5e:	441a      	add	r2, r3
 8001f60:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001f64:	4619      	mov	r1, r3
 8001f66:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8001f6a:	f000 f847 	bl	8001ffc <_io_ScanWriteParamData>
 8001f6e:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

		if(ParamOperationErrorCode<=0) // scan
 8001f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	dc08      	bgt.n	8001f8c <io_CmdProcess+0x1a0>
		{
			COS_Logf(err,"can't load parameters correctly, check your command parameters.");
 8001f7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <io_CmdProcess+0x20c>)
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	2303      	movs	r3, #3
 8001f80:	22bb      	movs	r2, #187	; 0xbb
 8001f82:	491b      	ldr	r1, [pc, #108]	; (8001ff0 <io_CmdProcess+0x204>)
 8001f84:	481b      	ldr	r0, [pc, #108]	; (8001ff4 <io_CmdProcess+0x208>)
 8001f86:	f001 fb97 	bl	80036b8 <_Log_Write>
			return ;
 8001f8a:	e029      	b.n	8001fe0 <io_CmdProcess+0x1f4>
		}
		CurrentParamsSizeSum += _io_GetParamSizeByTypeCode(ParamType);
 8001f8c:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8001f90:	4618      	mov	r0, r3
 8001f92:	f000 f9c1 	bl	8002318 <_io_GetParamSizeByTypeCode>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	; 0x122
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122

		/* get next param value */
		pCmdStrToken = strtok_r(NULL,DivideSep,&pDivideTemp1);
 8001fa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f009 ff2a 	bl	800be08 <strtok_r>
 8001fb4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

		/* get next param type */
		pParamTypeToken = strtok_r(NULL,DivideSep,&pDivideTemp2);
 8001fb8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f009 ff20 	bl	800be08 <strtok_r>
 8001fc8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
	while(pCmdStrToken!=NULL)
 8001fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1b8      	bne.n	8001f46 <io_CmdProcess+0x15a>
	}
	io_CmdExecute(pCmdTemp);
 8001fd4:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8001fd8:	f000 f8be 	bl	8002158 <io_CmdExecute>
 8001fdc:	e000      	b.n	8001fe0 <io_CmdProcess+0x1f4>
		return ;
 8001fde:	bf00      	nop
}
 8001fe0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	0801012c 	.word	0x0801012c
 8001fec:	08010130 	.word	0x08010130
 8001ff0:	08010d08 	.word	0x08010d08
 8001ff4:	08010098 	.word	0x08010098
 8001ff8:	08010148 	.word	0x08010148

08001ffc <_io_ScanWriteParamData>:
 *     3.pDataDst:data destination to be written in.
 * @retval: error code, -1 if read/write error, a integer greater than 0 if read/write succeed.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
int _io_ScanWriteParamData(char *str, uint8_t ParamType, uint8_t *pDataDst)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	460b      	mov	r3, r1
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	72fb      	strb	r3, [r7, #11]
	int ErrorCode = EOF;
 800200a:	f04f 33ff 	mov.w	r3, #4294967295
 800200e:	617b      	str	r3, [r7, #20]


	/* there are some warnings here, but don't worry, they are correct and useful */
	switch(ParamType)
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	3b01      	subs	r3, #1
 8002014:	2b0f      	cmp	r3, #15
 8002016:	f200 8093 	bhi.w	8002140 <_io_ScanWriteParamData+0x144>
 800201a:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <_io_ScanWriteParamData+0x24>)
 800201c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002020:	08002061 	.word	0x08002061
 8002024:	0800206f 	.word	0x0800206f
 8002028:	0800207d 	.word	0x0800207d
 800202c:	0800208b 	.word	0x0800208b
 8002030:	08002099 	.word	0x08002099
 8002034:	080020a7 	.word	0x080020a7
 8002038:	080020b5 	.word	0x080020b5
 800203c:	080020c3 	.word	0x080020c3
 8002040:	080020d1 	.word	0x080020d1
 8002044:	080020df 	.word	0x080020df
 8002048:	080020ed 	.word	0x080020ed
 800204c:	080020fb 	.word	0x080020fb
 8002050:	08002109 	.word	0x08002109
 8002054:	08002117 	.word	0x08002117
 8002058:	08002125 	.word	0x08002125
 800205c:	08002133 	.word	0x08002133
	{
	case PARAMTYPE_char:
	{
		ErrorCode = sscanf(str,"%c",(char*)pDataDst);
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	493a      	ldr	r1, [pc, #232]	; (800214c <_io_ScanWriteParamData+0x150>)
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f008 ffd1 	bl	800b00c <siscanf>
 800206a:	6178      	str	r0, [r7, #20]
		break;
 800206c:	e069      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_unsigned_char:
	{
		ErrorCode = sscanf(str,"%c",(unsigned char*)pDataDst);
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4936      	ldr	r1, [pc, #216]	; (800214c <_io_ScanWriteParamData+0x150>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f008 ffca 	bl	800b00c <siscanf>
 8002078:	6178      	str	r0, [r7, #20]
		break;
 800207a:	e062      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_int:
	{
		ErrorCode = sscanf(str,"%d",(int*)pDataDst);
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4934      	ldr	r1, [pc, #208]	; (8002150 <_io_ScanWriteParamData+0x154>)
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f008 ffc3 	bl	800b00c <siscanf>
 8002086:	6178      	str	r0, [r7, #20]
		break;
 8002088:	e05b      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_unsigned_int:
	{
		ErrorCode = sscanf(str,"%d",(unsigned int*)pDataDst);
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4930      	ldr	r1, [pc, #192]	; (8002150 <_io_ScanWriteParamData+0x154>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f008 ffbc 	bl	800b00c <siscanf>
 8002094:	6178      	str	r0, [r7, #20]
		break;
 8002096:	e054      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_short:
	{
		ErrorCode = sscanf(str,"%d",(short*)pDataDst);
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	492d      	ldr	r1, [pc, #180]	; (8002150 <_io_ScanWriteParamData+0x154>)
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f008 ffb5 	bl	800b00c <siscanf>
 80020a2:	6178      	str	r0, [r7, #20]
		break;
 80020a4:	e04d      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_unsigned_short:
	{
		ErrorCode = sscanf(str,"%d",(unsigned short*)pDataDst);
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4929      	ldr	r1, [pc, #164]	; (8002150 <_io_ScanWriteParamData+0x154>)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f008 ffae 	bl	800b00c <siscanf>
 80020b0:	6178      	str	r0, [r7, #20]
		break;
 80020b2:	e046      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_long:
	{
		ErrorCode = sscanf(str,"%d",(long*)pDataDst);
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4926      	ldr	r1, [pc, #152]	; (8002150 <_io_ScanWriteParamData+0x154>)
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f008 ffa7 	bl	800b00c <siscanf>
 80020be:	6178      	str	r0, [r7, #20]
		break;
 80020c0:	e03f      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_unsigned_long:
	{
		ErrorCode = sscanf(str,"%d",(unsigned long*)pDataDst);
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4922      	ldr	r1, [pc, #136]	; (8002150 <_io_ScanWriteParamData+0x154>)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f008 ffa0 	bl	800b00c <siscanf>
 80020cc:	6178      	str	r0, [r7, #20]
		break;
 80020ce:	e038      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_float:
	{
		ErrorCode = sscanf(str,"%f",(float*)pDataDst);
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4920      	ldr	r1, [pc, #128]	; (8002154 <_io_ScanWriteParamData+0x158>)
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f008 ff99 	bl	800b00c <siscanf>
 80020da:	6178      	str	r0, [r7, #20]
		break;
 80020dc:	e031      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_double:
	{
		ErrorCode = sscanf(str,"%f",(double*)pDataDst);
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	491c      	ldr	r1, [pc, #112]	; (8002154 <_io_ScanWriteParamData+0x158>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f008 ff92 	bl	800b00c <siscanf>
 80020e8:	6178      	str	r0, [r7, #20]
		break;
 80020ea:	e02a      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_int8_t:
	{
		ErrorCode = sscanf(str,"%d",(int8_t*)pDataDst);
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4918      	ldr	r1, [pc, #96]	; (8002150 <_io_ScanWriteParamData+0x154>)
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f008 ff8b 	bl	800b00c <siscanf>
 80020f6:	6178      	str	r0, [r7, #20]
		break;
 80020f8:	e023      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_int16_t:
	{
		ErrorCode = sscanf(str,"%d",(int16_t*)pDataDst);
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4914      	ldr	r1, [pc, #80]	; (8002150 <_io_ScanWriteParamData+0x154>)
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f008 ff84 	bl	800b00c <siscanf>
 8002104:	6178      	str	r0, [r7, #20]
		break;
 8002106:	e01c      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_int32_t:
	{
		ErrorCode = sscanf(str,"%d",(int32_t*)pDataDst);
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4911      	ldr	r1, [pc, #68]	; (8002150 <_io_ScanWriteParamData+0x154>)
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f008 ff7d 	bl	800b00c <siscanf>
 8002112:	6178      	str	r0, [r7, #20]
		break;
 8002114:	e015      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_uint8_t:
	{
		ErrorCode = sscanf(str,"%d",(uint8_t*)pDataDst);
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	490d      	ldr	r1, [pc, #52]	; (8002150 <_io_ScanWriteParamData+0x154>)
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f008 ff76 	bl	800b00c <siscanf>
 8002120:	6178      	str	r0, [r7, #20]
		break;
 8002122:	e00e      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_uint16_t:
	{
		ErrorCode = sscanf(str,"%d",(uint16_t*)pDataDst);
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	490a      	ldr	r1, [pc, #40]	; (8002150 <_io_ScanWriteParamData+0x154>)
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f008 ff6f 	bl	800b00c <siscanf>
 800212e:	6178      	str	r0, [r7, #20]
		break;
 8002130:	e007      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	case PARAMTYPE_uint32_t:
	{
		ErrorCode = sscanf(str,"%d",(uint32_t*)pDataDst);
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4906      	ldr	r1, [pc, #24]	; (8002150 <_io_ScanWriteParamData+0x154>)
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f008 ff68 	bl	800b00c <siscanf>
 800213c:	6178      	str	r0, [r7, #20]
		break;
 800213e:	e000      	b.n	8002142 <_io_ScanWriteParamData+0x146>
	}
	default:
		break;
 8002140:	bf00      	nop
	}
	return ErrorCode;
 8002142:	697b      	ldr	r3, [r7, #20]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	08010188 	.word	0x08010188
 8002150:	0801018c 	.word	0x0801018c
 8002154:	08010190 	.word	0x08010190

08002158 <io_CmdExecute>:
 *     1.Cmd:pointer of the found command
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_CmdExecute(COS_Cmd *Cmd)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	Cmd->CmdCallbackFunc(Cmd->ParamsContainer);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6892      	ldr	r2, [r2, #8]
 8002168:	4610      	mov	r0, r2
 800216a:	4798      	blx	r3
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_io_GetParamSizeByStr>:
 *     1.ParamStr:parameter string. e.g."int","float"
 * @retval: parameter type code, see "MACRO" part of c_communication.h
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint8_t _io_GetParamSizeByStr(char *ParamStr)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	uint8_t TypeCode;
	uint8_t Size;
	TypeCode = _io_GetParamType(ParamStr);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f80d 	bl	800219c <_io_GetParamType>
 8002182:	4603      	mov	r3, r0
 8002184:	73fb      	strb	r3, [r7, #15]
	Size = _io_GetParamSizeByTypeCode(TypeCode);
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f8c5 	bl	8002318 <_io_GetParamSizeByTypeCode>
 800218e:	4603      	mov	r3, r0
 8002190:	73bb      	strb	r3, [r7, #14]
	return Size;
 8002192:	7bbb      	ldrb	r3, [r7, #14]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <_io_GetParamType>:
 *     1.Str:parameter string. e.g."int","float"
 * @retval: parameter type code, see "MACRO" part of c_communication.h
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint8_t _io_GetParamType(char *Str)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	if(Str==NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <_io_GetParamType+0x12>
	{
		return 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e090      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"uint8_t"))
 80021ae:	494a      	ldr	r1, [pc, #296]	; (80022d8 <_io_GetParamType+0x13c>)
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7fe f80d 	bl	80001d0 <strcmp>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <_io_GetParamType+0x24>
	{
		return PARAMTYPE_uint8_t;
 80021bc:	230e      	movs	r3, #14
 80021be:	e087      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"uint16_t"))
 80021c0:	4946      	ldr	r1, [pc, #280]	; (80022dc <_io_GetParamType+0x140>)
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe f804 	bl	80001d0 <strcmp>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <_io_GetParamType+0x36>
	{
		return PARAMTYPE_uint16_t;
 80021ce:	230f      	movs	r3, #15
 80021d0:	e07e      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"uint32_t"))
 80021d2:	4943      	ldr	r1, [pc, #268]	; (80022e0 <_io_GetParamType+0x144>)
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fd fffb 	bl	80001d0 <strcmp>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <_io_GetParamType+0x48>
	{
		return PARAMTYPE_uint32_t;
 80021e0:	2310      	movs	r3, #16
 80021e2:	e075      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"float"))
 80021e4:	493f      	ldr	r1, [pc, #252]	; (80022e4 <_io_GetParamType+0x148>)
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7fd fff2 	bl	80001d0 <strcmp>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <_io_GetParamType+0x5a>
	{
		return PARAMTYPE_float;
 80021f2:	2309      	movs	r3, #9
 80021f4:	e06c      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"double"))
 80021f6:	493c      	ldr	r1, [pc, #240]	; (80022e8 <_io_GetParamType+0x14c>)
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7fd ffe9 	bl	80001d0 <strcmp>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <_io_GetParamType+0x6c>
	{
		return PARAMTYPE_double;
 8002204:	230a      	movs	r3, #10
 8002206:	e063      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"int8_t"))
 8002208:	4938      	ldr	r1, [pc, #224]	; (80022ec <_io_GetParamType+0x150>)
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fd ffe0 	bl	80001d0 <strcmp>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <_io_GetParamType+0x7e>
	{
		return PARAMTYPE_int8_t;
 8002216:	230b      	movs	r3, #11
 8002218:	e05a      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"int16_t"))
 800221a:	4935      	ldr	r1, [pc, #212]	; (80022f0 <_io_GetParamType+0x154>)
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7fd ffd7 	bl	80001d0 <strcmp>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <_io_GetParamType+0x90>
	{
		return PARAMTYPE_int16_t;
 8002228:	230c      	movs	r3, #12
 800222a:	e051      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"int32_t"))
 800222c:	4931      	ldr	r1, [pc, #196]	; (80022f4 <_io_GetParamType+0x158>)
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fd ffce 	bl	80001d0 <strcmp>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <_io_GetParamType+0xa2>
	{
		return PARAMTYPE_int32_t;
 800223a:	230d      	movs	r3, #13
 800223c:	e048      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"unsigned char"))
 800223e:	492e      	ldr	r1, [pc, #184]	; (80022f8 <_io_GetParamType+0x15c>)
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7fd ffc5 	bl	80001d0 <strcmp>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <_io_GetParamType+0xb4>
	{
		return PARAMTYPE_unsigned_char;
 800224c:	2302      	movs	r3, #2
 800224e:	e03f      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"char"))
 8002250:	492a      	ldr	r1, [pc, #168]	; (80022fc <_io_GetParamType+0x160>)
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fd ffbc 	bl	80001d0 <strcmp>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <_io_GetParamType+0xc6>
	{
		return PARAMTYPE_char;
 800225e:	2301      	movs	r3, #1
 8002260:	e036      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"unsigned int"))
 8002262:	4927      	ldr	r1, [pc, #156]	; (8002300 <_io_GetParamType+0x164>)
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7fd ffb3 	bl	80001d0 <strcmp>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <_io_GetParamType+0xd8>
	{
		return PARAMTYPE_unsigned_int;
 8002270:	2304      	movs	r3, #4
 8002272:	e02d      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"int"))
 8002274:	4923      	ldr	r1, [pc, #140]	; (8002304 <_io_GetParamType+0x168>)
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fd ffaa 	bl	80001d0 <strcmp>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <_io_GetParamType+0xea>
	{
		return PARAMTYPE_int;
 8002282:	2303      	movs	r3, #3
 8002284:	e024      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"unsigned short"))
 8002286:	4920      	ldr	r1, [pc, #128]	; (8002308 <_io_GetParamType+0x16c>)
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7fd ffa1 	bl	80001d0 <strcmp>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <_io_GetParamType+0xfc>
	{
		return PARAMTYPE_unsigned_short;
 8002294:	2306      	movs	r3, #6
 8002296:	e01b      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"short"))
 8002298:	491c      	ldr	r1, [pc, #112]	; (800230c <_io_GetParamType+0x170>)
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7fd ff98 	bl	80001d0 <strcmp>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <_io_GetParamType+0x10e>
	{
		return PARAMTYPE_short;
 80022a6:	2305      	movs	r3, #5
 80022a8:	e012      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"unsigned long"))
 80022aa:	4919      	ldr	r1, [pc, #100]	; (8002310 <_io_GetParamType+0x174>)
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fd ff8f 	bl	80001d0 <strcmp>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <_io_GetParamType+0x120>
	{
		return PARAMTYPE_unsigned_long;
 80022b8:	2308      	movs	r3, #8
 80022ba:	e009      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else if(!strcmp(Str,"long"))
 80022bc:	4915      	ldr	r1, [pc, #84]	; (8002314 <_io_GetParamType+0x178>)
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fd ff86 	bl	80001d0 <strcmp>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <_io_GetParamType+0x132>
	{
		return PARAMTYPE_long;
 80022ca:	2307      	movs	r3, #7
 80022cc:	e000      	b.n	80022d0 <_io_GetParamType+0x134>
	}
	else
	{
		return 0;
 80022ce:	2300      	movs	r3, #0
	}


}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	08010194 	.word	0x08010194
 80022dc:	0801019c 	.word	0x0801019c
 80022e0:	080101a8 	.word	0x080101a8
 80022e4:	080101b4 	.word	0x080101b4
 80022e8:	080101bc 	.word	0x080101bc
 80022ec:	080101c4 	.word	0x080101c4
 80022f0:	080101cc 	.word	0x080101cc
 80022f4:	080101d4 	.word	0x080101d4
 80022f8:	080101dc 	.word	0x080101dc
 80022fc:	080101ec 	.word	0x080101ec
 8002300:	080101f4 	.word	0x080101f4
 8002304:	08010204 	.word	0x08010204
 8002308:	08010208 	.word	0x08010208
 800230c:	08010218 	.word	0x08010218
 8002310:	08010220 	.word	0x08010220
 8002314:	08010230 	.word	0x08010230

08002318 <_io_GetParamSizeByTypeCode>:
 *     1.ParamType:parameter type code
 * @retval: size of parameter.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint8_t _io_GetParamSizeByTypeCode(uint8_t ParamType)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
	if(ParamType==0)
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <_io_GetParamSizeByTypeCode+0x14>
	{
		return 0;
 8002328:	2300      	movs	r3, #0
 800232a:	e050      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_uint8_t)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2b0e      	cmp	r3, #14
 8002330:	d101      	bne.n	8002336 <_io_GetParamSizeByTypeCode+0x1e>
	{
		return sizeof(uint8_t);
 8002332:	2301      	movs	r3, #1
 8002334:	e04b      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_uint16_t)
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d101      	bne.n	8002340 <_io_GetParamSizeByTypeCode+0x28>
	{
		return sizeof(uint16_t);
 800233c:	2302      	movs	r3, #2
 800233e:	e046      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_uint32_t)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	2b10      	cmp	r3, #16
 8002344:	d101      	bne.n	800234a <_io_GetParamSizeByTypeCode+0x32>
	{
		return sizeof(uint32_t);
 8002346:	2304      	movs	r3, #4
 8002348:	e041      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_float)
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b09      	cmp	r3, #9
 800234e:	d101      	bne.n	8002354 <_io_GetParamSizeByTypeCode+0x3c>
	{
		return sizeof(float);
 8002350:	2304      	movs	r3, #4
 8002352:	e03c      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_double)
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	2b0a      	cmp	r3, #10
 8002358:	d101      	bne.n	800235e <_io_GetParamSizeByTypeCode+0x46>
	{
		return sizeof(double);
 800235a:	2308      	movs	r3, #8
 800235c:	e037      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_int8_t)
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b0b      	cmp	r3, #11
 8002362:	d101      	bne.n	8002368 <_io_GetParamSizeByTypeCode+0x50>
	{
		return sizeof(int8_t);
 8002364:	2301      	movs	r3, #1
 8002366:	e032      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_int16_t)
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d101      	bne.n	8002372 <_io_GetParamSizeByTypeCode+0x5a>
	{
		return sizeof(int16_t);
 800236e:	2302      	movs	r3, #2
 8002370:	e02d      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_int32_t)
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	2b0d      	cmp	r3, #13
 8002376:	d101      	bne.n	800237c <_io_GetParamSizeByTypeCode+0x64>
	{
		return sizeof(int32_t);
 8002378:	2304      	movs	r3, #4
 800237a:	e028      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_unsigned_char)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d101      	bne.n	8002386 <_io_GetParamSizeByTypeCode+0x6e>
	{
		return sizeof(unsigned char);
 8002382:	2301      	movs	r3, #1
 8002384:	e023      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_char)
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <_io_GetParamSizeByTypeCode+0x78>
	{
		return sizeof(char);
 800238c:	2301      	movs	r3, #1
 800238e:	e01e      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_unsigned_int)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d101      	bne.n	800239a <_io_GetParamSizeByTypeCode+0x82>
	{
		return sizeof(unsigned int);
 8002396:	2304      	movs	r3, #4
 8002398:	e019      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_int)
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d101      	bne.n	80023a4 <_io_GetParamSizeByTypeCode+0x8c>
	{
		return sizeof(int);
 80023a0:	2304      	movs	r3, #4
 80023a2:	e014      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_unsigned_short)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d101      	bne.n	80023ae <_io_GetParamSizeByTypeCode+0x96>
	{
		return sizeof(unsigned short);
 80023aa:	2302      	movs	r3, #2
 80023ac:	e00f      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_short)
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d101      	bne.n	80023b8 <_io_GetParamSizeByTypeCode+0xa0>
	{
		return sizeof(short);
 80023b4:	2302      	movs	r3, #2
 80023b6:	e00a      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_unsigned_long)
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d101      	bne.n	80023c2 <_io_GetParamSizeByTypeCode+0xaa>
	{
		return sizeof(unsigned long);
 80023be:	2304      	movs	r3, #4
 80023c0:	e005      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else if(ParamType==PARAMTYPE_long)
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	2b07      	cmp	r3, #7
 80023c6:	d101      	bne.n	80023cc <_io_GetParamSizeByTypeCode+0xb4>
	{
		return sizeof(long);
 80023c8:	2304      	movs	r3, #4
 80023ca:	e000      	b.n	80023ce <_io_GetParamSizeByTypeCode+0xb6>
	}
	else
	{
		return 0;
 80023cc:	2300      	movs	r3, #0
	}

}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <cosioInit>:
 * @params:none
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void cosioInit()
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af06      	add	r7, sp, #24
	/* set all mount point as NULL */
	for(uint8_t i=0 ; i<6 ; i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	71fb      	strb	r3, [r7, #7]
 80023e6:	e007      	b.n	80023f8 <cosioInit+0x1c>
	{
		_iob[i] = NULL;
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	4a19      	ldr	r2, [pc, #100]	; (8002450 <cosioInit+0x74>)
 80023ec:	2100      	movs	r1, #0
 80023ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint8_t i=0 ; i<6 ; i++)
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	3301      	adds	r3, #1
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d9f4      	bls.n	80023e8 <cosioInit+0xc>
	}
	/* mount cosio to system io mount point and initialize io device */
	io_Init(&cosio, "cosio", cosiohuart, COS_InputBuffer, INPUT_BUFFER_SIZE*1024, COS_OutputBuffer1, OUTPUT_BUFFER1_SIZE*1024, COS_OutputBuffer2, OUTPUT_BUFFER2_SIZE*1024);
 80023fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002402:	9304      	str	r3, [sp, #16]
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <cosioInit+0x78>)
 8002406:	9303      	str	r3, [sp, #12]
 8002408:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <cosioInit+0x7c>)
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <cosioInit+0x80>)
 800241a:	4a11      	ldr	r2, [pc, #68]	; (8002460 <cosioInit+0x84>)
 800241c:	4911      	ldr	r1, [pc, #68]	; (8002464 <cosioInit+0x88>)
 800241e:	4812      	ldr	r0, [pc, #72]	; (8002468 <cosioInit+0x8c>)
 8002420:	f000 f842 	bl	80024a8 <io_Init>

	/* load system built-in applications */
	LoadApp(&cosio, BuiltinAppList, BUILT_IN_APP_AMOUNT);
 8002424:	2202      	movs	r2, #2
 8002426:	4911      	ldr	r1, [pc, #68]	; (800246c <cosioInit+0x90>)
 8002428:	480f      	ldr	r0, [pc, #60]	; (8002468 <cosioInit+0x8c>)
 800242a:	f7fe fdf5 	bl	8001018 <LoadApp>

	/* load car applications */
	LoadApp(&cosio, CarAppList,CARAPPAMOUNT);
 800242e:	2206      	movs	r2, #6
 8002430:	490f      	ldr	r1, [pc, #60]	; (8002470 <cosioInit+0x94>)
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <cosioInit+0x8c>)
 8002434:	f7fe fdf0 	bl	8001018 <LoadApp>
	_io_Transmit(&cosio, (uint8_t*)"console uart test\r\n", 19);
 8002438:	2213      	movs	r2, #19
 800243a:	490e      	ldr	r1, [pc, #56]	; (8002474 <cosioInit+0x98>)
 800243c:	480a      	ldr	r0, [pc, #40]	; (8002468 <cosioInit+0x8c>)
 800243e:	f000 fbf3 	bl	8002c28 <_io_Transmit>
	COS_printf("Console ready.\r\n");
 8002442:	480d      	ldr	r0, [pc, #52]	; (8002478 <cosioInit+0x9c>)
 8002444:	f000 f81a 	bl	800247c <COS_printf>

}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000060 	.word	0x20000060
 8002454:	20002fdc 	.word	0x20002fdc
 8002458:	200007dc 	.word	0x200007dc
 800245c:	200003dc 	.word	0x200003dc
 8002460:	20009d5c 	.word	0x20009d5c
 8002464:	08010238 	.word	0x08010238
 8002468:	200043dc 	.word	0x200043dc
 800246c:	20000000 	.word	0x20000000
 8002470:	20000018 	.word	0x20000018
 8002474:	08010240 	.word	0x08010240
 8002478:	08010254 	.word	0x08010254

0800247c <COS_printf>:
 *     2.(optional parameters):the value of format params in string 'fmt'.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void COS_printf(const char *fmt,...)
{
 800247c:	b40f      	push	{r0, r1, r2, r3}
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
	va_list ap;
	va_start(ap,fmt);
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	607b      	str	r3, [r7, #4]
	io_vprintf(&cosio,fmt,ap);
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6939      	ldr	r1, [r7, #16]
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <COS_printf+0x28>)
 8002490:	f000 fa1a 	bl	80028c8 <io_vprintf>
	va_end(ap);
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800249e:	b004      	add	sp, #16
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	200043dc 	.word	0x200043dc

080024a8 <io_Init>:
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/

void io_Init(COS_io *ioDevice, const char* Name, COS_uart huart, uint8_t *InputBuf, uint32_t InputBufLen, uint8_t *OutputBuf1, uint32_t OutputBuf1Len, uint8_t *OutputBuf2, uint32_t OutputBuf2Len)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
	COS_assert((InputBuf && InputBufLen),warning,"%s's input buffer is empty.",Name);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d004      	beq.n	80024c6 <io_Init+0x1e>
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <io_Init+0x1e>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <io_Init+0x20>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d109      	bne.n	80024e0 <io_Init+0x38>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <io_Init+0x1d8>)
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2304      	movs	r3, #4
 80024d6:	227f      	movs	r2, #127	; 0x7f
 80024d8:	496a      	ldr	r1, [pc, #424]	; (8002684 <io_Init+0x1dc>)
 80024da:	486b      	ldr	r0, [pc, #428]	; (8002688 <io_Init+0x1e0>)
 80024dc:	f001 f8ec 	bl	80036b8 <_Log_Write>
	COS_assert((OutputBuf1 && OutputBuf1Len),warning,"%s's output buffer1 is empty.",Name);
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <io_Init+0x48>
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <io_Init+0x48>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <io_Init+0x4a>
 80024f0:	2300      	movs	r3, #0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <io_Init+0x62>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	4b64      	ldr	r3, [pc, #400]	; (800268c <io_Init+0x1e4>)
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2304      	movs	r3, #4
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	4960      	ldr	r1, [pc, #384]	; (8002684 <io_Init+0x1dc>)
 8002504:	4860      	ldr	r0, [pc, #384]	; (8002688 <io_Init+0x1e0>)
 8002506:	f001 f8d7 	bl	80036b8 <_Log_Write>
	COS_assert((OutputBuf2 && OutputBuf2Len),warning,"%s's output buffer2 is empty.",Name);
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d004      	beq.n	800251a <io_Init+0x72>
 8002510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <io_Init+0x72>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <io_Init+0x74>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <io_Init+0x8c>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	4b5a      	ldr	r3, [pc, #360]	; (8002690 <io_Init+0x1e8>)
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2304      	movs	r3, #4
 800252a:	2281      	movs	r2, #129	; 0x81
 800252c:	4955      	ldr	r1, [pc, #340]	; (8002684 <io_Init+0x1dc>)
 800252e:	4856      	ldr	r0, [pc, #344]	; (8002688 <io_Init+0x1e0>)
 8002530:	f001 f8c2 	bl	80036b8 <_Log_Write>

	if(ioDevice==NULL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 809d 	beq.w	8002676 <io_Init+0x1ce>
		return ;

	/* mount io device on system */
	for(uint8_t i=0 ; i<6 ; i++)
 800253c:	2300      	movs	r3, #0
 800253e:	75fb      	strb	r3, [r7, #23]
 8002540:	e00e      	b.n	8002560 <io_Init+0xb8>
	{
		if(_iob[i]==NULL)
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	4a53      	ldr	r2, [pc, #332]	; (8002694 <io_Init+0x1ec>)
 8002546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <io_Init+0xb2>
		{
			_iob[i] = ioDevice;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	4950      	ldr	r1, [pc, #320]	; (8002694 <io_Init+0x1ec>)
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			break;
 8002558:	e005      	b.n	8002566 <io_Init+0xbe>
	for(uint8_t i=0 ; i<6 ; i++)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	3301      	adds	r3, #1
 800255e:	75fb      	strb	r3, [r7, #23]
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2b05      	cmp	r3, #5
 8002564:	d9ed      	bls.n	8002542 <io_Init+0x9a>
		}
	}

	if(Name == NULL)
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <io_Init+0xdc>
	{
		COS_Logf(info,"Init io device without name, now rename it 'nameless io device'");
 800256c:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <io_Init+0x1f0>)
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2306      	movs	r3, #6
 8002572:	2292      	movs	r2, #146	; 0x92
 8002574:	4943      	ldr	r1, [pc, #268]	; (8002684 <io_Init+0x1dc>)
 8002576:	4844      	ldr	r0, [pc, #272]	; (8002688 <io_Init+0x1e0>)
 8002578:	f001 f89e 	bl	80036b8 <_Log_Write>
		ioDevice->Name = "nameless io device";
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a47      	ldr	r2, [pc, #284]	; (800269c <io_Init+0x1f4>)
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e002      	b.n	800258a <io_Init+0xe2>
	}
	else
	{
		ioDevice->Name = Name;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	601a      	str	r2, [r3, #0]
	}
	ioDevice->huart = huart;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	605a      	str	r2, [r3, #4]

	/* input buffer init */
	if((InputBuf!=NULL) && (InputBufLen!=0))
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d018      	beq.n	80025c8 <io_Init+0x120>
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d015      	beq.n	80025c8 <io_Init+0x120>
	{
		ioDevice->InputBuf = InputBuf;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
		ioDevice->InputBufSize = InputBufLen;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a3a      	ldr	r2, [r7, #32]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
		memset(InputBuf,0,InputBufLen);
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	2100      	movs	r1, #0
 80025ac:	6838      	ldr	r0, [r7, #0]
 80025ae:	f007 fd76 	bl	800a09e <memset>

#if USE_HAL_LIB
		/* it's necessary to start receive interrupt when
		 * using HAL lib */
//		HAL_UART_Receive_IT(ioDevice->huart,&(ioDevice->RxTemp),1);
		__HAL_UART_ENABLE_IT(ioDevice->huart,UART_IT_RXNE);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 0220 	orr.w	r2, r2, #32
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	e005      	b.n	80025d4 <io_Init+0x12c>


	}
	else
	{
		ioDevice->InputBuf = NULL;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24
		ioDevice->InputBufSize = 0;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
	}
	ioDevice->InputHeadIndex = 0;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
	ioDevice->InputTailIndex = 0;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
	ioDevice->InputBufFull = 0;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* output buffer1 init */
	if((OutputBuf1!=NULL) && (OutputBuf1Len!=0))
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00e      	beq.n	800260c <io_Init+0x164>
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <io_Init+0x164>
	{
		ioDevice->OutputBuf[0] = OutputBuf1;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f8:	60da      	str	r2, [r3, #12]
		ioDevice->OutputBufSize[0] = OutputBuf1Len;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025fe:	615a      	str	r2, [r3, #20]
		memset(OutputBuf1,0,OutputBuf1Len);
 8002600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002602:	2100      	movs	r1, #0
 8002604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002606:	f007 fd4a 	bl	800a09e <memset>
 800260a:	e005      	b.n	8002618 <io_Init+0x170>
	}
	else
	{
		ioDevice->OutputBuf[0] = NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	60da      	str	r2, [r3, #12]
		ioDevice->OutputBufSize[0] = 0;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	615a      	str	r2, [r3, #20]
	}
	ioDevice->OutputBufPosition[0] = 0;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]


	/* output buffer2 init */
	if((OutputBuf2!=NULL) && (OutputBuf2Len!=0))
 800261e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00e      	beq.n	8002642 <io_Init+0x19a>
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <io_Init+0x19a>
	{
		ioDevice->OutputBuf[1] = OutputBuf2;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262e:	611a      	str	r2, [r3, #16]
		ioDevice->OutputBufSize[1] = OutputBuf2Len;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002634:	619a      	str	r2, [r3, #24]
		memset(OutputBuf2,0,OutputBuf2Len);
 8002636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002638:	2100      	movs	r1, #0
 800263a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800263c:	f007 fd2f 	bl	800a09e <memset>
 8002640:	e005      	b.n	800264e <io_Init+0x1a6>
	}
	else
	{
		ioDevice->OutputBuf[1] = NULL;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	611a      	str	r2, [r3, #16]
		ioDevice->OutputBufSize[1] = 0;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
	}
	ioDevice->OutputBufPosition[1] = 0;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]

	/* set current activated buffer as buffer 0 which is
	 * main output buffer */
	ioDevice->ActivatedOutBufIndex = 0;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	721a      	strb	r2, [r3, #8]

	/* io device doesn't transmit data at first */
	ioDevice->Outputing = 0;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	725a      	strb	r2, [r3, #9]

	/* clear command list */
	ioDevice->CmdList = NULL;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	639a      	str	r2, [r3, #56]	; 0x38

	/* clear io stream */
	ioDevice->PkgProcessor = NULL;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	63da      	str	r2, [r3, #60]	; 0x3c

	/* set io device to command mode as default */
	ioDevice->ReceiveMode = 0;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002674:	e000      	b.n	8002678 <io_Init+0x1d0>
		return ;
 8002676:	bf00      	nop


}
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	0801028c 	.word	0x0801028c
 8002684:	08010d18 	.word	0x08010d18
 8002688:	08010268 	.word	0x08010268
 800268c:	080102a8 	.word	0x080102a8
 8002690:	080102c8 	.word	0x080102c8
 8002694:	20000060 	.word	0x20000060
 8002698:	080102e8 	.word	0x080102e8
 800269c:	08010328 	.word	0x08010328

080026a0 <io_Process>:
 * @params:none
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_Process()
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
	for(uint8_t i=0 ; i<MAXIODEVICEAMOUNT; i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	e016      	b.n	80026da <io_Process+0x3a>
	{
		if(_iob[i]!=NULL)
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	4a0f      	ldr	r2, [pc, #60]	; (80026ec <io_Process+0x4c>)
 80026b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <io_Process+0x34>
		{
			io_OutputProcess(_iob[i]);
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	4a0c      	ldr	r2, [pc, #48]	; (80026ec <io_Process+0x4c>)
 80026bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 f853 	bl	800276c <io_OutputProcess>
			io_InputProcess(_iob[i]);
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	4a08      	ldr	r2, [pc, #32]	; (80026ec <io_Process+0x4c>)
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 f88f 	bl	80027f2 <io_InputProcess>
	for(uint8_t i=0 ; i<MAXIODEVICEAMOUNT; i++)
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	3301      	adds	r3, #1
 80026d8:	71fb      	strb	r3, [r7, #7]
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b05      	cmp	r3, #5
 80026de:	d9e5      	bls.n	80026ac <io_Process+0xc>
		}
	}
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000060 	.word	0x20000060

080026f0 <io_CommandMode>:
 *     1.ioDevice:pointer of io device
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_CommandMode(COS_io *ioDevice)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	ioDevice->ReceiveMode = COMMAND_MODE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	io_PkgProcessorDeinit(ioDevice);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fcbb 	bl	800307c <io_PkgProcessorDeinit>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <io_DMAHandler>:
 *     1.huart:pointer of uart instance.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_DMAHandler(COS_uart huart)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
	uint8_t i=0;
 8002718:	2300      	movs	r3, #0
 800271a:	73fb      	strb	r3, [r7, #15]
	for(i=0 ; i<MAXIODEVICEAMOUNT ; i++)
 800271c:	2300      	movs	r3, #0
 800271e:	73fb      	strb	r3, [r7, #15]
 8002720:	e018      	b.n	8002754 <io_DMAHandler+0x44>
	{
		if(_iob[i]==NULL)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	4a10      	ldr	r2, [pc, #64]	; (8002768 <io_DMAHandler+0x58>)
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00e      	beq.n	800274c <io_DMAHandler+0x3c>
			continue;
		else if(huart==_iob[i]->huart)
 800272e:	7bfb      	ldrb	r3, [r7, #15]
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <io_DMAHandler+0x58>)
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	d107      	bne.n	800274e <io_DMAHandler+0x3e>
		{
			_iob[i]->Outputing=0;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	4a09      	ldr	r2, [pc, #36]	; (8002768 <io_DMAHandler+0x58>)
 8002742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002746:	2200      	movs	r2, #0
 8002748:	725a      	strb	r2, [r3, #9]
 800274a:	e000      	b.n	800274e <io_DMAHandler+0x3e>
			continue;
 800274c:	bf00      	nop
	for(i=0 ; i<MAXIODEVICEAMOUNT ; i++)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	3301      	adds	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d9e3      	bls.n	8002722 <io_DMAHandler+0x12>
		}
	}
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	20000060 	.word	0x20000060

0800276c <io_OutputProcess>:
 *     1.ioDevice:pointer of io device.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_OutputProcess(COS_io *ioDevice)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	/* if io device is transmitting data, it won't transmit data again. */
	if(ioDevice->Outputing)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7a5b      	ldrb	r3, [r3, #9]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d136      	bne.n	80027ea <io_OutputProcess+0x7e>
	 * the io device start transmission.
	 * if current writable buffer is indeed empty, then check whether current
	 * buffer is secondary output buffer. if it's secondary buffer and main
	 * buffer is empty, current waritable buffer will be set to main buffer.
	 * That is dynamic main buffer. */
	if(!_io_ActivatedBufEmpty(ioDevice))
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fa3d 	bl	8002bfc <_io_ActivatedBufEmpty>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d124      	bne.n	80027d2 <io_OutputProcess+0x66>
	{
		/* set transmission flag as 1, which means the io device is transmitting */
		ioDevice->Outputing = 1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	725a      	strb	r2, [r3, #9]

		/* start transmission */
		_io_Transmit(ioDevice, ioDevice->OutputBuf[ioDevice->ActivatedOutBufIndex], ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex]);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7a1b      	ldrb	r3, [r3, #8]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	3302      	adds	r3, #2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7a1b      	ldrb	r3, [r3, #8]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	3306      	adds	r3, #6
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	461a      	mov	r2, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa3b 	bl	8002c28 <_io_Transmit>

		/* clear output buffer */
		ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex] = 0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	7a1b      	ldrb	r3, [r3, #8]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	3306      	adds	r3, #6
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4413      	add	r3, r2
 80027be:	2200      	movs	r2, #0
 80027c0:	605a      	str	r2, [r3, #4]

		/* set current writable buffer as another one */
		ioDevice->ActivatedOutBufIndex = 1 - ioDevice->ActivatedOutBufIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7a1b      	ldrb	r3, [r3, #8]
 80027c6:	f1c3 0301 	rsb	r3, r3, #1
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	721a      	strb	r2, [r3, #8]
 80027d0:	e00c      	b.n	80027ec <io_OutputProcess+0x80>
	}
	else
	{
		/* Current Activated buffer is secondary buffer and primary buffer is empty */
		if((ioDevice->ActivatedOutBufIndex == 1)&&(ioDevice->OutputBufPosition[0]==0))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7a1b      	ldrb	r3, [r3, #8]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d108      	bne.n	80027ec <io_OutputProcess+0x80>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <io_OutputProcess+0x80>
		{
			/* set current writable buffer as main buffer */
			ioDevice->ActivatedOutBufIndex = 0;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	721a      	strb	r2, [r3, #8]
 80027e8:	e000      	b.n	80027ec <io_OutputProcess+0x80>
		return ;
 80027ea:	bf00      	nop
		}
	}
}
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <io_InputProcess>:
 *     1.ioDevice:pointer of io device.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_InputProcess(COS_io *ioDevice)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b0c4      	sub	sp, #272	; 0x110
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002800:	6018      	str	r0, [r3, #0]
	if(io_InputBufEmpty(ioDevice))
 8002802:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002806:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	f000 fb5e 	bl	8002ecc <io_InputBufEmpty>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d151      	bne.n	80028ba <io_InputProcess+0xc8>
		return ;

	if(ioDevice->ReceiveMode==PACKAGE_MODE)
 8002816:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800281a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002824:	2b01      	cmp	r3, #1
 8002826:	d112      	bne.n	800284e <io_InputProcess+0x5c>
	{
		while(!io_InputBufEmpty(ioDevice))
 8002828:	e006      	b.n	8002838 <io_InputProcess+0x46>
		{
			io_PackageProcess(ioDevice);
 800282a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800282e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	f000 fc76 	bl	8003124 <io_PackageProcess>
		while(!io_InputBufEmpty(ioDevice))
 8002838:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800283c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	f000 fb43 	bl	8002ecc <io_InputBufEmpty>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ee      	beq.n	800282a <io_InputProcess+0x38>
 800284c:	e038      	b.n	80028c0 <io_InputProcess+0xce>
		}
	}
	else if(ioDevice->ReceiveMode==COMMAND_MODE)
 800284e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002852:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285c:	2b00      	cmp	r3, #0
 800285e:	d12e      	bne.n	80028be <io_InputProcess+0xcc>
	{
		char Cmd[256] = {0};
 8002860:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002864:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	3304      	adds	r3, #4
 800286e:	22fc      	movs	r2, #252	; 0xfc
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f007 fc13 	bl	800a09e <memset>
		uint32_t CmdLineLength = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

		/* io_GetLine() returns 0 when no command is got */
		CmdLineLength = io_GetLine(ioDevice, (uint8_t*)Cmd, 256);
 800287e:	f107 010c 	add.w	r1, r7, #12
 8002882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002886:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800288a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	f000 fa39 	bl	8002d06 <io_GetLine>
 8002894:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
		if(CmdLineLength!=0)
 8002898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00f      	beq.n	80028c0 <io_InputProcess+0xce>
		{
			io_CmdProcess(ioDevice->CmdList, Cmd);
 80028a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	f107 020c 	add.w	r2, r7, #12
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fa9a 	bl	8001dec <io_CmdProcess>
 80028b8:	e002      	b.n	80028c0 <io_InputProcess+0xce>
		return ;
 80028ba:	bf00      	nop
 80028bc:	e000      	b.n	80028c0 <io_InputProcess+0xce>
		}
	}
	else
	{
		return;
 80028be:	bf00      	nop
	}

}
 80028c0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <io_vprintf>:
 *     3.ap:parameter list of formatted string.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_vprintf(COS_io *ioDevice,const char *fmt, va_list ap)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
	uint8_t *DataDst = NULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	613b      	str	r3, [r7, #16]
	uint32_t OutBufSpareSpace = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

	if(ioDevice->OutputBuf[0]== NULL || ioDevice->OutputBuf[1]==NULL)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <io_vprintf+0x24>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d113      	bne.n	8002914 <io_vprintf+0x4c>
	{
		if(ioDevice != &cosio)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <io_vprintf+0xe4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d009      	beq.n	8002908 <io_vprintf+0x40>
		{
			COS_Logf(err,"write output buffer failed:io device '%s' has no output buffer, please check its output buffer.");
 80028f4:	4b2e      	ldr	r3, [pc, #184]	; (80029b0 <io_vprintf+0xe8>)
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2303      	movs	r3, #3
 80028fa:	f240 12ad 	movw	r2, #429	; 0x1ad
 80028fe:	492d      	ldr	r1, [pc, #180]	; (80029b4 <io_vprintf+0xec>)
 8002900:	482d      	ldr	r0, [pc, #180]	; (80029b8 <io_vprintf+0xf0>)
 8002902:	f000 fed9 	bl	80036b8 <_Log_Write>
		}
		else
		{
			_io_Transmit(ioDevice, (uint8_t*)"cosio print failed:has no output buffer.\r\n", 36);
		}
		return ;
 8002906:	e04d      	b.n	80029a4 <io_vprintf+0xdc>
			_io_Transmit(ioDevice, (uint8_t*)"cosio print failed:has no output buffer.\r\n", 36);
 8002908:	2224      	movs	r2, #36	; 0x24
 800290a:	492c      	ldr	r1, [pc, #176]	; (80029bc <io_vprintf+0xf4>)
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f98b 	bl	8002c28 <_io_Transmit>
		return ;
 8002912:	e047      	b.n	80029a4 <io_vprintf+0xdc>
	}

	/* get valid idle output buffer pointer */
	OutBufSpareSpace = _io_GetSpareOutBuf(ioDevice, &DataDst);
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	4619      	mov	r1, r3
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f922 	bl	8002b64 <_io_GetSpareOutBuf>
 8002920:	6178      	str	r0, [r7, #20]

	/* if there is no more space to write in */
	if(OutBufSpareSpace == 0)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <io_vprintf+0x74>
	{
		/* exit function and write nothing into output buffer */
		COS_Logf(err,"CarOS print failed:output buffer is full.");
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <io_vprintf+0xf8>)
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2303      	movs	r3, #3
 800292e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8002932:	4920      	ldr	r1, [pc, #128]	; (80029b4 <io_vprintf+0xec>)
 8002934:	4820      	ldr	r0, [pc, #128]	; (80029b8 <io_vprintf+0xf0>)
 8002936:	f000 febf 	bl	80036b8 <_Log_Write>
		return ;
 800293a:	e033      	b.n	80029a4 <io_vprintf+0xdc>
	}

	/* write formatted string to destination buffer */
	vsnprintf((char*)DataDst,OutBufSpareSpace,fmt,ap);
 800293c:	6938      	ldr	r0, [r7, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	6979      	ldr	r1, [r7, #20]
 8002944:	f009 fb14 	bl	800bf70 <vsniprintf>
	ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex] +=
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	7a1b      	ldrb	r3, [r3, #8]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	3306      	adds	r3, #6
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	685c      	ldr	r4, [r3, #4]
			strlen((char*)(ioDevice->OutputBuf[ioDevice->ActivatedOutBufIndex] + ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex]));
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	7a1b      	ldrb	r3, [r3, #8]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	3302      	adds	r3, #2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	7a1b      	ldrb	r3, [r3, #8]
 8002968:	68f9      	ldr	r1, [r7, #12]
 800296a:	3306      	adds	r3, #6
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	4413      	add	r3, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fc35 	bl	80001e4 <strlen>
 800297a:	4602      	mov	r2, r0
	ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex] +=
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	7a1b      	ldrb	r3, [r3, #8]
 8002980:	4422      	add	r2, r4
 8002982:	68f9      	ldr	r1, [r7, #12]
 8002984:	3306      	adds	r3, #6
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	605a      	str	r2, [r3, #4]

	/* if activated buffer is full, the data in current
	 * activated buffer must be sent right now */
	if(_io_GetSpareOutBuf(ioDevice, &DataDst)==1)
 800298c:	f107 0310 	add.w	r3, r7, #16
 8002990:	4619      	mov	r1, r3
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 f8e6 	bl	8002b64 <_io_GetSpareOutBuf>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <io_vprintf+0xdc>
	{
		io_OutputProcess(ioDevice);
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fee4 	bl	800276c <io_OutputProcess>
	}
}
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd90      	pop	{r4, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200043dc 	.word	0x200043dc
 80029b0:	0801033c 	.word	0x0801033c
 80029b4:	08010d20 	.word	0x08010d20
 80029b8:	08010268 	.word	0x08010268
 80029bc:	0801039c 	.word	0x0801039c
 80029c0:	080103c8 	.word	0x080103c8

080029c4 <io_UartRxIntHandler>:
 *     1.huart:pointer of uart instance, varing from platform to platform.
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_UartRxIntHandler(COS_uart huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
#if USE_HAL_LIB
	uint8_t i=0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]
	for(i=0 ; i<MAXIODEVICEAMOUNT ; i++)
 80029d0:	2300      	movs	r3, #0
 80029d2:	73fb      	strb	r3, [r7, #15]
 80029d4:	e022      	b.n	8002a1c <io_UartRxIntHandler+0x58>
	{
		if( _iob[i]!=NULL && huart == _iob[i]->huart )
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <io_UartRxIntHandler+0x78>)
 80029da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d019      	beq.n	8002a16 <io_UartRxIntHandler+0x52>
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <io_UartRxIntHandler+0x78>)
 80029e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d111      	bne.n	8002a16 <io_UartRxIntHandler+0x52>
		{
			if(huart->Instance->SR & 0x00000020)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0320 	and.w	r3, r3, #32
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <io_UartRxIntHandler+0x52>
			{
				io_InputBufWrite(_iob[i],(uint8_t*)&huart->Instance->DR,1);
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	4a0e      	ldr	r2, [pc, #56]	; (8002a3c <io_UartRxIntHandler+0x78>)
 8002a04:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4619      	mov	r1, r3
 8002a12:	f000 f91f 	bl	8002c54 <io_InputBufWrite>
	for(i=0 ; i<MAXIODEVICEAMOUNT ; i++)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d9d9      	bls.n	80029d6 <io_UartRxIntHandler+0x12>
			}
		}
	}
//	HAL_UART_Receive_IT(_iob[i]->huart,&(_iob[i]->RxTemp),1);
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0220 	orr.w	r2, r2, #32
 8002a30:	60da      	str	r2, [r3, #12]
#elif USE_FW_LIB

#elif USE_MSP432

#endif
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000060 	.word	0x20000060

08002a40 <io_SendData>:
 *     3.Length:length of source data.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_SendData(COS_io *ioDevice, void *pData, uint32_t Length)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
	uint8_t *DataDst = NULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
	uint32_t OutBufSpareSpace = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
	uint32_t DataSentLen = 0;       // length of data was sent already.
 8002a54:	2300      	movs	r3, #0
 8002a56:	61bb      	str	r3, [r7, #24]

	if(ioDevice->OutputBuf[0]== NULL || ioDevice->OutputBuf[1]==NULL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <io_SendData+0x28>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d113      	bne.n	8002a90 <io_SendData+0x50>
	{
		if(ioDevice != &cosio)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a38      	ldr	r2, [pc, #224]	; (8002b4c <io_SendData+0x10c>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d009      	beq.n	8002a84 <io_SendData+0x44>
		{
			COS_Logf(err,"write output buffer failed:io device '%s' has no output buffer, please check its output buffer.");
 8002a70:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <io_SendData+0x110>)
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2303      	movs	r3, #3
 8002a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7a:	4936      	ldr	r1, [pc, #216]	; (8002b54 <io_SendData+0x114>)
 8002a7c:	4836      	ldr	r0, [pc, #216]	; (8002b58 <io_SendData+0x118>)
 8002a7e:	f000 fe1b 	bl	80036b8 <_Log_Write>
		}
		else
		{
			_io_Transmit(ioDevice, (uint8_t*)"print failed:has no output buffer.\r\n", 36);
		}
		return ;
 8002a82:	e060      	b.n	8002b46 <io_SendData+0x106>
			_io_Transmit(ioDevice, (uint8_t*)"print failed:has no output buffer.\r\n", 36);
 8002a84:	2224      	movs	r2, #36	; 0x24
 8002a86:	4935      	ldr	r1, [pc, #212]	; (8002b5c <io_SendData+0x11c>)
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f8cd 	bl	8002c28 <_io_Transmit>
		return ;
 8002a8e:	e05a      	b.n	8002b46 <io_SendData+0x106>
	}
	/* get valid idle output buffer pointer */
	OutBufSpareSpace = _io_GetSpareOutBuf(ioDevice, &DataDst);
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	4619      	mov	r1, r3
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 f864 	bl	8002b64 <_io_GetSpareOutBuf>
 8002a9c:	61f8      	str	r0, [r7, #28]

	/* if there is no more space to write in */
	if(OutBufSpareSpace == 0)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <io_SendData+0x78>
	{
		/* exit function and write nothing into output buffer */
		COS_Logf(err,"CarOS print failed:output buffer is full.");
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <io_SendData+0x120>)
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f240 220f 	movw	r2, #527	; 0x20f
 8002aae:	4929      	ldr	r1, [pc, #164]	; (8002b54 <io_SendData+0x114>)
 8002ab0:	4829      	ldr	r0, [pc, #164]	; (8002b58 <io_SendData+0x118>)
 8002ab2:	f000 fe01 	bl	80036b8 <_Log_Write>
		return ;
 8002ab6:	e046      	b.n	8002b46 <io_SendData+0x106>
	}

	if(Length>OutBufSpareSpace)
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d92b      	bls.n	8002b18 <io_SendData+0xd8>
	{
		memcpy(DataDst,pData,OutBufSpareSpace);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f007 fadb 	bl	800a082 <memcpy>
		io_OutputProcess(ioDevice);
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f7ff fe4d 	bl	800276c <io_OutputProcess>
		DataSentLen = OutBufSpareSpace;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	61bb      	str	r3, [r7, #24]
		OutBufSpareSpace = _io_GetSpareOutBuf(ioDevice, &DataDst);
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4619      	mov	r1, r3
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 f841 	bl	8002b64 <_io_GetSpareOutBuf>
 8002ae2:	61f8      	str	r0, [r7, #28]
		memcpy(DataDst,pData + DataSentLen,OutBufSpareSpace);
 8002ae4:	6978      	ldr	r0, [r7, #20]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	4619      	mov	r1, r3
 8002af0:	f007 fac7 	bl	800a082 <memcpy>
		ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex]+=OutBufSpareSpace;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	7a1b      	ldrb	r3, [r3, #8]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	3306      	adds	r3, #6
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	7a1b      	ldrb	r3, [r3, #8]
 8002b06:	4618      	mov	r0, r3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	441a      	add	r2, r3
 8002b0c:	68f9      	ldr	r1, [r7, #12]
 8002b0e:	1d83      	adds	r3, r0, #6
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	e016      	b.n	8002b46 <io_SendData+0x106>
	}
	else
	{
		memcpy(DataDst,pData,Length);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f007 faaf 	bl	800a082 <memcpy>
		ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex]+=Length;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	7a1b      	ldrb	r3, [r3, #8]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	3306      	adds	r3, #6
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	7a1b      	ldrb	r3, [r3, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	441a      	add	r2, r3
 8002b3c:	68f9      	ldr	r1, [r7, #12]
 8002b3e:	1d83      	adds	r3, r0, #6
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	605a      	str	r2, [r3, #4]
	}

}
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200043dc 	.word	0x200043dc
 8002b50:	0801033c 	.word	0x0801033c
 8002b54:	08010d2c 	.word	0x08010d2c
 8002b58:	08010268 	.word	0x08010268
 8002b5c:	080103f4 	.word	0x080103f4
 8002b60:	080103c8 	.word	0x080103c8

08002b64 <_io_GetSpareOutBuf>:
 *     2.pDataDst:the address of pointer of spare buffer.
 * @retval: the spare space size of current activated output buffer. unit:byte
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint32_t _io_GetSpareOutBuf(COS_io *ioDevice, uint8_t **pDataDst)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
	if(ioDevice->OutputBuf[0]==NULL || ioDevice->OutputBuf[1]==NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <_io_GetSpareOutBuf+0x1a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <_io_GetSpareOutBuf+0x1e>
	{
		return 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e031      	b.n	8002be6 <_io_GetSpareOutBuf+0x82>
	}

	/* since 'ActivatedOutBufIndex' can only be 0 or 1, the check step
	 * guarantees io device runs correctly. */
	if(ioDevice->ActivatedOutBufIndex <2)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	7a1b      	ldrb	r3, [r3, #8]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d820      	bhi.n	8002bcc <_io_GetSpareOutBuf+0x68>
	{
		/* the address of first byte of spare space is buffer start address plus  */
		*pDataDst = (ioDevice->OutputBuf[ioDevice->ActivatedOutBufIndex] + ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex]);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	7a1b      	ldrb	r3, [r3, #8]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	3302      	adds	r3, #2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7a1b      	ldrb	r3, [r3, #8]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	3306      	adds	r3, #6
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	441a      	add	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	601a      	str	r2, [r3, #0]
		return (ioDevice->OutputBufSize[ioDevice->ActivatedOutBufIndex] - ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex]);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7a1b      	ldrb	r3, [r3, #8]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7a1b      	ldrb	r3, [r3, #8]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	3306      	adds	r3, #6
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	e00c      	b.n	8002be6 <_io_GetSpareOutBuf+0x82>
	}
	else
	{
		COS_Logf(info,"can't get spare output buffer, io device '%s' has wrong \"ActivatedOutBufIndex\".",ioDevice->Name);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	4b07      	ldr	r3, [pc, #28]	; (8002bf0 <_io_GetSpareOutBuf+0x8c>)
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	2306      	movs	r3, #6
 8002bd8:	f240 223f 	movw	r2, #575	; 0x23f
 8002bdc:	4905      	ldr	r1, [pc, #20]	; (8002bf4 <_io_GetSpareOutBuf+0x90>)
 8002bde:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <_io_GetSpareOutBuf+0x94>)
 8002be0:	f000 fd6a 	bl	80036b8 <_Log_Write>
		return 0;
 8002be4:	2300      	movs	r3, #0
	}
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	0801041c 	.word	0x0801041c
 8002bf4:	08010d38 	.word	0x08010d38
 8002bf8:	08010268 	.word	0x08010268

08002bfc <_io_ActivatedBufEmpty>:
 *     1.ioDevice:pointer of io device.
 * @retval: 1 if empty, 0 if not empty.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint8_t _io_ActivatedBufEmpty(COS_io *ioDevice)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	return (ioDevice->OutputBufPosition[ioDevice->ActivatedOutBufIndex]==0);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7a1b      	ldrb	r3, [r3, #8]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	3306      	adds	r3, #6
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <_io_Transmit>:
 *     3.Length:length of data to transmit.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void _io_Transmit(COS_io *ioDevice, uint8_t *pData, uint32_t Length)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
#if	USE_HAL_LIB
#if USE_USART_DMA
	HAL_UART_Transmit_DMA(ioDevice->huart, pData, Length);
#else
	HAL_UART_Transmit(ioDevice->huart, pData, Length, 0xffff);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6858      	ldr	r0, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	f004 fe10 	bl	8007866 <HAL_UART_Transmit>
	ioDevice->Outputing=0;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	725a      	strb	r2, [r3, #9]
#elif USE_FW_LIB

#elif USE_MSP432

#endif
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <io_InputBufWrite>:
 *     3.Length:data length.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_InputBufWrite(COS_io *ioDevice, uint8_t *pData, uint32_t Length)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
	uint32_t RestDataLen = Length;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	617b      	str	r3, [r7, #20]
	uint32_t DataIndex = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	613b      	str	r3, [r7, #16]
	/* if circular buffer is full, it won't be written any data */
	if(ioDevice->InputBufFull)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d122      	bne.n	8002cb8 <io_InputBufWrite+0x64>
		return ;
	else if(ioDevice->InputBuf == NULL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11a      	bne.n	8002cb0 <io_InputBufWrite+0x5c>
	{
		COS_Logf(err,"failed to write io device '%s' :No input buffer.",ioDevice->Name);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	9301      	str	r3, [sp, #4]
 8002c80:	4b0f      	ldr	r3, [pc, #60]	; (8002cc0 <io_InputBufWrite+0x6c>)
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2303      	movs	r3, #3
 8002c86:	f240 2283 	movw	r2, #643	; 0x283
 8002c8a:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <io_InputBufWrite+0x70>)
 8002c8c:	480e      	ldr	r0, [pc, #56]	; (8002cc8 <io_InputBufWrite+0x74>)
 8002c8e:	f000 fd13 	bl	80036b8 <_Log_Write>
		return;
 8002c92:	e012      	b.n	8002cba <io_InputBufWrite+0x66>


	/* Write data byte by byte */
	while(RestDataLen)
	{
		_io_InputBufWriteByte(ioDevice, *(pData + DataIndex));
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f814 	bl	8002ccc <_io_InputBufWriteByte>
		RestDataLen--;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
		DataIndex++;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	3301      	adds	r3, #1
 8002cae:	613b      	str	r3, [r7, #16]
	while(RestDataLen)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ee      	bne.n	8002c94 <io_InputBufWrite+0x40>
 8002cb6:	e000      	b.n	8002cba <io_InputBufWrite+0x66>
		return ;
 8002cb8:	bf00      	nop
	}
}
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	0801046c 	.word	0x0801046c
 8002cc4:	08010d4c 	.word	0x08010d4c
 8002cc8:	08010268 	.word	0x08010268

08002ccc <_io_InputBufWriteByte>:
 *     2.Data:raw data.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void _io_InputBufWriteByte(COS_io *ioDevice, uint8_t Data)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
	if(ioDevice->ReceiveMode==COMMAND_MODE && Data==0)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <_io_InputBufWriteByte+0x1c>
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <_io_InputBufWriteByte+0x32>
		return ;

	/* load one byte data and move the pointer of circular buffer */
	*(ioDevice->InputBuf + ioDevice->InputHeadIndex) = Data;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	4413      	add	r3, r2
 8002cf2:	78fa      	ldrb	r2, [r7, #3]
 8002cf4:	701a      	strb	r2, [r3, #0]
	_io_InputBufAdvancePointer(ioDevice);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f944 	bl	8002f84 <_io_InputBufAdvancePointer>
 8002cfc:	e000      	b.n	8002d00 <_io_InputBufWriteByte+0x34>
		return ;
 8002cfe:	bf00      	nop
}
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <io_GetLine>:
 *     3.DstLength:the capacity of destination.
 * @retval: actual length of string that be written to destination.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint32_t io_GetLine(COS_io *ioDevice, uint8_t *pDataDst, uint32_t DstLength)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b088      	sub	sp, #32
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
	uint32_t DataLength = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
	uint32_t InputDataIndex = ioDevice->InputTailIndex;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	61bb      	str	r3, [r7, #24]

	if(io_InputBufEmpty(ioDevice))
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f8d5 	bl	8002ecc <io_InputBufEmpty>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00e      	beq.n	8002d46 <io_GetLine+0x40>
	{
		return 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	e03f      	b.n	8002dac <io_GetLine+0xa6>
	}
	/* line end signal is found or buffer end */
	while(ioDevice->InputBuf[InputDataIndex]!='\n' && InputDataIndex != ioDevice->InputHeadIndex)
	{
		DataLength++;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
		InputDataIndex = (InputDataIndex + 1) % (ioDevice->InputBufSize);
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	3301      	adds	r3, #1
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d3e:	fb01 f202 	mul.w	r2, r1, r2
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
	while(ioDevice->InputBuf[InputDataIndex]!='\n' && InputDataIndex != ioDevice->InputHeadIndex)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b0a      	cmp	r3, #10
 8002d52:	d004      	beq.n	8002d5e <io_GetLine+0x58>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d1e6      	bne.n	8002d2c <io_GetLine+0x26>
	}

	/* if read the end of buffer */
	if(InputDataIndex == ioDevice->InputHeadIndex)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d104      	bne.n	8002d72 <io_GetLine+0x6c>
	{
		*pDataDst = 0;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
		return 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e01c      	b.n	8002dac <io_GetLine+0xa6>
	}
	else // '\n' is found
	{
		uint32_t RealDataLen;
		if(DataLength>DstLength)
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d90e      	bls.n	8002d98 <io_GetLine+0x92>
		{
			/* write part of original string to destination */
			RealDataLen = io_GetData(ioDevice,pDataDst,DstLength);
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f818 	bl	8002db4 <io_GetData>
 8002d84:	6178      	str	r0, [r7, #20]

			/* remove rest of original data and '\n' */
			io_InputBufRemove(ioDevice,DataLength-DstLength+1);
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	4619      	mov	r1, r3
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f86a 	bl	8002e6a <io_InputBufRemove>
 8002d96:	e008      	b.n	8002daa <io_GetLine+0xa4>
		}
		else
		{
			/* write a line to destination */
			RealDataLen = io_GetData(ioDevice,pDataDst,DataLength);
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f809 	bl	8002db4 <io_GetData>
 8002da2:	6178      	str	r0, [r7, #20]

			/* remove last '\n' */
			io_InputBufRemoveByte(ioDevice);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f87b 	bl	8002ea0 <io_InputBufRemoveByte>
		}

		return RealDataLen;
 8002daa:	697b      	ldr	r3, [r7, #20]
	}
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <io_GetData>:
 *     3.Length:The length of the data to be got.
 * @retval: actual obtained data length.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint32_t io_GetData(COS_io *ioDevice, uint8_t *pDataDst, uint32_t Length)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
	uint32_t RestDataLen = Length;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	617b      	str	r3, [r7, #20]
	uint32_t DataIndex = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]

	/* if this io device doesn't have input device, operation of getting data
	 * is not allowed. */
	if(ioDevice->InputBuf == NULL)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11d      	bne.n	8002e0c <io_GetData+0x58>
	{
		COS_Logf(err,"can't get data from io device, '%s' has no input buffer.",ioDevice->Name);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	4b12      	ldr	r3, [pc, #72]	; (8002e20 <io_GetData+0x6c>)
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2303      	movs	r3, #3
 8002ddc:	f44f 723e 	mov.w	r2, #760	; 0x2f8
 8002de0:	4910      	ldr	r1, [pc, #64]	; (8002e24 <io_GetData+0x70>)
 8002de2:	4811      	ldr	r0, [pc, #68]	; (8002e28 <io_GetData+0x74>)
 8002de4:	f000 fc68 	bl	80036b8 <_Log_Write>
		return 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	e015      	b.n	8002e18 <io_GetData+0x64>
	}

	/* read data byte by byte */
	while(RestDataLen)
	{
		if(!_io_GetByte(ioDevice,pDataDst+DataIndex))
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4413      	add	r3, r2
 8002df2:	4619      	mov	r1, r3
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f819 	bl	8002e2c <_io_GetByte>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d009      	beq.n	8002e14 <io_GetData+0x60>
		{
			break;
		}
		RestDataLen--;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
		DataIndex++;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
	while(RestDataLen)
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ec      	bne.n	8002dec <io_GetData+0x38>
 8002e12:	e000      	b.n	8002e16 <io_GetData+0x62>
			break;
 8002e14:	bf00      	nop
	}
	return DataIndex;
 8002e16:	693b      	ldr	r3, [r7, #16]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	080104a0 	.word	0x080104a0
 8002e24:	08010d60 	.word	0x08010d60
 8002e28:	08010268 	.word	0x08010268

08002e2c <_io_GetByte>:
 *     2.pDataDst:pointer of data destination.
 * @retval: 1 if read successfully, 0 if read error.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint8_t _io_GetByte(COS_io *ioDevice, uint8_t *pDataDst)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	uint8_t Error = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
	if(!io_InputBufEmpty(ioDevice))
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f846 	bl	8002ecc <io_InputBufEmpty>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10c      	bne.n	8002e60 <_io_GetByte+0x34>
	{
		*pDataDst = ioDevice->InputBuf[ioDevice->InputTailIndex];
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	4413      	add	r3, r2
 8002e50:	781a      	ldrb	r2, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	701a      	strb	r2, [r3, #0]

		/* no need to remove the data, just retreat pointer is OK */
		_io_InputBufRetreatPointer(ioDevice);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f87a 	bl	8002f50 <_io_InputBufRetreatPointer>

		Error = 1;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
	}
	return Error;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <io_InputBufRemove>:
 *     2.Length:length of data to be removed.
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_InputBufRemove(COS_io *ioDevice, uint32_t Length)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
	for(uint8_t i=0 ; i<Length ; i++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	e008      	b.n	8002e8c <io_InputBufRemove+0x22>
	{
		if(io_InputBufRemoveByte(ioDevice)==0)
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f810 	bl	8002ea0 <io_InputBufRemoveByte>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <io_InputBufRemove+0x2c>
	for(uint8_t i=0 ; i<Length ; i++)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d8f2      	bhi.n	8002e7a <io_InputBufRemove+0x10>
		{
			break;
		}
	}
}
 8002e94:	e000      	b.n	8002e98 <io_InputBufRemove+0x2e>
			break;
 8002e96:	bf00      	nop
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <io_InputBufRemoveByte>:
 *     1.ioDevice:pointer of io device.
 * @retval: 1 if remove successfully, 0 if remove fail.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint8_t io_InputBufRemoveByte(COS_io *ioDevice)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	uint8_t Error = 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73fb      	strb	r3, [r7, #15]
	if(!io_InputBufEmpty(ioDevice))
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f80d 	bl	8002ecc <io_InputBufEmpty>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d104      	bne.n	8002ec2 <io_InputBufRemoveByte+0x22>
	{
		_io_InputBufRetreatPointer(ioDevice);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f849 	bl	8002f50 <_io_InputBufRetreatPointer>
		Error = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
	}
	return Error;
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <io_InputBufEmpty>:
 *     1.ioDevice:pointer of io device.
 * @retval: 1 if empty, 0 if not empty.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint8_t io_InputBufEmpty(COS_io *ioDevice)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	return (!ioDevice->InputBufFull && (ioDevice->InputHeadIndex == ioDevice->InputTailIndex));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <io_InputBufEmpty+0x22>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d101      	bne.n	8002eee <io_InputBufEmpty+0x22>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <io_InputBufEmpty+0x24>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <io_InputBufGetSize>:
 *     1.ioDevice:pointer of io device.
 * @retval: the current occupied space size.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint32_t io_InputBufGetSize(COS_io *ioDevice)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
	int32_t Size = ioDevice->InputBufSize;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	60fb      	str	r3, [r7, #12]
	if(!(ioDevice->InputBufFull))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d115      	bne.n	8002f42 <io_InputBufGetSize+0x44>
	{
		if(ioDevice->InputHeadIndex >= ioDevice->InputTailIndex)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d306      	bcc.n	8002f30 <io_InputBufGetSize+0x32>
		{
			Size = ioDevice->InputHeadIndex - ioDevice->InputTailIndex;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	e008      	b.n	8002f42 <io_InputBufGetSize+0x44>
		}
		else
		{
			Size = ioDevice->InputBufSize - ioDevice->InputTailIndex + ioDevice->InputHeadIndex;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	4413      	add	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]
		}
	}
	return Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_io_InputBufRetreatPointer>:
 *     1.ioDevice:pointer of io device.
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
static void _io_InputBufRetreatPointer(COS_io *ioDevice)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	ioDevice->InputBufFull = 0;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	ioDevice->InputTailIndex = (ioDevice->InputTailIndex + 1) % ioDevice->InputBufSize;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	3301      	adds	r3, #1
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f6e:	fb01 f202 	mul.w	r2, r1, r2
 8002f72:	1a9a      	subs	r2, r3, r2
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <_io_InputBufAdvancePointer>:
 *     1.ioDevice:pointer of io device.
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
static void _io_InputBufAdvancePointer(COS_io *ioDevice)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
	if(!ioDevice->InputBufFull)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d118      	bne.n	8002fc8 <_io_InputBufAdvancePointer+0x44>
	{
		ioDevice->InputHeadIndex = (ioDevice->InputHeadIndex + 1) % ioDevice->InputBufSize;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fa4:	fb01 f202 	mul.w	r2, r1, r2
 8002fa8:	1a9a      	subs	r2, r3, r2
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	62da      	str	r2, [r3, #44]	; 0x2c
		ioDevice->InputBufFull = (ioDevice->InputHeadIndex == ioDevice->InputTailIndex);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	bf0c      	ite	eq
 8002fba:	2301      	moveq	r3, #1
 8002fbc:	2300      	movne	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <io_PackageMode>:
 *     3.CallbackFunc:pointer of callback funtion that process the received data package.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void io_PackageMode(COS_io *ioDevice, uint8_t FormatEnable, uint8_t RawDataSize, void *CallbackFunc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	72fb      	strb	r3, [r7, #11]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	72bb      	strb	r3, [r7, #10]
	COS_PkgPrc *NewPkgPrc = (COS_PkgPrc*)cos_malloc(sizeof(COS_PkgPrc));
 8002fe6:	2014      	movs	r0, #20
 8002fe8:	f000 fd6e 	bl	8003ac8 <cos_malloc>
 8002fec:	6178      	str	r0, [r7, #20]
	uint8_t *DataDst = NULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]

	if(NewPkgPrc==NULL)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d108      	bne.n	800300a <io_PackageMode+0x36>
	{
		COS_Logf(err,"start package mode failed:memory not enough.");
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	; (800306c <io_PackageMode+0x98>)
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	2243      	movs	r2, #67	; 0x43
 8003000:	491b      	ldr	r1, [pc, #108]	; (8003070 <io_PackageMode+0x9c>)
 8003002:	481c      	ldr	r0, [pc, #112]	; (8003074 <io_PackageMode+0xa0>)
 8003004:	f000 fb58 	bl	80036b8 <_Log_Write>
		return;
 8003008:	e02d      	b.n	8003066 <io_PackageMode+0x92>
	}
	ioDevice->PkgProcessor = NewPkgPrc;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	63da      	str	r2, [r3, #60]	; 0x3c

	DataDst = (uint8_t*)cos_malloc(RawDataSize);
 8003010:	7abb      	ldrb	r3, [r7, #10]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fd58 	bl	8003ac8 <cos_malloc>
 8003018:	6138      	str	r0, [r7, #16]

	if(DataDst==NULL)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10b      	bne.n	8003038 <io_PackageMode+0x64>
	{
		COS_Logf(err,"start package mode failed:memory not enough.");
 8003020:	4b12      	ldr	r3, [pc, #72]	; (800306c <io_PackageMode+0x98>)
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2303      	movs	r3, #3
 8003026:	224c      	movs	r2, #76	; 0x4c
 8003028:	4911      	ldr	r1, [pc, #68]	; (8003070 <io_PackageMode+0x9c>)
 800302a:	4812      	ldr	r0, [pc, #72]	; (8003074 <io_PackageMode+0xa0>)
 800302c:	f000 fb44 	bl	80036b8 <_Log_Write>
		cos_free(NewPkgPrc);
 8003030:	6978      	ldr	r0, [r7, #20]
 8003032:	f000 fd33 	bl	8003a9c <cos_free>
		return;
 8003036:	e016      	b.n	8003066 <io_PackageMode+0x92>
	}

	NewPkgPrc->FormatEnable = FormatEnable;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	7afa      	ldrb	r2, [r7, #11]
 800303c:	701a      	strb	r2, [r3, #0]
	NewPkgPrc->DataDst = DataDst;
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	60da      	str	r2, [r3, #12]
	NewPkgPrc->RawDataSize = RawDataSize;
 8003044:	7aba      	ldrb	r2, [r7, #10]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	609a      	str	r2, [r3, #8]
	NewPkgPrc->PkgProcesscb = CallbackFunc;
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	611a      	str	r2, [r3, #16]

	if(FormatEnable==1)
 8003050:	7afb      	ldrb	r3, [r7, #11]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d103      	bne.n	800305e <io_PackageMode+0x8a>
		/* Default Parse Protocol:
		 * 1.Enable package head, head bytes are 0xFE and 0xEF;
		 * 2.Enable package check byte, check algorithm is XOR;
		 * 3.Disable package tail, use package length to indentity the
		 * length of data package. */
		io_SetPkgParseFmt(ioDevice,&DefaultPkgFmt);
 8003056:	4908      	ldr	r1, [pc, #32]	; (8003078 <io_PackageMode+0xa4>)
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f829 	bl	80030b0 <io_SetPkgParseFmt>
	}
	/* set receive mode as stream mode */
	ioDevice->ReceiveMode = PACKAGE_MODE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	08010504 	.word	0x08010504
 8003070:	08010d8c 	.word	0x08010d8c
 8003074:	080104dc 	.word	0x080104dc
 8003078:	08010d70 	.word	0x08010d70

0800307c <io_PkgProcessorDeinit>:
void io_PkgProcessorDeinit(COS_io *ioDevice)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	cos_free(ioDevice->PkgProcessor->DataDst);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fd06 	bl	8003a9c <cos_free>
	cos_free(ioDevice->PkgProcessor->PackageFormat);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fd00 	bl	8003a9c <cos_free>
	cos_free(ioDevice->PkgProcessor);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fcfb 	bl	8003a9c <cos_free>
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <io_SetPkgParseFmt>:
void io_SetPkgParseFmt(COS_io *ioDevice, COS_PkgFmt *PkgFmt)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
	if(ioDevice->PkgProcessor==NULL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10b      	bne.n	80030da <io_SetPkgParseFmt+0x2a>
	{
		COS_Logf(err,"'%s' set package parse error:Not in package mode.",ioDevice->Name);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <io_SetPkgParseFmt+0x64>)
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2303      	movs	r3, #3
 80030ce:	226c      	movs	r2, #108	; 0x6c
 80030d0:	4911      	ldr	r1, [pc, #68]	; (8003118 <io_SetPkgParseFmt+0x68>)
 80030d2:	4812      	ldr	r0, [pc, #72]	; (800311c <io_SetPkgParseFmt+0x6c>)
 80030d4:	f000 faf0 	bl	80036b8 <_Log_Write>
		return;
 80030d8:	e018      	b.n	800310c <io_SetPkgParseFmt+0x5c>
	}
	if(!ExamPkgFmt(PkgFmt))
 80030da:	6838      	ldr	r0, [r7, #0]
 80030dc:	f000 fa86 	bl	80035ec <ExamPkgFmt>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <io_SetPkgParseFmt+0x4c>
	{
		COS_Logf(err,"'%s' set package parse error:package format incorrect.",ioDevice->Name);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <io_SetPkgParseFmt+0x70>)
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2303      	movs	r3, #3
 80030f2:	2271      	movs	r2, #113	; 0x71
 80030f4:	4908      	ldr	r1, [pc, #32]	; (8003118 <io_SetPkgParseFmt+0x68>)
 80030f6:	4809      	ldr	r0, [pc, #36]	; (800311c <io_SetPkgParseFmt+0x6c>)
 80030f8:	f000 fade 	bl	80036b8 <_Log_Write>
	}
	ioDevice->PkgProcessor->PackageFormat = PkgFmt;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	605a      	str	r2, [r3, #4]
	ioDevice->PkgProcessor->FormatEnable = 1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
}
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	08010534 	.word	0x08010534
 8003118:	08010d9c 	.word	0x08010d9c
 800311c:	080104dc 	.word	0x080104dc
 8003120:	08010568 	.word	0x08010568

08003124 <io_PackageProcess>:
 *     1.ioDevice:pointer of io device
 * @retval: 1 if process secessfully ; 0 if process failed.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint8_t io_PackageProcess(COS_io *ioDevice)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af02      	add	r7, sp, #8
 800312a:	6078      	str	r0, [r7, #4]
	int ErrorCode = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]

	/* basic check */
	if(ioDevice->PkgProcessor==NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <io_PackageProcess+0x28>
	{
		COS_Logf(err,"io device %s work in receive stream mode but not initialized correctly.");
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <io_PackageProcess+0x84>)
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	2303      	movs	r3, #3
 800313e:	2285      	movs	r2, #133	; 0x85
 8003140:	491a      	ldr	r1, [pc, #104]	; (80031ac <io_PackageProcess+0x88>)
 8003142:	481b      	ldr	r0, [pc, #108]	; (80031b0 <io_PackageProcess+0x8c>)
 8003144:	f000 fab8 	bl	80036b8 <_Log_Write>
		return 0;
 8003148:	2300      	movs	r3, #0
 800314a:	e029      	b.n	80031a0 <io_PackageProcess+0x7c>
	}

	if(!ExamPkgFmt(ioDevice->PkgProcessor->PackageFormat))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fa4a 	bl	80035ec <ExamPkgFmt>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10c      	bne.n	8003178 <io_PackageProcess+0x54>
	{
		COS_Logf(err,"io device '%s' parsing package error:package format illegal.",ioDevice->Name);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <io_PackageProcess+0x90>)
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2303      	movs	r3, #3
 800316a:	228b      	movs	r2, #139	; 0x8b
 800316c:	490f      	ldr	r1, [pc, #60]	; (80031ac <io_PackageProcess+0x88>)
 800316e:	4810      	ldr	r0, [pc, #64]	; (80031b0 <io_PackageProcess+0x8c>)
 8003170:	f000 faa2 	bl	80036b8 <_Log_Write>
		return 0;
 8003174:	2300      	movs	r3, #0
 8003176:	e013      	b.n	80031a0 <io_PackageProcess+0x7c>
	}

	ErrorCode = _io_GetRawData(ioDevice);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f81d 	bl	80031b8 <_io_GetRawData>
 800317e:	4603      	mov	r3, r0
 8003180:	60fb      	str	r3, [r7, #12]

	if(ErrorCode==1)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10a      	bne.n	800319e <io_PackageProcess+0x7a>
	{
		ioDevice->PkgProcessor->PkgProcesscb(ioDevice,ioDevice->PkgProcessor->DataDst);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003192:	68d2      	ldr	r2, [r2, #12]
 8003194:	4611      	mov	r1, r2
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
		return 1;
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <io_PackageProcess+0x7c>
	}
	else
	{
		return 0;
 800319e:	2300      	movs	r3, #0
	}
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	080105a0 	.word	0x080105a0
 80031ac:	08010db0 	.word	0x08010db0
 80031b0:	080104dc 	.word	0x080104dc
 80031b4:	080105e8 	.word	0x080105e8

080031b8 <_io_GetRawData>:
 *     3.PkgLength:size of data package.
 * @retval: -1 if read error ; 0 if empty ; 1 if get successfully
 * @author: Wang Geng Jie
 *****************************************************************************************************/
uint8_t _io_GetRawData(COS_io *ioDevice)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	; 0x30
 80031bc:	af02      	add	r7, sp, #8
 80031be:	6078      	str	r0, [r7, #4]
    uint32_t RawDataSize = ioDevice->PkgProcessor->RawDataSize;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	613b      	str	r3, [r7, #16]
    /* useless data length from the beginning of input buffer
     * and will be delete after raw data is extracted */
	uint32_t UselessDataLength = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
	/* package beginning index in input buffer. */
	uint32_t PkgBgInInputBuf = ioDevice->InputTailIndex;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	623b      	str	r3, [r7, #32]
	/* package end index in input buffer */
	uint32_t PkgEdInInputBuf = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
	/* size of complete package, including head, tail and check value */
	uint32_t PkgSize = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
	uint32_t ActualRawLen = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
	uint8_t ChkValSize = ioDevice->PkgProcessor->PackageFormat->CheckValEnable ? ioDevice->PkgProcessor->PackageFormat->CheckAlgorithm==Chk_XOR ? 1:2 :0;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	7a5b      	ldrb	r3, [r3, #9]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <_io_GetRawData+0x48>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4a8d      	ldr	r2, [pc, #564]	; (8003428 <_io_GetRawData+0x270>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d101      	bne.n	80031fc <_io_GetRawData+0x44>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e002      	b.n	8003202 <_io_GetRawData+0x4a>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e000      	b.n	8003202 <_io_GetRawData+0x4a>
 8003200:	2300      	movs	r3, #0
 8003202:	72fb      	strb	r3, [r7, #11]
	/* if raw data size is 0 which means raw data length is not fixed,
	 * value of this variable is just the length of format, not including
	 * raw data length. */
	PkgSize = ioDevice->PkgProcessor->RawDataSize+
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	689b      	ldr	r3, [r3, #8]
			  ioDevice->PkgProcessor->PackageFormat->HeadEnable ? ioDevice->PkgProcessor->PackageFormat->HeadLength : 0+
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800320e:	6852      	ldr	r2, [r2, #4]
 8003210:	7812      	ldrb	r2, [r2, #0]
	PkgSize = ioDevice->PkgProcessor->RawDataSize+
 8003212:	4413      	add	r3, r2
			  ioDevice->PkgProcessor->PackageFormat->HeadEnable ? ioDevice->PkgProcessor->PackageFormat->HeadLength : 0+
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <_io_GetRawData+0x6a>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	7a1b      	ldrb	r3, [r3, #8]
 8003220:	e00b      	b.n	800323a <_io_GetRawData+0x82>
              ioDevice->PkgProcessor->PackageFormat->TailEnable ? ioDevice->PkgProcessor->PackageFormat->TailLength : 0+
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	7c1b      	ldrb	r3, [r3, #16]
			  ioDevice->PkgProcessor->PackageFormat->HeadEnable ? ioDevice->PkgProcessor->PackageFormat->HeadLength : 0+
 800322a:	2b00      	cmp	r3, #0
 800322c:	d004      	beq.n	8003238 <_io_GetRawData+0x80>
              ioDevice->PkgProcessor->PackageFormat->TailEnable ? ioDevice->PkgProcessor->PackageFormat->TailLength : 0+
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	7e1b      	ldrb	r3, [r3, #24]
 8003236:	e000      	b.n	800323a <_io_GetRawData+0x82>
			  ioDevice->PkgProcessor->PackageFormat->HeadEnable ? ioDevice->PkgProcessor->PackageFormat->HeadLength : 0+
 8003238:	7afb      	ldrb	r3, [r7, #11]
	PkgSize = ioDevice->PkgProcessor->RawDataSize+
 800323a:	60fb      	str	r3, [r7, #12]
              ChkValSize;
	if(io_InputBufGetSize(ioDevice)<PkgSize)
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7ff fe5e 	bl	8002efe <io_InputBufGetSize>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <_io_GetRawData+0x96>
	{
		return 0;
 800324a:	2300      	movs	r3, #0
 800324c:	e1ca      	b.n	80035e4 <_io_GetRawData+0x42c>
	}
	if(ioDevice->PkgProcessor->RawDataSize==0 && ioDevice->PkgProcessor->PackageFormat->TailEnable==0)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d113      	bne.n	8003280 <_io_GetRawData+0xc8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	7c1b      	ldrb	r3, [r3, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <_io_GetRawData+0xc8>
	{
		COS_Logf(err,"io device find data package error:both raw data size and tail aren't specified.",ioDevice->Name);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	4b70      	ldr	r3, [pc, #448]	; (800342c <_io_GetRawData+0x274>)
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	2303      	movs	r3, #3
 8003270:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8003274:	496e      	ldr	r1, [pc, #440]	; (8003430 <_io_GetRawData+0x278>)
 8003276:	486f      	ldr	r0, [pc, #444]	; (8003434 <_io_GetRawData+0x27c>)
 8003278:	f000 fa1e 	bl	80036b8 <_Log_Write>
		return 0;
 800327c:	2300      	movs	r3, #0
 800327e:	e1b1      	b.n	80035e4 <_io_GetRawData+0x42c>
                               /****************************/
	/*-------------------------*/
	/* Sequence Matching Start */
	/*-------------------------*/
	/* find package start signal with brute-force algorithm */
	uint8_t TempHeadIndex = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	75fb      	strb	r3, [r7, #23]
	/* find end byte regardless whether package head is specified or not */
	while(PkgBgInInputBuf != ioDevice->InputHeadIndex && TempHeadIndex<ioDevice->PkgProcessor->PackageFormat->HeadLength)
 8003284:	e02c      	b.n	80032e0 <_io_GetRawData+0x128>
	{
		/* if data matches, continue finding */
		if(ioDevice->InputBuf[PkgBgInInputBuf]==ioDevice->PkgProcessor->PackageFormat->Head[TempHeadIndex])
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	4413      	add	r3, r2
 800328e:	781a      	ldrb	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	440b      	add	r3, r1
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d10d      	bne.n	80032be <_io_GetRawData+0x106>
		{
			/* The input buffer and header sequence match the next byte in turn */
			PkgBgInInputBuf = (PkgBgInInputBuf+1)%ioDevice->InputBufSize;
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	3301      	adds	r3, #1
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80032ae:	fb01 f202 	mul.w	r2, r1, r2
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	623b      	str	r3, [r7, #32]
			TempHeadIndex++;
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	3301      	adds	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
 80032bc:	e010      	b.n	80032e0 <_io_GetRawData+0x128>
		}
		else // restart match
		{
			/* input buffer starts matching from next byte */
			PkgBgInInputBuf = (PkgBgInInputBuf-TempHeadIndex+1)%ioDevice->InputBufSize;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	6a3a      	ldr	r2, [r7, #32]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80032ce:	fb01 f202 	mul.w	r2, r1, r2
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	623b      	str	r3, [r7, #32]

			/* Head sequence starts matching from beginning */
			TempHeadIndex=0;
 80032d6:	2300      	movs	r3, #0
 80032d8:	75fb      	strb	r3, [r7, #23]

			UselessDataLength++;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	3301      	adds	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
	while(PkgBgInInputBuf != ioDevice->InputHeadIndex && TempHeadIndex<ioDevice->PkgProcessor->PackageFormat->HeadLength)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	6a3a      	ldr	r2, [r7, #32]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d006      	beq.n	80032f8 <_io_GetRawData+0x140>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	7a1b      	ldrb	r3, [r3, #8]
 80032f2:	7dfa      	ldrb	r2, [r7, #23]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d3c6      	bcc.n	8003286 <_io_GetRawData+0xce>
		}
	}
	/* if failed to find a header sequence */
	if(TempHeadIndex<ioDevice->PkgProcessor->PackageFormat->HeadLength)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	7a1b      	ldrb	r3, [r3, #8]
 8003300:	7dfa      	ldrb	r2, [r7, #23]
 8003302:	429a      	cmp	r2, r3
 8003304:	d205      	bcs.n	8003312 <_io_GetRawData+0x15a>
	{
		/* remove useless data */
		io_InputBufRemove(ioDevice, UselessDataLength);
 8003306:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fdae 	bl	8002e6a <io_InputBufRemove>
		return 0;
 800330e:	2300      	movs	r3, #0
 8003310:	e168      	b.n	80035e4 <_io_GetRawData+0x42c>
	}
	/* else head sequence found successful */
	else
	{
		PkgBgInInputBuf = (PkgBgInInputBuf-ioDevice->PkgProcessor->PackageFormat->HeadLength)%ioDevice->InputBufSize;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	7a1b      	ldrb	r3, [r3, #8]
 800331a:	461a      	mov	r2, r3
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003324:	fbb3 f1f2 	udiv	r1, r3, r2
 8003328:	fb01 f202 	mul.w	r2, r1, r2
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	623b      	str	r3, [r7, #32]
                               /************************/
	/* TARGET:find out the byte after the last byte of raw data*/

	/* we can't locate the end of a package if both raw data size and tail are
	 * not specified. */
	if(ioDevice->PkgProcessor->RawDataSize==0 && ioDevice->PkgProcessor->PackageFormat->TailEnable==0)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d110      	bne.n	800335c <_io_GetRawData+0x1a4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	7c1b      	ldrb	r3, [r3, #16]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10a      	bne.n	800335c <_io_GetRawData+0x1a4>
	{
		COS_Logf(err,"find data package error:Both raw data size and package tail aren't specified.");
 8003346:	4b3c      	ldr	r3, [pc, #240]	; (8003438 <_io_GetRawData+0x280>)
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2303      	movs	r3, #3
 800334c:	f44f 72a3 	mov.w	r2, #326	; 0x146
 8003350:	4937      	ldr	r1, [pc, #220]	; (8003430 <_io_GetRawData+0x278>)
 8003352:	4838      	ldr	r0, [pc, #224]	; (8003434 <_io_GetRawData+0x27c>)
 8003354:	f000 f9b0 	bl	80036b8 <_Log_Write>
		return 0;
 8003358:	2300      	movs	r3, #0
 800335a:	e143      	b.n	80035e4 <_io_GetRawData+0x42c>
	}
	PkgEdInInputBuf = (PkgBgInInputBuf + ioDevice->PkgProcessor->PackageFormat->HeadLength +RawDataSize)%ioDevice->InputBufSize;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	7a1b      	ldrb	r3, [r3, #8]
 8003364:	461a      	mov	r2, r3
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	441a      	add	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	4413      	add	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003372:	fbb3 f1f2 	udiv	r1, r3, r2
 8003376:	fb01 f202 	mul.w	r2, r1, r2
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	61fb      	str	r3, [r7, #28]
	ActualRawLen += RawDataSize;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
	/*-------------------------*/
	/* Sequence Matching Start */
	/*-------------------------*/
	/* find package end byte with brute-force algorithm */
	uint8_t TempTailIndex = 0;
 8003386:	2300      	movs	r3, #0
 8003388:	75bb      	strb	r3, [r7, #22]
	/* find end byte regardless whether package tail is specified or not.If tail is not specified,
	 * what will be found is the byte after the last byte of raw data. */
	while(PkgEdInInputBuf != ioDevice->InputHeadIndex && TempTailIndex<ioDevice->PkgProcessor->PackageFormat->TailLength)
 800338a:	e02c      	b.n	80033e6 <_io_GetRawData+0x22e>
	{
		/* if data matches, continue finding */
		if(ioDevice->InputBuf[PkgEdInInputBuf]==ioDevice->PkgProcessor->PackageFormat->Tail[TempTailIndex])
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	4413      	add	r3, r2
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	6959      	ldr	r1, [r3, #20]
 800339e:	7dbb      	ldrb	r3, [r7, #22]
 80033a0:	440b      	add	r3, r1
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d10d      	bne.n	80033c4 <_io_GetRawData+0x20c>
		{
			/* The input buffer and tail sequence match the next byte in turn */
			PkgEdInInputBuf = (PkgEdInInputBuf+1)%ioDevice->InputBufSize;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	3301      	adds	r3, #1
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80033b4:	fb01 f202 	mul.w	r2, r1, r2
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	61fb      	str	r3, [r7, #28]
			TempTailIndex++;
 80033bc:	7dbb      	ldrb	r3, [r7, #22]
 80033be:	3301      	adds	r3, #1
 80033c0:	75bb      	strb	r3, [r7, #22]
 80033c2:	e010      	b.n	80033e6 <_io_GetRawData+0x22e>
		}
		else // restart match
		{
			/* input buffer starts matching from next byte */
			PkgEdInInputBuf = (PkgEdInInputBuf-TempTailIndex+1)%ioDevice->InputBufSize;
 80033c4:	7dbb      	ldrb	r3, [r7, #22]
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80033d4:	fb01 f202 	mul.w	r2, r1, r2
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	61fb      	str	r3, [r7, #28]

			/* tail sequence starts matching from beginning */
			TempTailIndex=0;
 80033dc:	2300      	movs	r3, #0
 80033de:	75bb      	strb	r3, [r7, #22]

			ActualRawLen++;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	3301      	adds	r3, #1
 80033e4:	61bb      	str	r3, [r7, #24]
	while(PkgEdInInputBuf != ioDevice->InputHeadIndex && TempTailIndex<ioDevice->PkgProcessor->PackageFormat->TailLength)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d006      	beq.n	80033fe <_io_GetRawData+0x246>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	7e1b      	ldrb	r3, [r3, #24]
 80033f8:	7dba      	ldrb	r2, [r7, #22]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d3c6      	bcc.n	800338c <_io_GetRawData+0x1d4>
		}
	}
	/* if failed to find a tail sequence */
	if(TempTailIndex<ioDevice->PkgProcessor->PackageFormat->TailLength)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	7e1b      	ldrb	r3, [r3, #24]
 8003406:	7dba      	ldrb	r2, [r7, #22]
 8003408:	429a      	cmp	r2, r3
 800340a:	d217      	bcs.n	800343c <_io_GetRawData+0x284>
	{
		ioDevice->PkgProcessor->DataDst = NULL;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003410:	2200      	movs	r2, #0
 8003412:	60da      	str	r2, [r3, #12]
		/* remove all data */
		io_InputBufRemove(ioDevice, io_InputBufGetSize(ioDevice));
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fd72 	bl	8002efe <io_InputBufGetSize>
 800341a:	4603      	mov	r3, r0
 800341c:	4619      	mov	r1, r3
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fd23 	bl	8002e6a <io_InputBufRemove>
		return 0;
 8003424:	2300      	movs	r3, #0
 8003426:	e0dd      	b.n	80035e4 <_io_GetRawData+0x42c>
 8003428:	08003659 	.word	0x08003659
 800342c:	08010688 	.word	0x08010688
 8003430:	08010dc4 	.word	0x08010dc4
 8003434:	080104dc 	.word	0x080104dc
 8003438:	080106d8 	.word	0x080106d8
	}
	/* else head sequence found successful */
	else
	{
		PkgEdInInputBuf = (PkgEdInInputBuf-ioDevice->PkgProcessor->PackageFormat->TailLength)%ioDevice->InputBufSize;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	7e1b      	ldrb	r3, [r3, #24]
 8003444:	461a      	mov	r2, r3
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800344e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003452:	fb01 f202 	mul.w	r2, r1, r2
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	61fb      	str	r3, [r7, #28]
	/* Sequence Matching End */
	/*-----------------------*/

	/* have both raw data size and package tail.
	 * --->see whether package tail sequence appears at correct location */
	if(ioDevice->PkgProcessor->RawDataSize!=0 && ioDevice->PkgProcessor->PackageFormat->TailEnable)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d035      	beq.n	80034d0 <_io_GetRawData+0x318>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	7c1b      	ldrb	r3, [r3, #16]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02f      	beq.n	80034d0 <_io_GetRawData+0x318>
	{
		uint8_t i=0;
 8003470:	2300      	movs	r3, #0
 8003472:	757b      	strb	r3, [r7, #21]
		for(i=0 ; i<ioDevice->PkgProcessor->PackageFormat->TailLength ; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	757b      	strb	r3, [r7, #21]
 8003478:	e023      	b.n	80034c2 <_io_GetRawData+0x30a>
		{
			if(ioDevice->InputBuf[(PkgEdInInputBuf + i)%ioDevice->InputBufSize]!=ioDevice->PkgProcessor->PackageFormat->Tail[i])
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800347e:	7d7a      	ldrb	r2, [r7, #21]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003488:	fbb3 f0f2 	udiv	r0, r3, r2
 800348c:	fb00 f202 	mul.w	r2, r0, r2
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	440b      	add	r3, r1
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	6959      	ldr	r1, [r3, #20]
 800349e:	7d7b      	ldrb	r3, [r7, #21]
 80034a0:	440b      	add	r3, r1
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d009      	beq.n	80034bc <_io_GetRawData+0x304>
			{/* if enters this program block, the package is almost damaged. */
				UselessDataLength += PkgSize;
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4413      	add	r3, r2
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
				io_InputBufRemove(ioDevice, UselessDataLength);
 80034b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff fcd9 	bl	8002e6a <io_InputBufRemove>
				return 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e093      	b.n	80035e4 <_io_GetRawData+0x42c>
		for(i=0 ; i<ioDevice->PkgProcessor->PackageFormat->TailLength ; i++)
 80034bc:	7d7b      	ldrb	r3, [r7, #21]
 80034be:	3301      	adds	r3, #1
 80034c0:	757b      	strb	r3, [r7, #21]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	7e1b      	ldrb	r3, [r3, #24]
 80034ca:	7d7a      	ldrb	r2, [r7, #21]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d3d4      	bcc.n	800347a <_io_GetRawData+0x2c2>
	/*----so far we get the byte after last raw data byte */

                             /************************/
                             /*      CHECK DATA      */
                             /************************/
	io_InputBufRemove(ioDevice, UselessDataLength);
 80034d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fcc9 	bl	8002e6a <io_InputBufRemove>
	io_InputBufRemove(ioDevice, ioDevice->PkgProcessor->PackageFormat->HeadLength);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	7a1b      	ldrb	r3, [r3, #8]
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fcc1 	bl	8002e6a <io_InputBufRemove>
	io_GetData(ioDevice, ioDevice->PkgProcessor->DataDst, ActualRawLen);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fc5e 	bl	8002db4 <io_GetData>
	io_InputBufRemove(ioDevice, ChkValSize);
 80034f8:	7afb      	ldrb	r3, [r7, #11]
 80034fa:	4619      	mov	r1, r3
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fcb4 	bl	8002e6a <io_InputBufRemove>
	io_InputBufRemove(ioDevice, ioDevice->PkgProcessor->PackageFormat->TailLength);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	7e1b      	ldrb	r3, [r3, #24]
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff fcac 	bl	8002e6a <io_InputBufRemove>
	/* no check */
	if(!ioDevice->PkgProcessor->PackageFormat->CheckValEnable)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	7a5b      	ldrb	r3, [r3, #9]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <_io_GetRawData+0x36a>
	{
		return 1;
 800351e:	2301      	movs	r3, #1
 8003520:	e060      	b.n	80035e4 <_io_GetRawData+0x42c>
	}

	/* do check */
	uint16_t icv = ioDevice->PkgProcessor->PackageFormat->CheckAlgorithm(ioDevice->PkgProcessor->DataDst,ioDevice->PkgProcessor->RawDataSize);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800352e:	68d0      	ldr	r0, [r2, #12]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003534:	6892      	ldr	r2, [r2, #8]
 8003536:	4611      	mov	r1, r2
 8003538:	4798      	blx	r3
 800353a:	4603      	mov	r3, r0
 800353c:	813b      	strh	r3, [r7, #8]
	if(!ioDevice->PkgProcessor->PackageFormat->TailEnable)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	7c1b      	ldrb	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d112      	bne.n	8003570 <_io_GetRawData+0x3b8>
	{
		if(icv != ioDevice->InputBuf[PkgEdInInputBuf])
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	4413      	add	r3, r2
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	b29b      	uxth	r3, r3
 8003556:	893a      	ldrh	r2, [r7, #8]
 8003558:	429a      	cmp	r2, r3
 800355a:	d042      	beq.n	80035e2 <_io_GetRawData+0x42a>
		{
			UselessDataLength += PkgSize;
 800355c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
			io_InputBufRemove(ioDevice, UselessDataLength);
 8003564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fc7f 	bl	8002e6a <io_InputBufRemove>
			return 0;
 800356c:	2300      	movs	r3, #0
 800356e:	e039      	b.n	80035e4 <_io_GetRawData+0x42c>
		}
	}
	/* tail enable */
	else
	{
		if(ioDevice->PkgProcessor->PackageFormat->TailBehindChk)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	7e5b      	ldrb	r3, [r3, #25]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d012      	beq.n	80035a2 <_io_GetRawData+0x3ea>
		{
			if(icv != ioDevice->InputBuf[PkgEdInInputBuf])
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	4413      	add	r3, r2
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	893a      	ldrh	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	d029      	beq.n	80035e2 <_io_GetRawData+0x42a>
			{
				UselessDataLength += PkgSize;
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
				io_InputBufRemove(ioDevice, UselessDataLength);
 8003596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff fc66 	bl	8002e6a <io_InputBufRemove>
				return 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	e020      	b.n	80035e4 <_io_GetRawData+0x42c>
			}
		}
		else
		{
			if(icv != ioDevice->InputBuf[(PkgEdInInputBuf+ioDevice->PkgProcessor->PackageFormat->TailLength)%ioDevice->InputBufSize])
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	7e1b      	ldrb	r3, [r3, #24]
 80035ae:	461a      	mov	r2, r3
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80035b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80035bc:	fb00 f202 	mul.w	r2, r0, r2
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	440b      	add	r3, r1
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	893a      	ldrh	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d009      	beq.n	80035e2 <_io_GetRawData+0x42a>
			{
				UselessDataLength += PkgSize;
 80035ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4413      	add	r3, r2
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
				io_InputBufRemove(ioDevice, UselessDataLength);
 80035d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fc46 	bl	8002e6a <io_InputBufRemove>
				return 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <_io_GetRawData+0x42c>
			}
		}
	}

	/* check pass or no check */
	return 1;
 80035e2:	2301      	movs	r3, #1
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3728      	adds	r7, #40	; 0x28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <ExamPkgFmt>:



uint8_t ExamPkgFmt(COS_PkgFmt *PkgFmt)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	if(PkgFmt==NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <ExamPkgFmt+0x12>
		return 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	e026      	b.n	800364c <ExamPkgFmt+0x60>

	/* enable package head but head information is not correct */
	else if(PkgFmt->HeadEnable&&(PkgFmt->Head==NULL||PkgFmt->HeadLength==0))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <ExamPkgFmt+0x2e>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <ExamPkgFmt+0x2a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7a1b      	ldrb	r3, [r3, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <ExamPkgFmt+0x2e>
		return 0;
 8003616:	2300      	movs	r3, #0
 8003618:	e018      	b.n	800364c <ExamPkgFmt+0x60>

	/* enable package tail but tail information is not correct */
	else if(PkgFmt->TailEnable&&(PkgFmt->Tail==NULL||PkgFmt->TailLength==0))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	7c1b      	ldrb	r3, [r3, #16]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <ExamPkgFmt+0x4a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <ExamPkgFmt+0x46>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	7e1b      	ldrb	r3, [r3, #24]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <ExamPkgFmt+0x4a>
		return 0;
 8003632:	2300      	movs	r3, #0
 8003634:	e00a      	b.n	800364c <ExamPkgFmt+0x60>

	else if(PkgFmt->CheckValEnable&&PkgFmt->CheckAlgorithm==NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7a5b      	ldrb	r3, [r3, #9]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <ExamPkgFmt+0x5e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <ExamPkgFmt+0x5e>
		return 0;
 8003646:	2300      	movs	r3, #0
 8003648:	e000      	b.n	800364c <ExamPkgFmt+0x60>

	return 1;
 800364a:	2301      	movs	r3, #1
}
 800364c:	4618      	mov	r0, r3
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <Chk_XOR>:

uint16_t Chk_XOR(uint8_t *pData, uint32_t DataLen)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
	uint8_t icv=0;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
	uint32_t i=0;
 8003666:	2300      	movs	r3, #0
 8003668:	60bb      	str	r3, [r7, #8]
	for(i=0 ; i<DataLen ; i++)
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	e009      	b.n	8003684 <Chk_XOR+0x2c>
	{
		icv^=pData[i];
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4413      	add	r3, r2
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	4053      	eors	r3, r2
 800367c:	73fb      	strb	r3, [r7, #15]
	for(i=0 ; i<DataLen ; i++)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	3301      	adds	r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3f1      	bcc.n	8003670 <Chk_XOR+0x18>
	}
	return (uint16_t)icv;
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	b29b      	uxth	r3, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <COS_DebugInit>:
 * @params:
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void COS_DebugInit()
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
#if LOG_STORAGE
	LogChainHead = NULL;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <COS_DebugInit+0x14>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
#endif
	COS_printf("debug init done.\r\n");
 80036a6:	4803      	ldr	r0, [pc, #12]	; (80036b4 <COS_DebugInit+0x18>)
 80036a8:	f7fe fee8 	bl	800247c <COS_printf>
}
 80036ac:	bf00      	nop
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20006c1c 	.word	0x20006c1c
 80036b4:	08010768 	.word	0x08010768

080036b8 <_Log_Write>:
 *     6.arguments:value to be put into 'fmt'.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void _Log_Write(const char *file,const char *func,const int line, LogLevel level, char *fmt,...)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	70fb      	strb	r3, [r7, #3]

#if (LOG_STORAGE==1)

	if(Log_Filter(file,level)==0)
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	4619      	mov	r1, r3
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 f866 	bl	800379c <Log_Filter>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d055      	beq.n	8003782 <_Log_Write+0xca>
	LogNode *NewLog;
	uint32_t LogStringLength;

	/* get current COS_Log string length so that function knows where it should
	 * start to write new log string. */
	LogStringLength = strlen(COS_Log);  // length of current COS_Log string
 80036d6:	482e      	ldr	r0, [pc, #184]	; (8003790 <_Log_Write+0xd8>)
 80036d8:	f7fc fd84 	bl	80001e4 <strlen>
 80036dc:	61b8      	str	r0, [r7, #24]

	/* allocate a block of memory to contain new log information */
	NewLog = (LogNode*)cos_malloc(sizeof(LogNode));
 80036de:	201c      	movs	r0, #28
 80036e0:	f000 f9f2 	bl	8003ac8 <cos_malloc>
 80036e4:	6178      	str	r0, [r7, #20]

	if(NewLog==NULL) // allocate memory failed, exit function
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d04c      	beq.n	8003786 <_Log_Write+0xce>
	{
		return ;
	}

	NewLog->FileName = CutFileName(file);
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f87d 	bl	80037ec <CutFileName>
 80036f2:	4602      	mov	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	605a      	str	r2, [r3, #4]
	NewLog->FunctionName = func;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	609a      	str	r2, [r3, #8]
	NewLog->LogLevel = level;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	701a      	strb	r2, [r3, #0]
	NewLog->RowNumber = line;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	b29a      	uxth	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	819a      	strh	r2, [r3, #12]
	NewLog->LogString = COS_Log+LogStringLength;
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	4a20      	ldr	r2, [pc, #128]	; (8003790 <_Log_Write+0xd8>)
 8003710:	441a      	add	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	611a      	str	r2, [r3, #16]
	NewLog->Next = NULL;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]

	va_start(ap,fmt);          // argument list initialize
 800371c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003720:	613b      	str	r3, [r7, #16]

	/* write customized string and format arguments behind system information which
	 * is just written in the message buffer before */
	vsprintf(COS_Log+LogStringLength,fmt,ap);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	4a1a      	ldr	r2, [pc, #104]	; (8003790 <_Log_Write+0xd8>)
 8003726:	4413      	add	r3, r2
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800372c:	4618      	mov	r0, r3
 800372e:	f008 fc43 	bl	800bfb8 <vsiprintf>

	/* deinit and clear argument list */
	va_end(ap);

	NewLog->LogStringLen = strlen(COS_Log+LogStringLength);
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	4a16      	ldr	r2, [pc, #88]	; (8003790 <_Log_Write+0xd8>)
 8003736:	4413      	add	r3, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f7fc fd53 	bl	80001e4 <strlen>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	615a      	str	r2, [r3, #20]

	/* add new node to log chain */
	LogNode *pTailNode = LogChainHead;
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <_Log_Write+0xdc>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	61fb      	str	r3, [r7, #28]
	if(pTailNode == NULL)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <_Log_Write+0xa8>
	{
		LogChainHead = NewLog;
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <_Log_Write+0xdc>)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	e009      	b.n	800376e <_Log_Write+0xb6>
	}
	else
	{
		while(pTailNode->Next != NULL)
		{
			pTailNode = pTailNode->Next;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	61fb      	str	r3, [r7, #28]
		while(pTailNode->Next != NULL)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f8      	bne.n	800375a <_Log_Write+0xa2>
		}
		pTailNode->Next = NewLog;
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	619a      	str	r2, [r3, #24]
	}
#if LOG_PRINT==1
	COS_printf("%.*s\r\n",NewLog->LogStringLen, COS_Log+LogStringLength);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	6959      	ldr	r1, [r3, #20]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	4a06      	ldr	r2, [pc, #24]	; (8003790 <_Log_Write+0xd8>)
 8003776:	4413      	add	r3, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4807      	ldr	r0, [pc, #28]	; (8003798 <_Log_Write+0xe0>)
 800377c:	f7fe fe7e 	bl	800247c <COS_printf>
	va_end(ap);

	COS_printf("\r\n");

#endif
	return ;
 8003780:	e002      	b.n	8003788 <_Log_Write+0xd0>
		return ;
 8003782:	bf00      	nop
 8003784:	e000      	b.n	8003788 <_Log_Write+0xd0>
		return ;
 8003786:	bf00      	nop
}
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	2000441c 	.word	0x2000441c
 8003794:	20006c1c 	.word	0x20006c1c
 8003798:	0801077c 	.word	0x0801077c

0800379c <Log_Filter>:
 * @retval: 1 if the log should be logged ; 0 if the log shouldn't be logged.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
#if ((LOG_PRINT==1)||(LOG_STORAGE==1))
static uint8_t Log_Filter(const char *file, LogLevel level)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	70fb      	strb	r3, [r7, #3]
	/* Filter by level */
	switch(level)
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	2b07      	cmp	r3, #7
 80037ac:	d814      	bhi.n	80037d8 <Log_Filter+0x3c>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <Log_Filter+0x18>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	080037dd 	.word	0x080037dd
 80037c0:	080037dd 	.word	0x080037dd
 80037c4:	080037dd 	.word	0x080037dd
 80037c8:	080037dd 	.word	0x080037dd
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	080037d5 	.word	0x080037d5
	}
	case debug:
	{
		if(LOG_DEBUG==0)
		{
			return 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e003      	b.n	80037e0 <Log_Filter+0x44>
		}
		break;
	}
	default:
		return 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	e001      	b.n	80037e0 <Log_Filter+0x44>
		break;
 80037dc:	bf00      	nop
	else if((DEBUG_A4950==0)&&(strstr(file,"A4950")))
	{
		return 0;
	}

	return 1;
 80037de:	2301      	movs	r3, #1
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <CutFileName>:
 *     2.DataDst:the space to be written in.
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
static char* CutFileName(const char* FileName)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	char* pFileNameBeginning = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]

	pFileNameBeginning = strstr(FileName,"src/");
 80037f8:	4909      	ldr	r1, [pc, #36]	; (8003820 <CutFileName+0x34>)
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f007 fc9e 	bl	800b13c <strstr>
 8003800:	60f8      	str	r0, [r7, #12]

	if(pFileNameBeginning!=NULL)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <CutFileName+0x24>
	{
		pFileNameBeginning += 4;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3304      	adds	r3, #4
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e001      	b.n	8003814 <CutFileName+0x28>
	}
	else
	{
		pFileNameBeginning = FileName;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	60fb      	str	r3, [r7, #12]
	}

	return pFileNameBeginning;
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	08010784 	.word	0x08010784

08003824 <COS_PrintLog>:
 * @params:none
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void COS_PrintLog()
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
    LogNode *pNode = LogChainHead;    // a temporary pointer to operate LogChain.
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <COS_PrintLog+0x28>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	607b      	str	r3, [r7, #4]
	while(pNode!=NULL)
 8003830:	e005      	b.n	800383e <COS_PrintLog+0x1a>
	{
		Log_PrintNode(pNode); // print log data to buffer
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f80c 	bl	8003850 <Log_PrintNode>
		pNode = pNode->Next;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	607b      	str	r3, [r7, #4]
	while(pNode!=NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f6      	bne.n	8003832 <COS_PrintLog+0xe>
	}
	return ;
 8003844:	bf00      	nop
}
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20006c1c 	.word	0x20006c1c

08003850 <Log_PrintNode>:
 *     3.LogMesgLength:length of current log string.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
static void Log_PrintNode(LogNode *LogNode)
{
 8003850:	b5b0      	push	{r4, r5, r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af04      	add	r7, sp, #16
 8003856:	6078      	str	r0, [r7, #4]
    /* [WARN][c_DCMotor.c][DCMotor_SetSpeed][78] xxxxxxxxxx */
	/* Notice that COS_Log string doesn't store '\r' and '\n' */
    COS_printf("[%s][%s][%s][%d] %.*s\r\n",LogLevelString[LogNode->LogLevel]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <Log_PrintNode+0x44>)
 8003860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6858      	ldr	r0, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689c      	ldr	r4, [r3, #8]
                                                  ,LogNode->FileName
                                                  ,LogNode->FunctionName
                                                  ,LogNode->RowNumber
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	899b      	ldrh	r3, [r3, #12]
    COS_printf("[%s][%s][%s][%d] %.*s\r\n",LogLevelString[LogNode->LogLevel]
 8003870:	461d      	mov	r5, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6912      	ldr	r2, [r2, #16]
 800387a:	9202      	str	r2, [sp, #8]
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	9500      	str	r5, [sp, #0]
 8003880:	4623      	mov	r3, r4
 8003882:	4602      	mov	r2, r0
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <Log_PrintNode+0x48>)
 8003886:	f7fe fdf9 	bl	800247c <COS_printf>
                                                  ,LogNode->LogStringLen
                                                  ,LogNode->LogString);

}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bdb0      	pop	{r4, r5, r7, pc}
 8003892:	bf00      	nop
 8003894:	20000078 	.word	0x20000078
 8003898:	0801078c 	.word	0x0801078c

0800389c <__memset>:
//设置内存
//*s:内存首地址
//c :要设置的值
//count:需要设置的内存大小(字节为单位)
void __memset(void *s,uint8_t c,uint32_t count)
{ 
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	460b      	mov	r3, r1
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	72fb      	strb	r3, [r7, #11]
    uint8_t *xs = s;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	617b      	str	r3, [r7, #20]
    while(count--)*xs++=c; 
 80038ae:	e004      	b.n	80038ba <__memset+0x1e>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	617a      	str	r2, [r7, #20]
 80038b6:	7afa      	ldrb	r2, [r7, #11]
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f5      	bne.n	80038b0 <__memset+0x14>
}   
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <Mem_Init>:
//内存管理初始化 
//memx:所属内存块
void Mem_Init()
{ 
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
    __memset(mallco_dev.memmapx , 0,MemTableSize*2);   //内存状态表数据清零
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <Mem_Init+0x30>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80038e0:	0052      	lsls	r2, r2, #1
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ffd9 	bl	800389c <__memset>
    __memset(mallco_dev.membasex, 0,MemSize);           //内存池所有数据清零
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <Mem_Init+0x30>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff ffd1 	bl	800389c <__memset>
    mallco_dev.memrdyx=1;                               //内存管理初始化OK
 80038fa:	4b02      	ldr	r3, [pc, #8]	; (8003904 <Mem_Init+0x30>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	741a      	strb	r2, [r3, #16]
} 
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000098 	.word	0x20000098

08003908 <Mem_GetUsedRate>:
//获取内存使用率
//返回值:使用率(0~100)
uint8_t Mem_GetUsedRate(void)
{ 
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
    uint32_t used=0;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
    uint32_t i;
    for(i=0;i<MemTableSize;i++)
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	e00d      	b.n	8003934 <Mem_GetUsedRate+0x2c>
    { 
        if(mallco_dev.memmapx[i])used++;
 8003918:	4b10      	ldr	r3, [pc, #64]	; (800395c <Mem_GetUsedRate+0x54>)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4413      	add	r3, r2
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <Mem_GetUsedRate+0x26>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3301      	adds	r3, #1
 800392c:	607b      	str	r3, [r7, #4]
    for(i=0;i<MemTableSize;i++)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	3301      	adds	r3, #1
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4293      	cmp	r3, r2
 800393c:	d3ec      	bcc.n	8003918 <Mem_GetUsedRate+0x10>
    }
    return (used*100)/(MemTableSize);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2264      	movs	r2, #100	; 0x64
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	f44f 7220 	mov.w	r2, #640	; 0x280
 800394a:	fbb3 f3f2 	udiv	r3, r3, r2
 800394e:	b2db      	uxtb	r3, r3
} 
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	20000098 	.word	0x20000098

08003960 <__malloc>:
//内存分配(内部调用)
//size:要分配的内存大小(字节)
//返回值:0XFFFFFFFF,代表错误;其他,内存偏移地址
uint32_t __malloc(uint32_t size)
{ 
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
    signed long offset=0; 
 8003968:	2300      	movs	r3, #0
 800396a:	617b      	str	r3, [r7, #20]
    uint16_t nmemb; //需要的内存块数
    uint16_t cmemb=0;//连续空内存块数
 800396c:	2300      	movs	r3, #0
 800396e:	823b      	strh	r3, [r7, #16]
    uint32_t i;
    if(!mallco_dev.memrdyx)mallco_dev.init();//未初始化,先执行初始化
 8003970:	4b2c      	ldr	r3, [pc, #176]	; (8003a24 <__malloc+0xc4>)
 8003972:	7c1b      	ldrb	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <__malloc+0x1e>
 8003978:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <__malloc+0xc4>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4798      	blx	r3
    if(size==0)return 0XFFFFFFFF;            //不需要分配
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d102      	bne.n	800398a <__malloc+0x2a>
 8003984:	f04f 33ff 	mov.w	r3, #4294967295
 8003988:	e047      	b.n	8003a1a <__malloc+0xba>

    nmemb=size/MemBlockSize;                //获取需要分配的连续内存块数
 800398a:	2210      	movs	r2, #16
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003992:	827b      	strh	r3, [r7, #18]
    if(size%MemBlockSize)nmemb++;
 8003994:	2210      	movs	r2, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	fbb3 f1f2 	udiv	r1, r3, r2
 800399c:	fb01 f202 	mul.w	r2, r1, r2
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <__malloc+0x4c>
 80039a6:	8a7b      	ldrh	r3, [r7, #18]
 80039a8:	3301      	adds	r3, #1
 80039aa:	827b      	strh	r3, [r7, #18]
    for(offset=MemTableSize-1;offset>=0;offset--)     //搜索整个内存控制区
 80039ac:	f44f 7320 	mov.w	r3, #640	; 0x280
 80039b0:	3b01      	subs	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e02c      	b.n	8003a10 <__malloc+0xb0>
    {    
		if(!mallco_dev.memmapx[offset])cmemb++;     //连续空内存块数增加
 80039b6:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <__malloc+0xc4>)
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <__malloc+0x6e>
 80039c6:	8a3b      	ldrh	r3, [r7, #16]
 80039c8:	3301      	adds	r3, #1
 80039ca:	823b      	strh	r3, [r7, #16]
 80039cc:	e001      	b.n	80039d2 <__malloc+0x72>
		else cmemb=0;        //连续内存块清零
 80039ce:	2300      	movs	r3, #0
 80039d0:	823b      	strh	r3, [r7, #16]
		if(cmemb==nmemb)       //找到了连续nmemb个空内存块
 80039d2:	8a3a      	ldrh	r2, [r7, #16]
 80039d4:	8a7b      	ldrh	r3, [r7, #18]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d117      	bne.n	8003a0a <__malloc+0xaa>
		{
			for(i=0;i<nmemb;i++)       //标注内存块非空
 80039da:	2300      	movs	r3, #0
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e00b      	b.n	80039f8 <__malloc+0x98>
			{
				mallco_dev.memmapx[offset+i]=nmemb;
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <__malloc+0xc4>)
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	6979      	ldr	r1, [r7, #20]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	440b      	add	r3, r1
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	4413      	add	r3, r2
 80039ee:	8a7a      	ldrh	r2, [r7, #18]
 80039f0:	801a      	strh	r2, [r3, #0]
			for(i=0;i<nmemb;i++)       //标注内存块非空
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	3301      	adds	r3, #1
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	8a7b      	ldrh	r3, [r7, #18]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d3ef      	bcc.n	80039e0 <__malloc+0x80>
			}
            return (offset*MemBlockSize);             //内存块的大小*偏移量=返回偏移地址
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2210      	movs	r2, #16
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	e007      	b.n	8003a1a <__malloc+0xba>
    for(offset=MemTableSize-1;offset>=0;offset--)     //搜索整个内存控制区
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	dacf      	bge.n	80039b6 <__malloc+0x56>
		}
    }
    return 0XFFFFFFFF;//未找到符合分配条件的内存块 
 8003a16:	f04f 33ff 	mov.w	r3, #4294967295
} 
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000098 	.word	0x20000098

08003a28 <__free>:
//释放内存(内部调用)
//offset:内存地址偏移
//返回值:0,释放成功;1,释放失败; 
uint8_t __free(uint32_t offset)
{ 
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
    int i; 
    if(!mallco_dev.memrdyx)//未初始化,先执行初始化
 8003a30:	4b19      	ldr	r3, [pc, #100]	; (8003a98 <__free+0x70>)
 8003a32:	7c1b      	ldrb	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d104      	bne.n	8003a42 <__free+0x1a>
 {
  mallco_dev.init();   
 8003a38:	4b17      	ldr	r3, [pc, #92]	; (8003a98 <__free+0x70>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4798      	blx	r3
        return 1;//未初始化 
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e026      	b.n	8003a90 <__free+0x68>
    } 
    if(offset<MemSize)                              //偏移必须发生在内存池内.
 8003a42:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d220      	bcs.n	8003a8e <__free+0x66>
    { 
        int index=offset/MemBlockSize;       //偏移所在内存块号码
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
        int nmemb=mallco_dev.memmapx[index];     //内存块数量
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <__free+0x70>)
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]
        for(i=0;i<nmemb;i++)        //内存块清零
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	e00b      	b.n	8003a82 <__free+0x5a>
        { 
            mallco_dev.memmapx[index+i]=0; 
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <__free+0x70>)
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	6939      	ldr	r1, [r7, #16]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	440b      	add	r3, r1
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	2200      	movs	r2, #0
 8003a7a:	801a      	strh	r2, [r3, #0]
        for(i=0;i<nmemb;i++)        //内存块清零
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	dbef      	blt.n	8003a6a <__free+0x42>
        } 
        return 0; 
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <__free+0x68>
    }
    else
    {
    	return 2;//偏移超区了.
 8003a8e:	2302      	movs	r3, #2
    }
} 
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000098 	.word	0x20000098

08003a9c <cos_free>:
//释放内存(外部调用)
//ptr:内存首地址
void cos_free(void *ptr)
{ 
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
    uint32_t offset;
    if(ptr==NULL)return;  //地址为0. 
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <cos_free+0x20>
    offset=(uint32_t)ptr-(uint32_t)mallco_dev.membasex;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <cos_free+0x28>)
 8003aae:	6892      	ldr	r2, [r2, #8]
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
    __free(offset);    //释放内存
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f7ff ffb7 	bl	8003a28 <__free>
 8003aba:	e000      	b.n	8003abe <cos_free+0x22>
    if(ptr==NULL)return;  //地址为0. 
 8003abc:	bf00      	nop
} 
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000098 	.word	0x20000098

08003ac8 <cos_malloc>:
//分配内存(外部调用)
//size:内存大小(字节)
//返回值:分配到的内存首地址.
void *cos_malloc(uint32_t size)
{ 
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	uint32_t offset;
	offset=__malloc(size);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff45 	bl	8003960 <__malloc>
 8003ad6:	60f8      	str	r0, [r7, #12]
    if(offset==0XFFFFFFFF)return NULL; 
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d101      	bne.n	8003ae4 <cos_malloc+0x1c>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e004      	b.n	8003aee <cos_malloc+0x26>
    else
    {
    	return (void*)((uint32_t)mallco_dev.membasex+offset);
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <cos_malloc+0x30>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
    }
} 
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000098 	.word	0x20000098

08003afc <DCMotor_Init>:
 * @retval:CarOS error code. Please check 'debug' instruction. More detail of error code is in
 *     'CarOS/debug/c_debug.h' and 'CarOS/debug/c_debug.c' documents.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void DCMotor_Init( DCMotor *Motor,const char *Name,AngVelocity_t MaxAngVelocity,uint8_t RotateDirectionReverse,uint32_t PWMCounterPeriod)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	6178      	str	r0, [r7, #20]
 8003b04:	6139      	str	r1, [r7, #16]
 8003b06:	ed87 0a03 	vstr	s0, [r7, #12]
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	72fb      	strb	r3, [r7, #11]
	if(Motor==NULL)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <DCMotor_Init+0x2c>
	{
		COS_Logf(err,"passing null dc motor pointer to function, function exit.");
 8003b16:	4b31      	ldr	r3, [pc, #196]	; (8003bdc <DCMotor_Init+0xe0>)
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	2233      	movs	r2, #51	; 0x33
 8003b1e:	4930      	ldr	r1, [pc, #192]	; (8003be0 <DCMotor_Init+0xe4>)
 8003b20:	4830      	ldr	r0, [pc, #192]	; (8003be4 <DCMotor_Init+0xe8>)
 8003b22:	f7ff fdc9 	bl	80036b8 <_Log_Write>
		return ;
 8003b26:	e055      	b.n	8003bd4 <DCMotor_Init+0xd8>
	}

	/* check whether name is legal */
	if(!(((*(Name)>='a')&&(*(Name)<='z'))||((*(Name)>='A')&&(*(Name)<='Z'))))
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b60      	cmp	r3, #96	; 0x60
 8003b2e:	d903      	bls.n	8003b38 <DCMotor_Init+0x3c>
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b7a      	cmp	r3, #122	; 0x7a
 8003b36:	d913      	bls.n	8003b60 <DCMotor_Init+0x64>
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d903      	bls.n	8003b48 <DCMotor_Init+0x4c>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b5a      	cmp	r3, #90	; 0x5a
 8003b46:	d90b      	bls.n	8003b60 <DCMotor_Init+0x64>
	{
		COS_Logf(notice,"motor has illegal name, now rename it \"Nameless Motor\"");
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <DCMotor_Init+0xec>)
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	2305      	movs	r3, #5
 8003b4e:	223a      	movs	r2, #58	; 0x3a
 8003b50:	4923      	ldr	r1, [pc, #140]	; (8003be0 <DCMotor_Init+0xe4>)
 8003b52:	4824      	ldr	r0, [pc, #144]	; (8003be4 <DCMotor_Init+0xe8>)
 8003b54:	f7ff fdb0 	bl	80036b8 <_Log_Write>
		Motor->Name = "Nameless Motor";
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4a24      	ldr	r2, [pc, #144]	; (8003bec <DCMotor_Init+0xf0>)
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e002      	b.n	8003b66 <DCMotor_Init+0x6a>
	}
	else
	{
		Motor->Name = Name;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	601a      	str	r2, [r3, #0]
	}
	COS_assert(MaxAngVelocity,warning,"max speed of %s is zero.",Motor->Name);
 8003b66:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b72:	d10a      	bne.n	8003b8a <DCMotor_Init+0x8e>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <DCMotor_Init+0xf4>)
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2304      	movs	r3, #4
 8003b80:	2241      	movs	r2, #65	; 0x41
 8003b82:	4917      	ldr	r1, [pc, #92]	; (8003be0 <DCMotor_Init+0xe4>)
 8003b84:	4817      	ldr	r0, [pc, #92]	; (8003be4 <DCMotor_Init+0xe8>)
 8003b86:	f7ff fd97 	bl	80036b8 <_Log_Write>
	Motor->MaxVelocity = MaxAngVelocity;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	61da      	str	r2, [r3, #28]

	Motor->RotateDirectionReverse = RotateDirectionReverse;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	7afa      	ldrb	r2, [r7, #11]
 8003b94:	f883 2020 	strb.w	r2, [r3, #32]

	Motor->PWMCounterPeriod = PWMCounterPeriod;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30

	/* Set all Velocity related variables to zero, in avoid of unspecified */
	Motor->AdjustedVelocity = 0;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
	Motor->CurrentVelocity = 0;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
	Motor->TargetVelocity = 0;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	60da      	str	r2, [r3, #12]

	Motor->EncoderEnable = 0;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	COS_Logf(info,"%s initialization done.",Motor->Name);
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <DCMotor_Init+0xf8>)
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2306      	movs	r3, #6
 8003bca:	224f      	movs	r2, #79	; 0x4f
 8003bcc:	4904      	ldr	r1, [pc, #16]	; (8003be0 <DCMotor_Init+0xe4>)
 8003bce:	4805      	ldr	r0, [pc, #20]	; (8003be4 <DCMotor_Init+0xe8>)
 8003bd0:	f7ff fd72 	bl	80036b8 <_Log_Write>
}
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	080107cc 	.word	0x080107cc
 8003be0:	08010dd4 	.word	0x08010dd4
 8003be4:	080107a4 	.word	0x080107a4
 8003be8:	08010808 	.word	0x08010808
 8003bec:	08010840 	.word	0x08010840
 8003bf0:	08010850 	.word	0x08010850
 8003bf4:	0801086c 	.word	0x0801086c

08003bf8 <DCMotor_SetVelocity>:
 * @retval:CarOS error code. Please check 'debug' instruction. More detail of error code is in
 *     'CarOS/debug/c_debug.h' and 'CarOS/debug/c_debug.c' documents.
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void DCMotor_SetVelocity(DCMotor* Motor, AngVelocity_t VelocityVal)
{
 8003bf8:	b590      	push	{r4, r7, lr}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af04      	add	r7, sp, #16
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	ed87 0a00 	vstr	s0, [r7]
	/* check whether variables is correctly passing to this function */
	if(Motor==NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d108      	bne.n	8003c1c <DCMotor_SetVelocity+0x24>
	{
		COS_Logf(err,"passing null dc motor pointer to function, function exit.");
 8003c0a:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <DCMotor_SetVelocity+0x9c>)
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	2303      	movs	r3, #3
 8003c10:	227c      	movs	r2, #124	; 0x7c
 8003c12:	4921      	ldr	r1, [pc, #132]	; (8003c98 <DCMotor_SetVelocity+0xa0>)
 8003c14:	4821      	ldr	r0, [pc, #132]	; (8003c9c <DCMotor_SetVelocity+0xa4>)
 8003c16:	f7ff fd4f 	bl	80036b8 <_Log_Write>
		return ;
 8003c1a:	e038      	b.n	8003c8e <DCMotor_SetVelocity+0x96>
	}

	/* constrain speed value */
	if(VelocityVal>Motor->MaxVelocity)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003c22:	ed97 7a00 	vldr	s14, [r7]
 8003c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2e:	dd04      	ble.n	8003c3a <DCMotor_SetVelocity+0x42>
	{
		Motor->TargetVelocity = Motor->MaxVelocity;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69da      	ldr	r2, [r3, #28]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	60da      	str	r2, [r3, #12]
 8003c38:	e017      	b.n	8003c6a <DCMotor_SetVelocity+0x72>
	}
	else if(VelocityVal<(-Motor->MaxVelocity))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003c40:	eef1 7a67 	vneg.f32	s15, s15
 8003c44:	ed97 7a00 	vldr	s14, [r7]
 8003c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	d508      	bpl.n	8003c64 <DCMotor_SetVelocity+0x6c>
	{
		Motor->TargetVelocity = -Motor->MaxVelocity;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	edd3 7a07 	vldr	s15, [r3, #28]
 8003c58:	eef1 7a67 	vneg.f32	s15, s15
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	edc3 7a03 	vstr	s15, [r3, #12]
 8003c62:	e002      	b.n	8003c6a <DCMotor_SetVelocity+0x72>
	}
	else
	{
		Motor->TargetVelocity = VelocityVal;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	60da      	str	r2, [r3, #12]
	}
	COS_Logf(debug,"%s:set speed to %f",Motor->Name, VelocityVal);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681c      	ldr	r4, [r3, #0]
 8003c6e:	6838      	ldr	r0, [r7, #0]
 8003c70:	f7fc fc7a 	bl	8000568 <__aeabi_f2d>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c7c:	9401      	str	r4, [sp, #4]
 8003c7e:	4b08      	ldr	r3, [pc, #32]	; (8003ca0 <DCMotor_SetVelocity+0xa8>)
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	2307      	movs	r3, #7
 8003c84:	228d      	movs	r2, #141	; 0x8d
 8003c86:	4904      	ldr	r1, [pc, #16]	; (8003c98 <DCMotor_SetVelocity+0xa0>)
 8003c88:	4804      	ldr	r0, [pc, #16]	; (8003c9c <DCMotor_SetVelocity+0xa4>)
 8003c8a:	f7ff fd15 	bl	80036b8 <_Log_Write>
}
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd90      	pop	{r4, r7, pc}
 8003c94:	080107cc 	.word	0x080107cc
 8003c98:	08010de4 	.word	0x08010de4
 8003c9c:	080107a4 	.word	0x080107a4
 8003ca0:	080108a8 	.word	0x080108a8

08003ca4 <DCMotor_AdjustVelocity>:
 *     1.Motor:A pointer to 'DCMotor' instance.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void DCMotor_AdjustVelocity(DCMotor* Motor)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	int32_t TimerCounterLoadVal;
	DCMotorVelocityControl(Motor);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f82f 	bl	8003d10 <DCMotorVelocityControl>
	TimerCounterLoadVal = VelocityToTimerCounterPeriod(Motor,(Motor->AdjustedVelocity));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	edd3 6a04 	vldr	s13, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	edd3 7a07 	vldr	s15, [r3, #28]
 8003cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cd6:	ee17 3a90 	vmov	r3, s15
 8003cda:	60fb      	str	r3, [r7, #12]

	if(Motor->RotateDirectionReverse==1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d108      	bne.n	8003cf8 <DCMotor_AdjustVelocity+0x54>
	{
		Motor->DriverSetVelocitycb(Motor->Driver, -TimerCounterLoadVal);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4252      	negs	r2, r2
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	4798      	blx	r3
	}
	else
	{
		Motor->DriverSetVelocitycb(Motor->Driver, TimerCounterLoadVal);
	}
}
 8003cf6:	e006      	b.n	8003d06 <DCMotor_AdjustVelocity+0x62>
		Motor->DriverSetVelocitycb(Motor->Driver, TimerCounterLoadVal);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d00:	68f9      	ldr	r1, [r7, #12]
 8003d02:	4610      	mov	r0, r2
 8003d04:	4798      	blx	r3
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <DCMotorVelocityControl>:
 *     1.Motor:A pointer of 'DCMotor' instance.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
static void DCMotorVelocityControl(DCMotor *Motor)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	6078      	str	r0, [r7, #4]
	/* if this motor doesn't use encoder, then directly set its velocity to
	 * Target Velocity without PID control */
	if(Motor->EncoderEnable==0)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10f      	bne.n	8003d42 <DCMotorVelocityControl+0x32>
	{
		Motor->AdjustedVelocity = Motor->TargetVelocity;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	611a      	str	r2, [r3, #16]
		COS_Logf(debug,"%s adjust velocity without encoder.",Motor->Name);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	4b37      	ldr	r3, [pc, #220]	; (8003e10 <DCMotorVelocityControl+0x100>)
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2307      	movs	r3, #7
 8003d36:	22bc      	movs	r2, #188	; 0xbc
 8003d38:	4936      	ldr	r1, [pc, #216]	; (8003e14 <DCMotorVelocityControl+0x104>)
 8003d3a:	4837      	ldr	r0, [pc, #220]	; (8003e18 <DCMotorVelocityControl+0x108>)
 8003d3c:	f7ff fcbc 	bl	80036b8 <_Log_Write>
		return ;
 8003d40:	e063      	b.n	8003e0a <DCMotorVelocityControl+0xfa>
	}

	/* update encoder count number of encoder model, actually read compare counts of timer */
	EncoderUpdate((&(Motor->Encoder)));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3324      	adds	r3, #36	; 0x24
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fb5e 	bl	8004408 <EncoderUpdate>

	/* velocity control algorithm will calculate a proper value and store it in DCMotor model */
	Motor->CurrentVelocity = (AngVelocity_t)
			                 (((AngVelocity_t)Motor->Encoder.CurrentCount)*6.2831853f)/
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Motor->CurrentVelocity = (AngVelocity_t)
 8003d5a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003e1c <DCMotorVelocityControl+0x10c>
 8003d5e:	ee67 6a87 	vmul.f32	s13, s15, s14
						     (((AngVelocity_t)Motor->Encoder.PulsePerRound)*
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
	                         ((AngVelocity_t)Motor->Encoder.Interval/1000));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d72:	ee07 3a90 	vmov	s15, r3
 8003d76:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8003d7a:	eddf 5a29 	vldr	s11, [pc, #164]	; 8003e20 <DCMotorVelocityControl+0x110>
 8003d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
						     (((AngVelocity_t)Motor->Encoder.PulsePerRound)*
 8003d82:	ee27 7a27 	vmul.f32	s14, s14, s15
			                 (((AngVelocity_t)Motor->Encoder.CurrentCount)*6.2831853f)/
 8003d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
	Motor->CurrentVelocity = (AngVelocity_t)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	edc3 7a02 	vstr	s15, [r3, #8]

	Motor->ControllerUpdate(Motor->VelocityController, Motor->TargetVelocity, Motor->CurrentVelocity);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6851      	ldr	r1, [r2, #4]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	edd2 7a03 	vldr	s15, [r2, #12]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	ed92 7a02 	vldr	s14, [r2, #8]
 8003da4:	eef0 0a47 	vmov.f32	s1, s14
 8003da8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dac:	4608      	mov	r0, r1
 8003dae:	4798      	blx	r3
	Motor->ControllerGetOutVal(Motor->VelocityController, &Motor->AdjustedVelocity);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6850      	ldr	r0, [r2, #4]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	3210      	adds	r2, #16
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4798      	blx	r3

	/* constrain the value of velocity */
	if(Motor->AdjustedVelocity>Motor->MaxVelocity)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	ed93 7a04 	vldr	s14, [r3, #16]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	edd3 7a07 	vldr	s15, [r3, #28]
 8003dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dd4:	dd04      	ble.n	8003de0 <DCMotorVelocityControl+0xd0>
	{
		Motor->AdjustedVelocity=Motor->MaxVelocity;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	611a      	str	r2, [r3, #16]
 8003dde:	e014      	b.n	8003e0a <DCMotorVelocityControl+0xfa>
	}
	else if(Motor->AdjustedVelocity<(-Motor->MaxVelocity))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	ed93 7a04 	vldr	s14, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	edd3 7a07 	vldr	s15, [r3, #28]
 8003dec:	eef1 7a67 	vneg.f32	s15, s15
 8003df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df8:	d507      	bpl.n	8003e0a <DCMotorVelocityControl+0xfa>
	{
		Motor->AdjustedVelocity=-Motor->MaxVelocity;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e00:	eef1 7a67 	vneg.f32	s15, s15
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	edc3 7a04 	vstr	s15, [r3, #16]
	}

}
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	080108bc 	.word	0x080108bc
 8003e14:	08010df8 	.word	0x08010df8
 8003e18:	080107a4 	.word	0x080107a4
 8003e1c:	40c90fdb 	.word	0x40c90fdb
 8003e20:	447a0000 	.word	0x447a0000

08003e24 <DCMotor_AddPID>:
 *     4.Kd:differential parameter of PID model.
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void DCMotor_AddPID(DCMotor *Motor, float Kp, float Ki, float Kd)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e30:	edc7 0a01 	vstr	s1, [r7, #4]
 8003e34:	ed87 1a00 	vstr	s2, [r7]
	PID_t *NewPID = (PID_t*)cos_malloc(sizeof(PID_t));
 8003e38:	2028      	movs	r0, #40	; 0x28
 8003e3a:	f7ff fe45 	bl	8003ac8 <cos_malloc>
 8003e3e:	6178      	str	r0, [r7, #20]

	if(NewPID==NULL)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <DCMotor_AddPID+0x3a>
	{
		COS_Logf(err,"%s add PID velocity controller failed, please check memory size.",Motor->Name);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	4b14      	ldr	r3, [pc, #80]	; (8003ea0 <DCMotor_AddPID+0x7c>)
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	2303      	movs	r3, #3
 8003e52:	22ea      	movs	r2, #234	; 0xea
 8003e54:	4913      	ldr	r1, [pc, #76]	; (8003ea4 <DCMotor_AddPID+0x80>)
 8003e56:	4814      	ldr	r0, [pc, #80]	; (8003ea8 <DCMotor_AddPID+0x84>)
 8003e58:	f7ff fc2e 	bl	80036b8 <_Log_Write>
		return ;
 8003e5c:	e01c      	b.n	8003e98 <DCMotor_AddPID+0x74>
	}

	Motor->VelocityController = NewPID;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	605a      	str	r2, [r3, #4]


	PID_Init(NewPID, Kp, Ki, Kd);
 8003e64:	ed97 1a00 	vldr	s2, [r7]
 8003e68:	edd7 0a01 	vldr	s1, [r7, #4]
 8003e6c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003e70:	6978      	ldr	r0, [r7, #20]
 8003e72:	f000 f87b 	bl	8003f6c <PID_Init>
	Motor->ControllerUpdate = PID_Update;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a0c      	ldr	r2, [pc, #48]	; (8003eac <DCMotor_AddPID+0x88>)
 8003e7a:	615a      	str	r2, [r3, #20]
	Motor->ControllerGetOutVal = PID_GetOutVal;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4a0c      	ldr	r2, [pc, #48]	; (8003eb0 <DCMotor_AddPID+0x8c>)
 8003e80:	619a      	str	r2, [r3, #24]
	COS_Logf(info,"%s adding PID velocity controller succeed.",Motor->Name);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <DCMotor_AddPID+0x90>)
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2306      	movs	r3, #6
 8003e8e:	22f4      	movs	r2, #244	; 0xf4
 8003e90:	4904      	ldr	r1, [pc, #16]	; (8003ea4 <DCMotor_AddPID+0x80>)
 8003e92:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <DCMotor_AddPID+0x84>)
 8003e94:	f7ff fc10 	bl	80036b8 <_Log_Write>
}
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	080108e0 	.word	0x080108e0
 8003ea4:	08010e10 	.word	0x08010e10
 8003ea8:	080107a4 	.word	0x080107a4
 8003eac:	08004041 	.word	0x08004041
 8003eb0:	080040ed 	.word	0x080040ed
 8003eb4:	08010924 	.word	0x08010924

08003eb8 <DCMotor_AddEncoder>:
 *     4.Interval:the time period of reading encoder value. It's significant to the velocity calculation.
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void DCMotor_AddEncoder(DCMotor *Motor, TIM_HandleTypeDef *htim, uint16_t PulsePerRound, uint16_t Interval)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	80fb      	strh	r3, [r7, #6]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	80bb      	strh	r3, [r7, #4]
	if(Motor==NULL)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d109      	bne.n	8003ee8 <DCMotor_AddEncoder+0x30>
	{
		COS_Logf(err,"add encoder failed:passing null motor.");
 8003ed4:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <DCMotor_AddEncoder+0x9c>)
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2303      	movs	r3, #3
 8003eda:	f44f 7283 	mov.w	r2, #262	; 0x106
 8003ede:	491e      	ldr	r1, [pc, #120]	; (8003f58 <DCMotor_AddEncoder+0xa0>)
 8003ee0:	481e      	ldr	r0, [pc, #120]	; (8003f5c <DCMotor_AddEncoder+0xa4>)
 8003ee2:	f7ff fbe9 	bl	80036b8 <_Log_Write>
		return ;
 8003ee6:	e032      	b.n	8003f4e <DCMotor_AddEncoder+0x96>
	}

	COS_assert(htim,warning,"passing null timer when add encoder.");
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d108      	bne.n	8003f00 <DCMotor_AddEncoder+0x48>
 8003eee:	4b1c      	ldr	r3, [pc, #112]	; (8003f60 <DCMotor_AddEncoder+0xa8>)
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2304      	movs	r3, #4
 8003ef4:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8003ef8:	4917      	ldr	r1, [pc, #92]	; (8003f58 <DCMotor_AddEncoder+0xa0>)
 8003efa:	4818      	ldr	r0, [pc, #96]	; (8003f5c <DCMotor_AddEncoder+0xa4>)
 8003efc:	f7ff fbdc 	bl	80036b8 <_Log_Write>

	/* See whether the interval used to calculate speed isn't set to correct value */
	COS_assert(Interval,warning,"encoder interval of is zero.");
 8003f00:	88bb      	ldrh	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d108      	bne.n	8003f18 <DCMotor_AddEncoder+0x60>
 8003f06:	4b17      	ldr	r3, [pc, #92]	; (8003f64 <DCMotor_AddEncoder+0xac>)
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	f240 120d 	movw	r2, #269	; 0x10d
 8003f10:	4911      	ldr	r1, [pc, #68]	; (8003f58 <DCMotor_AddEncoder+0xa0>)
 8003f12:	4812      	ldr	r0, [pc, #72]	; (8003f5c <DCMotor_AddEncoder+0xa4>)
 8003f14:	f7ff fbd0 	bl	80036b8 <_Log_Write>

	/* See whether quantity of pulses per round is correctly set */
	COS_assert(PulsePerRound,warning,"pulse-per-round of encoder is zero.",Motor->Name);
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <DCMotor_AddEncoder+0x7e>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <DCMotor_AddEncoder+0xb0>)
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2304      	movs	r3, #4
 8003f2a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003f2e:	490a      	ldr	r1, [pc, #40]	; (8003f58 <DCMotor_AddEncoder+0xa0>)
 8003f30:	480a      	ldr	r0, [pc, #40]	; (8003f5c <DCMotor_AddEncoder+0xa4>)
 8003f32:	f7ff fbc1 	bl	80036b8 <_Log_Write>

	EncoderInit(&Motor->Encoder, htim, PulsePerRound, Interval);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003f3c:	88bb      	ldrh	r3, [r7, #4]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	f000 fa42 	bl	80043ca <EncoderInit>
	Motor->EncoderEnable = 1;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

}
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	08010950 	.word	0x08010950
 8003f58:	08010e20 	.word	0x08010e20
 8003f5c:	080107a4 	.word	0x080107a4
 8003f60:	08010978 	.word	0x08010978
 8003f64:	080109a0 	.word	0x080109a0
 8003f68:	080109c0 	.word	0x080109c0

08003f6c <PID_Init>:
 * @params:
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void PID_Init(PID_t *PID_instance, float Kp, float Ki, float Kd)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f78:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f7c:	ed87 1a00 	vstr	s2, [r7]
	/* PID speed controller */
	COS_assert(Kp,warning,"found Kp=0 when initialize PID model.");
 8003f80:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8c:	d107      	bne.n	8003f9e <PID_Init+0x32>
 8003f8e:	4b27      	ldr	r3, [pc, #156]	; (800402c <PID_Init+0xc0>)
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	2304      	movs	r3, #4
 8003f94:	2224      	movs	r2, #36	; 0x24
 8003f96:	4926      	ldr	r1, [pc, #152]	; (8004030 <PID_Init+0xc4>)
 8003f98:	4826      	ldr	r0, [pc, #152]	; (8004034 <PID_Init+0xc8>)
 8003f9a:	f7ff fb8d 	bl	80036b8 <_Log_Write>
	COS_assert(Ki,warning,"found Ki=0 when initialize PID model.");
 8003f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003faa:	d107      	bne.n	8003fbc <PID_Init+0x50>
 8003fac:	4b22      	ldr	r3, [pc, #136]	; (8004038 <PID_Init+0xcc>)
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	2225      	movs	r2, #37	; 0x25
 8003fb4:	491e      	ldr	r1, [pc, #120]	; (8004030 <PID_Init+0xc4>)
 8003fb6:	481f      	ldr	r0, [pc, #124]	; (8004034 <PID_Init+0xc8>)
 8003fb8:	f7ff fb7e 	bl	80036b8 <_Log_Write>
	COS_assert(Kd,warning,"found Kd=0 when initialize PID model.");
 8003fbc:	edd7 7a00 	vldr	s15, [r7]
 8003fc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc8:	d107      	bne.n	8003fda <PID_Init+0x6e>
 8003fca:	4b1c      	ldr	r3, [pc, #112]	; (800403c <PID_Init+0xd0>)
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2304      	movs	r3, #4
 8003fd0:	2226      	movs	r2, #38	; 0x26
 8003fd2:	4917      	ldr	r1, [pc, #92]	; (8004030 <PID_Init+0xc4>)
 8003fd4:	4817      	ldr	r0, [pc, #92]	; (8004034 <PID_Init+0xc8>)
 8003fd6:	f7ff fb6f 	bl	80036b8 <_Log_Write>

	PID_instance->Identifier = CONTROLLER_PID;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]

	PID_instance->BeforeLastVelocityBias = 0;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	619a      	str	r2, [r3, #24]
	PID_instance->CurrentVelocityBias = 0;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	611a      	str	r2, [r3, #16]
	PID_instance->LastVelocityBias = 0;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	615a      	str	r2, [r3, #20]

	PID_instance->FeedBack = 0;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f04f 0200 	mov.w	r2, #0
 8003ffe:	625a      	str	r2, [r3, #36]	; 0x24
	PID_instance->InputVal = 0;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	61da      	str	r2, [r3, #28]
	PID_instance->OutputVal = 0;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	621a      	str	r2, [r3, #32]

	PID_instance->Kp = Kp;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	605a      	str	r2, [r3, #4]
	PID_instance->Ki = Ki;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	609a      	str	r2, [r3, #8]
	PID_instance->Kd = Kd;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	60da      	str	r2, [r3, #12]
}
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	08010a1c 	.word	0x08010a1c
 8004030:	08010e34 	.word	0x08010e34
 8004034:	080109e4 	.word	0x080109e4
 8004038:	08010a44 	.word	0x08010a44
 800403c:	08010a6c 	.word	0x08010a6c

08004040 <PID_Update>:
 * @params:
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void PID_Update(void *PID_instance, AngVelocity_t Input, AngVelocity_t Feedback)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	ed87 0a02 	vstr	s0, [r7, #8]
 800404c:	edc7 0a01 	vstr	s1, [r7, #4]
	PID_t *PID_Temp = (PID_t*)PID_instance;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	617b      	str	r3, [r7, #20]
	PID_Temp->CurrentVelocityBias = Input - Feedback;
 8004054:	ed97 7a02 	vldr	s14, [r7, #8]
 8004058:	edd7 7a01 	vldr	s15, [r7, #4]
 800405c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	edc3 7a04 	vstr	s15, [r3, #16]
	PID_Temp->OutputVal += ((PID_Temp->Kp) *(PID_Temp->CurrentVelocityBias-PID_Temp->LastVelocityBias))+
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	ed93 7a08 	vldr	s14, [r3, #32]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	edd3 6a01 	vldr	s13, [r3, #4]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	ed93 6a04 	vldr	s12, [r3, #16]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	edd3 7a05 	vldr	s15, [r3, #20]
 800407e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004082:	ee66 6aa7 	vmul.f32	s13, s13, s15
                           ((PID_Temp->Ki) *(PID_Temp->CurrentVelocityBias))+
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	ed93 6a02 	vldr	s12, [r3, #8]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004092:	ee66 7a27 	vmul.f32	s15, s12, s15
	PID_Temp->OutputVal += ((PID_Temp->Kp) *(PID_Temp->CurrentVelocityBias-PID_Temp->LastVelocityBias))+
 8004096:	ee76 6aa7 	vadd.f32	s13, s13, s15
                           ((PID_Temp->Kd) *(PID_Temp->CurrentVelocityBias-2*PID_Temp->LastVelocityBias+PID_Temp->BeforeLastVelocityBias));
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	ed93 6a03 	vldr	s12, [r3, #12]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	edd3 5a04 	vldr	s11, [r3, #16]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	edd3 7a05 	vldr	s15, [r3, #20]
 80040ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040b0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80040ba:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80040be:	ee66 7a27 	vmul.f32	s15, s12, s15
                           ((PID_Temp->Ki) *(PID_Temp->CurrentVelocityBias))+
 80040c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
	PID_Temp->OutputVal += ((PID_Temp->Kp) *(PID_Temp->CurrentVelocityBias-PID_Temp->LastVelocityBias))+
 80040c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	edc3 7a08 	vstr	s15, [r3, #32]
	PID_Temp->BeforeLastVelocityBias = PID_Temp->LastVelocityBias;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	619a      	str	r2, [r3, #24]
	PID_Temp->LastVelocityBias = PID_Temp->CurrentVelocityBias;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	615a      	str	r2, [r3, #20]
}
 80040e0:	bf00      	nop
 80040e2:	371c      	adds	r7, #28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <PID_GetOutVal>:
 * @params:
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void PID_GetOutVal(void *PID_instance, AngVelocity_t *OutputDst)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
	*OutputDst = ((PID_t*)PID_instance)->OutputVal;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1a      	ldr	r2, [r3, #32]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	601a      	str	r2, [r3, #0]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <DCMotor_AddL298N>:
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
#if USE_HAL_LIB
void DCMotor_AddL298N(DCMotor *Motor, GPIO_TypeDef *Port1, uint16_t Pin1, GPIO_TypeDef *Port2, uint16_t Pin2, TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af04      	add	r7, sp, #16
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	80fb      	strh	r3, [r7, #6]
	L298N *NewL298N = (L298N*)cos_malloc(sizeof(L298N));
 800411c:	2018      	movs	r0, #24
 800411e:	f7ff fcd3 	bl	8003ac8 <cos_malloc>
 8004122:	6178      	str	r0, [r7, #20]
	if(NewL298N) // allocate memory successfully
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d02a      	beq.n	8004180 <DCMotor_AddL298N+0x74>
	{
		L298N_Init(NewL298N, Port1, Pin1, Port2, Pin2, htim, Channel);
 800412a:	88fa      	ldrh	r2, [r7, #6]
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	9302      	str	r3, [sp, #8]
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	8c3b      	ldrh	r3, [r7, #32]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	6978      	ldr	r0, [r7, #20]
 800413e:	f000 f83b 	bl	80041b8 <L298N_Init>

		/* mount L298N instance on motor */
		Motor->Driver = NewL298N;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	635a      	str	r2, [r3, #52]	; 0x34

		/* set velocity application function as L298N's */
		Motor->DriverSetVelocitycb = L298N_SetMotorVelocity;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4a15      	ldr	r2, [pc, #84]	; (80041a0 <DCMotor_AddL298N+0x94>)
 800414c:	639a      	str	r2, [r3, #56]	; 0x38

		/* if the motor doesn't have name, that means the motor has not been initialized yet */
		if(Motor->Name!=NULL)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <DCMotor_AddL298N+0x62>
		{
			COS_Logf(info, "%s has mounted L298N driver.", Motor->Name);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <DCMotor_AddL298N+0x98>)
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	2306      	movs	r3, #6
 8004162:	2233      	movs	r2, #51	; 0x33
 8004164:	4910      	ldr	r1, [pc, #64]	; (80041a8 <DCMotor_AddL298N+0x9c>)
 8004166:	4811      	ldr	r0, [pc, #68]	; (80041ac <DCMotor_AddL298N+0xa0>)
 8004168:	f7ff faa6 	bl	80036b8 <_Log_Write>
	}
	else
	{
		COS_Logf(warning,"%s mount L298N driver fail:stack have no space, check memory module or increase memory size.", Motor->Name);
	}
}
 800416c:	e013      	b.n	8004196 <DCMotor_AddL298N+0x8a>
			COS_Logf(warning, "L298N driver is mounted, but motor hasn't been initialized yet. Make sure initialize motor before mount driver.");
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <DCMotor_AddL298N+0xa4>)
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	2304      	movs	r3, #4
 8004174:	2237      	movs	r2, #55	; 0x37
 8004176:	490c      	ldr	r1, [pc, #48]	; (80041a8 <DCMotor_AddL298N+0x9c>)
 8004178:	480c      	ldr	r0, [pc, #48]	; (80041ac <DCMotor_AddL298N+0xa0>)
 800417a:	f7ff fa9d 	bl	80036b8 <_Log_Write>
}
 800417e:	e00a      	b.n	8004196 <DCMotor_AddL298N+0x8a>
		COS_Logf(warning,"%s mount L298N driver fail:stack have no space, check memory module or increase memory size.", Motor->Name);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <DCMotor_AddL298N+0xa8>)
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	2304      	movs	r3, #4
 800418c:	223c      	movs	r2, #60	; 0x3c
 800418e:	4906      	ldr	r1, [pc, #24]	; (80041a8 <DCMotor_AddL298N+0x9c>)
 8004190:	4806      	ldr	r0, [pc, #24]	; (80041ac <DCMotor_AddL298N+0xa0>)
 8004192:	f7ff fa91 	bl	80036b8 <_Log_Write>
}
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	08004209 	.word	0x08004209
 80041a4:	08010ac8 	.word	0x08010ac8
 80041a8:	08010e40 	.word	0x08010e40
 80041ac:	08010a94 	.word	0x08010a94
 80041b0:	08010ae8 	.word	0x08010ae8
 80041b4:	08010b58 	.word	0x08010b58

080041b8 <L298N_Init>:
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
#if USE_HAL_LIB
void L298N_Init(void* L298N_instance, GPIO_TypeDef *Port1, uint16_t Pin1, GPIO_TypeDef *Port2, uint16_t Pin2, TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	4613      	mov	r3, r2
 80041c6:	80fb      	strh	r3, [r7, #6]
	L298N* pL298N = (L298N*)L298N_instance;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	617b      	str	r3, [r7, #20]
	pL298N->RotationControlGPIOPin1 = Pin1;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	801a      	strh	r2, [r3, #0]
	pL298N->RotationControlGPIOPort1 = Port1;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	605a      	str	r2, [r3, #4]
	pL298N->RotationControlGPIOPin2 = Pin2;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	8c3a      	ldrh	r2, [r7, #32]
 80041dc:	811a      	strh	r2, [r3, #8]
	pL298N->RotationControlGPIOPort2 = Port2;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	60da      	str	r2, [r3, #12]
	pL298N->PWMGeneratingTimer = htim;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041e8:	611a      	str	r2, [r3, #16]
	pL298N->PWMGeneratingTimerChannel = Channel;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ee:	615a      	str	r2, [r3, #20]
	/* firstly start pwm generation, otherwise timer won't generate pwm wave */
	HAL_TIM_PWM_Start(pL298N->PWMGeneratingTimer,pL298N->PWMGeneratingTimerChannel);
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	691a      	ldr	r2, [r3, #16]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f002 fce4 	bl	8006bc8 <HAL_TIM_PWM_Start>
}
 8004200:	bf00      	nop
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <L298N_SetMotorVelocity>:
 *     2.TimerCounterLoadVal:set timer capture/compare register.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void L298N_SetMotorVelocity(void* L298N_instance, int32_t TimerCounterLoadVal)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
	L298N* pL298N = (L298N*)L298N_instance;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60fb      	str	r3, [r7, #12]
#if USE_STM32
#if USE_HAL_LIB
	if(TimerCounterLoadVal==0)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d126      	bne.n	800426a <L298N_SetMotorVelocity+0x62>
	{
		__HAL_TIM_SET_COMPARE(pL298N->PWMGeneratingTimer, pL298N->PWMGeneratingTimerChannel, 2);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <L298N_SetMotorVelocity+0x28>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2202      	movs	r2, #2
 800422c:	635a      	str	r2, [r3, #52]	; 0x34
 800422e:	e018      	b.n	8004262 <L298N_SetMotorVelocity+0x5a>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	2b04      	cmp	r3, #4
 8004236:	d105      	bne.n	8004244 <L298N_SetMotorVelocity+0x3c>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	2302      	movs	r3, #2
 8004240:	6393      	str	r3, [r2, #56]	; 0x38
 8004242:	e00e      	b.n	8004262 <L298N_SetMotorVelocity+0x5a>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	695b      	ldr	r3, [r3, #20]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d105      	bne.n	8004258 <L298N_SetMotorVelocity+0x50>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	2302      	movs	r3, #2
 8004254:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004256:	e004      	b.n	8004262 <L298N_SetMotorVelocity+0x5a>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	2302      	movs	r3, #2
 8004260:	6413      	str	r3, [r2, #64]	; 0x40
		L298N_StopMotor(pL298N);
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f899 	bl	800439a <L298N_StopMotor>

#endif
#elif USE_MSP432

#endif
}
 8004268:	e063      	b.n	8004332 <L298N_SetMotorVelocity+0x12a>
	else if(TimerCounterLoadVal>0)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	dd26      	ble.n	80042be <L298N_SetMotorVelocity+0xb6>
		L298N_SetRotateForward(pL298N);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f862 	bl	800433a <L298N_SetRotateForward>
		__HAL_TIM_SET_COMPARE(pL298N->PWMGeneratingTimer, pL298N->PWMGeneratingTimerChannel, (uint32_t)TimerCounterLoadVal);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d105      	bne.n	800428a <L298N_SetMotorVelocity+0x82>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004288:	e053      	b.n	8004332 <L298N_SetMotorVelocity+0x12a>
		__HAL_TIM_SET_COMPARE(pL298N->PWMGeneratingTimer, pL298N->PWMGeneratingTimerChannel, (uint32_t)TimerCounterLoadVal);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	695b      	ldr	r3, [r3, #20]
 800428e:	2b04      	cmp	r3, #4
 8004290:	d105      	bne.n	800429e <L298N_SetMotorVelocity+0x96>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	6393      	str	r3, [r2, #56]	; 0x38
 800429c:	e049      	b.n	8004332 <L298N_SetMotorVelocity+0x12a>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d105      	bne.n	80042b2 <L298N_SetMotorVelocity+0xaa>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	63d3      	str	r3, [r2, #60]	; 0x3c
 80042b0:	e03f      	b.n	8004332 <L298N_SetMotorVelocity+0x12a>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6413      	str	r3, [r2, #64]	; 0x40
}
 80042bc:	e039      	b.n	8004332 <L298N_SetMotorVelocity+0x12a>
		L298N_SetRotateBackward(pL298N);
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f853 	bl	800436a <L298N_SetRotateBackward>
		__HAL_TIM_SET_COMPARE(pL298N->PWMGeneratingTimer, pL298N->PWMGeneratingTimerChannel, (uint32_t)abs(TimerCounterLoadVal));
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <L298N_SetMotorVelocity+0xd8>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80042d2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80042de:	e028      	b.n	8004332 <L298N_SetMotorVelocity+0x12a>
		__HAL_TIM_SET_COMPARE(pL298N->PWMGeneratingTimer, pL298N->PWMGeneratingTimerChannel, (uint32_t)abs(TimerCounterLoadVal));
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d10a      	bne.n	80042fe <L298N_SetMotorVelocity+0xf6>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80042ee:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	460b      	mov	r3, r1
 80042fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80042fc:	e019      	b.n	8004332 <L298N_SetMotorVelocity+0x12a>
		__HAL_TIM_SET_COMPARE(pL298N->PWMGeneratingTimer, pL298N->PWMGeneratingTimerChannel, (uint32_t)abs(TimerCounterLoadVal));
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b08      	cmp	r3, #8
 8004304:	d10a      	bne.n	800431c <L298N_SetMotorVelocity+0x114>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800430c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	460b      	mov	r3, r1
 8004318:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800431a:	e00a      	b.n	8004332 <L298N_SetMotorVelocity+0x12a>
		__HAL_TIM_SET_COMPARE(pL298N->PWMGeneratingTimer, pL298N->PWMGeneratingTimerChannel, (uint32_t)abs(TimerCounterLoadVal));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8004322:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	460b      	mov	r3, r1
 800432e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8004330:	e7ff      	b.n	8004332 <L298N_SetMotorVelocity+0x12a>
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <L298N_SetRotateForward>:
 *     1.L298N_instance:pointer of struct L298N.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
static void L298N_SetRotateForward(L298N* L298N_instance)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
#if USE_STM32
#if USE_HAL_LIB

		HAL_GPIO_WritePin(L298N_instance->RotationControlGPIOPort1,L298N_instance->RotationControlGPIOPin1,GPIO_PIN_SET);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6858      	ldr	r0, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	4619      	mov	r1, r3
 800434e:	f001 ff39 	bl	80061c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L298N_instance->RotationControlGPIOPort2,L298N_instance->RotationControlGPIOPin2,GPIO_PIN_RESET);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68d8      	ldr	r0, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	891b      	ldrh	r3, [r3, #8]
 800435a:	2200      	movs	r2, #0
 800435c:	4619      	mov	r1, r3
 800435e:	f001 ff31 	bl	80061c4 <HAL_GPIO_WritePin>
#endif
#elif USE_MSP432

#endif

}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <L298N_SetRotateBackward>:
 *     1.L298N_instance:pointer of struct L298N.
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
static void L298N_SetRotateBackward(L298N* L298N_instance)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
#if USE_STM32
#if USE_HAL_LIB
	HAL_GPIO_WritePin(L298N_instance->RotationControlGPIOPort1,L298N_instance->RotationControlGPIOPin1,GPIO_PIN_RESET);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6858      	ldr	r0, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	4619      	mov	r1, r3
 800437e:	f001 ff21 	bl	80061c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L298N_instance->RotationControlGPIOPort2,L298N_instance->RotationControlGPIOPin2,GPIO_PIN_SET);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68d8      	ldr	r0, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	891b      	ldrh	r3, [r3, #8]
 800438a:	2201      	movs	r2, #1
 800438c:	4619      	mov	r1, r3
 800438e:	f001 ff19 	bl	80061c4 <HAL_GPIO_WritePin>
#endif
#elif USE_MSP432

#endif

}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <L298N_StopMotor>:
 *     1.L298N_instance:pointer of L298N instance.
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
static void L298N_StopMotor(L298N *L298N_instance)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
#if USE_STM32
#if USE_HAL_LIB

	HAL_GPIO_WritePin(L298N_instance->RotationControlGPIOPort1,L298N_instance->RotationControlGPIOPin1,GPIO_PIN_RESET);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6858      	ldr	r0, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	4619      	mov	r1, r3
 80043ae:	f001 ff09 	bl	80061c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L298N_instance->RotationControlGPIOPort2,L298N_instance->RotationControlGPIOPin2,GPIO_PIN_RESET);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68d8      	ldr	r0, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	891b      	ldrh	r3, [r3, #8]
 80043ba:	2200      	movs	r2, #0
 80043bc:	4619      	mov	r1, r3
 80043be:	f001 ff01 	bl	80061c4 <HAL_GPIO_WritePin>

#endif
#elif USE_MSP432

#endif
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <EncoderInit>:
 * @retval:none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
#if USE_HAL_LIB
void EncoderInit(Encoder *Enc, TIM_HandleTypeDef *htim, uint16_t PulsePerRound, uint16_t Interval)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	4611      	mov	r1, r2
 80043d6:	461a      	mov	r2, r3
 80043d8:	460b      	mov	r3, r1
 80043da:	80fb      	strh	r3, [r7, #6]
 80043dc:	4613      	mov	r3, r2
 80043de:	80bb      	strh	r3, [r7, #4]
	Enc->PulsePerRound = PulsePerRound;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	80da      	strh	r2, [r3, #6]
	Enc->Interval = Interval;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	88ba      	ldrh	r2, [r7, #4]
 80043ea:	811a      	strh	r2, [r3, #8]
	Enc->htim = htim;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	601a      	str	r2, [r3, #0]
	Enc->CurrentCount = 0;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	809a      	strh	r2, [r3, #4]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80043f8:	2104      	movs	r1, #4
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f002 fd52 	bl	8006ea4 <HAL_TIM_Encoder_Start>
}
 8004400:	bf00      	nop
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <EncoderUpdate>:
 *     1.Enc:pointer of Encoder instance.
 * @retval: none
 * @author: Wang Geng Jie
 *****************************************************************************************************/
void EncoderUpdate(Encoder *Enc)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	/* since STM32 timer max count value is 65535 and the count value will decrease from 65535 if
	 * the wheel rotate counterclockwise and will increase from 0 if wheel rotates clockwise,
	 * type cast the count value to signed short will get negative number when wheel rotates
	 * counterclockwise. Therefore we get negative number and positive number which represent
	 * rotate forward and backward respectively. */
    Enc->CurrentCount = (short)__HAL_TIM_GET_COUNTER(Enc->htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b21a      	sxth	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	809a      	strh	r2, [r3, #4]

    /* clear the count value, otherwise the count number will add up continuously */
	__HAL_TIM_GET_COUNTER(Enc->htim) = 0;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2200      	movs	r2, #0
 8004426:	625a      	str	r2, [r3, #36]	; 0x24
#elif USE_FW_LIB

#elif USE_MSP432

#endif
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <MX_DMA_Init+0x3c>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	4a0b      	ldr	r2, [pc, #44]	; (8004470 <MX_DMA_Init+0x3c>)
 8004444:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004448:	6313      	str	r3, [r2, #48]	; 0x30
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <MX_DMA_Init+0x3c>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8004456:	2200      	movs	r2, #0
 8004458:	2105      	movs	r1, #5
 800445a:	2046      	movs	r0, #70	; 0x46
 800445c:	f001 f963 	bl	8005726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004460:	2046      	movs	r0, #70	; 0x46
 8004462:	f001 f97c 	bl	800575e <HAL_NVIC_EnableIRQ>

}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004484:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4a06      	ldr	r2, [pc, #24]	; (80044a4 <vApplicationGetIdleTaskMemory+0x30>)
 800448a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2280      	movs	r2, #128	; 0x80
 8004490:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	2000992c 	.word	0x2000992c
 80044a4:	200099f0 	.word	0x200099f0

080044a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80044a8:	b5b0      	push	{r4, r5, r7, lr}
 80044aa:	b096      	sub	sp, #88	; 0x58
 80044ac:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <MX_FREERTOS_Init+0x7c>)
 80044b0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80044b4:	461d      	mov	r5, r3
 80044b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80044be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80044c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f004 f9b2 	bl	8008832 <osThreadCreate>
 80044ce:	4603      	mov	r3, r0
 80044d0:	4a15      	ldr	r2, [pc, #84]	; (8004528 <MX_FREERTOS_Init+0x80>)
 80044d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_AdjustSpeed */
  osThreadDef(Task_AdjustSpeed, AdjustSpeed, osPriorityAboveNormal, 0, 512);
 80044d4:	4b15      	ldr	r3, [pc, #84]	; (800452c <MX_FREERTOS_Init+0x84>)
 80044d6:	f107 0420 	add.w	r4, r7, #32
 80044da:	461d      	mov	r5, r3
 80044dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80044e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_AdjustSpeedHandle = osThreadCreate(osThread(Task_AdjustSpeed), NULL);
 80044e8:	f107 0320 	add.w	r3, r7, #32
 80044ec:	2100      	movs	r1, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f004 f99f 	bl	8008832 <osThreadCreate>
 80044f4:	4603      	mov	r3, r0
 80044f6:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <MX_FREERTOS_Init+0x88>)
 80044f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_CarOSioProcess */
  osThreadDef(Task_CarOSioProcess, CarOS_ioProcess, osPriorityIdle, 0, 512);
 80044fa:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <MX_FREERTOS_Init+0x8c>)
 80044fc:	1d3c      	adds	r4, r7, #4
 80044fe:	461d      	mov	r5, r3
 8004500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_CarOSioProcessHandle = osThreadCreate(osThread(Task_CarOSioProcess), NULL);
 800450c:	1d3b      	adds	r3, r7, #4
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f004 f98e 	bl	8008832 <osThreadCreate>
 8004516:	4603      	mov	r3, r0
 8004518:	4a07      	ldr	r2, [pc, #28]	; (8004538 <MX_FREERTOS_Init+0x90>)
 800451a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800451c:	bf00      	nop
 800451e:	3758      	adds	r7, #88	; 0x58
 8004520:	46bd      	mov	sp, r7
 8004522:	bdb0      	pop	{r4, r5, r7, pc}
 8004524:	08010bec 	.word	0x08010bec
 8004528:	20009920 	.word	0x20009920
 800452c:	08010c08 	.word	0x08010c08
 8004530:	20009924 	.word	0x20009924
 8004534:	08010c24 	.word	0x08010c24
 8004538:	20009928 	.word	0x20009928

0800453c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8004544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004548:	f004 f9bf 	bl	80088ca <osDelay>
 800454c:	e7fa      	b.n	8004544 <StartDefaultTask+0x8>
	...

08004550 <AdjustSpeed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AdjustSpeed */
void AdjustSpeed(void const * argument)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AdjustSpeed */
	TickType_t xLastWakeTime;
	/* delay time must equal to Motor.Encoder.Interval */
	const TickType_t xFrequency = 10;
 8004558:	230a      	movs	r3, #10
 800455a:	60fb      	str	r3, [r7, #12]

	xLastWakeTime = xTaskGetTickCount();
 800455c:	f004 fdee 	bl	800913c <xTaskGetTickCount>
 8004560:	4603      	mov	r3, r0
 8004562:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  while(1)
  {
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004564:	f107 0308 	add.w	r3, r7, #8
 8004568:	68f9      	ldr	r1, [r7, #12]
 800456a:	4618      	mov	r0, r3
 800456c:	f004 fc20 	bl	8008db0 <vTaskDelayUntil>

	  Car_AdjustedVelocity(&Car);
 8004570:	4801      	ldr	r0, [pc, #4]	; (8004578 <AdjustSpeed+0x28>)
 8004572:	f7fc ff05 	bl	8001380 <Car_AdjustedVelocity>
	  vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8004576:	e7f5      	b.n	8004564 <AdjustSpeed+0x14>
 8004578:	200002ac 	.word	0x200002ac

0800457c <CarOS_ioProcess>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CarOS_ioProcess */
void CarOS_ioProcess(void const * argument)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CarOS_ioProcess */
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8004584:	2032      	movs	r0, #50	; 0x32
 8004586:	f004 f9a0 	bl	80088ca <osDelay>
    io_Process();
 800458a:	f7fe f889 	bl	80026a0 <io_Process>
    osDelay(50);
 800458e:	e7f9      	b.n	8004584 <CarOS_ioProcess+0x8>

08004590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08c      	sub	sp, #48	; 0x30
 8004594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004596:	f107 031c 	add.w	r3, r7, #28
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	609a      	str	r2, [r3, #8]
 80045a2:	60da      	str	r2, [r3, #12]
 80045a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
 80045aa:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <MX_GPIO_Init+0x134>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4a45      	ldr	r2, [pc, #276]	; (80046c4 <MX_GPIO_Init+0x134>)
 80045b0:	f043 0304 	orr.w	r3, r3, #4
 80045b4:	6313      	str	r3, [r2, #48]	; 0x30
 80045b6:	4b43      	ldr	r3, [pc, #268]	; (80046c4 <MX_GPIO_Init+0x134>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	4b3f      	ldr	r3, [pc, #252]	; (80046c4 <MX_GPIO_Init+0x134>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	4a3e      	ldr	r2, [pc, #248]	; (80046c4 <MX_GPIO_Init+0x134>)
 80045cc:	f043 0320 	orr.w	r3, r3, #32
 80045d0:	6313      	str	r3, [r2, #48]	; 0x30
 80045d2:	4b3c      	ldr	r3, [pc, #240]	; (80046c4 <MX_GPIO_Init+0x134>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80045de:	2300      	movs	r3, #0
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	4b38      	ldr	r3, [pc, #224]	; (80046c4 <MX_GPIO_Init+0x134>)
 80045e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e6:	4a37      	ldr	r2, [pc, #220]	; (80046c4 <MX_GPIO_Init+0x134>)
 80045e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ec:	6313      	str	r3, [r2, #48]	; 0x30
 80045ee:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <MX_GPIO_Init+0x134>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	4b31      	ldr	r3, [pc, #196]	; (80046c4 <MX_GPIO_Init+0x134>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4a30      	ldr	r2, [pc, #192]	; (80046c4 <MX_GPIO_Init+0x134>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b2e      	ldr	r3, [pc, #184]	; (80046c4 <MX_GPIO_Init+0x134>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	60bb      	str	r3, [r7, #8]
 800461a:	4b2a      	ldr	r3, [pc, #168]	; (80046c4 <MX_GPIO_Init+0x134>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a29      	ldr	r2, [pc, #164]	; (80046c4 <MX_GPIO_Init+0x134>)
 8004620:	f043 0310 	orr.w	r3, r3, #16
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b27      	ldr	r3, [pc, #156]	; (80046c4 <MX_GPIO_Init+0x134>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0310 	and.w	r3, r3, #16
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <MX_GPIO_Init+0x134>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <MX_GPIO_Init+0x134>)
 800463c:	f043 0308 	orr.w	r3, r3, #8
 8004640:	6313      	str	r3, [r2, #48]	; 0x30
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <MX_GPIO_Init+0x134>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <MX_GPIO_Init+0x134>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <MX_GPIO_Init+0x134>)
 8004658:	f043 0302 	orr.w	r3, r3, #2
 800465c:	6313      	str	r3, [r2, #48]	; 0x30
 800465e:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <MX_GPIO_Init+0x134>)
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 800466a:	2201      	movs	r2, #1
 800466c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004670:	4815      	ldr	r0, [pc, #84]	; (80046c8 <MX_GPIO_Init+0x138>)
 8004672:	f001 fda7 	bl	80061c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LFMotor_RotateDirectionCtrl1_Pin|LFMotor_RotateDirectionCtrl2_Pin|LRMotor_RotateDirectionCtrl1_Pin|LRMotor_RotateDirectionCtrl2_Pin
 8004676:	2200      	movs	r2, #0
 8004678:	21ff      	movs	r1, #255	; 0xff
 800467a:	4814      	ldr	r0, [pc, #80]	; (80046cc <MX_GPIO_Init+0x13c>)
 800467c:	f001 fda2 	bl	80061c4 <HAL_GPIO_WritePin>
                          |RFMotor_RotateDirectionCtrl1_Pin|RFMotor_RotateDirectionCtrl2_Pin|RRMotor_RotateDirectionCtrl1_Pin|RRMotor_RotateDirectionCtrl2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8004680:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004686:	2301      	movs	r3, #1
 8004688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468a:	2300      	movs	r3, #0
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800468e:	2300      	movs	r3, #0
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004692:	f107 031c 	add.w	r3, r7, #28
 8004696:	4619      	mov	r1, r3
 8004698:	480b      	ldr	r0, [pc, #44]	; (80046c8 <MX_GPIO_Init+0x138>)
 800469a:	f001 fbf7 	bl	8005e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LFMotor_RotateDirectionCtrl1_Pin|LFMotor_RotateDirectionCtrl2_Pin|LRMotor_RotateDirectionCtrl1_Pin|LRMotor_RotateDirectionCtrl2_Pin
 800469e:	23ff      	movs	r3, #255	; 0xff
 80046a0:	61fb      	str	r3, [r7, #28]
                          |RFMotor_RotateDirectionCtrl1_Pin|RFMotor_RotateDirectionCtrl2_Pin|RRMotor_RotateDirectionCtrl1_Pin|RRMotor_RotateDirectionCtrl2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046a2:	2301      	movs	r3, #1
 80046a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80046a6:	2302      	movs	r3, #2
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046aa:	2300      	movs	r3, #0
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ae:	f107 031c 	add.w	r3, r7, #28
 80046b2:	4619      	mov	r1, r3
 80046b4:	4805      	ldr	r0, [pc, #20]	; (80046cc <MX_GPIO_Init+0x13c>)
 80046b6:	f001 fbe9 	bl	8005e8c <HAL_GPIO_Init>

}
 80046ba:	bf00      	nop
 80046bc:	3730      	adds	r7, #48	; 0x30
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40021400 	.word	0x40021400
 80046cc:	40020800 	.word	0x40020800

080046d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046d6:	f000 fed9 	bl	800548c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046da:	f000 f8eb 	bl	80048b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046de:	f7ff ff57 	bl	8004590 <MX_GPIO_Init>
  MX_DMA_Init();
 80046e2:	f7ff fea7 	bl	8004434 <MX_DMA_Init>
  MX_TIM1_Init();
 80046e6:	f000 faa3 	bl	8004c30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80046ea:	f000 fdf9 	bl	80052e0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80046ee:	f000 fb47 	bl	8004d80 <MX_TIM2_Init>
  MX_TIM3_Init();
 80046f2:	f000 fb99 	bl	8004e28 <MX_TIM3_Init>
  MX_TIM4_Init();
 80046f6:	f000 fbeb 	bl	8004ed0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80046fa:	f000 fc3d 	bl	8004f78 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  CarKernelInit();
 80046fe:	f7fd fa79 	bl	8001bf4 <CarKernelInit>

  DCMotor_Init(&LeftFrontMotor, "Left Front Motor", 32, 0, 16800);
 8004702:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8004706:	2200      	movs	r2, #0
 8004708:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8004864 <main+0x194>
 800470c:	4956      	ldr	r1, [pc, #344]	; (8004868 <main+0x198>)
 800470e:	4857      	ldr	r0, [pc, #348]	; (800486c <main+0x19c>)
 8004710:	f7ff f9f4 	bl	8003afc <DCMotor_Init>
  DCMotor_AddEncoder(&LeftFrontMotor, &htim2, 1560, 10);
 8004714:	230a      	movs	r3, #10
 8004716:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 800471a:	4955      	ldr	r1, [pc, #340]	; (8004870 <main+0x1a0>)
 800471c:	4853      	ldr	r0, [pc, #332]	; (800486c <main+0x19c>)
 800471e:	f7ff fbcb 	bl	8003eb8 <DCMotor_AddEncoder>
  DCMotor_AddPID(&LeftFrontMotor, 1.5, 0, 0.1);
 8004722:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8004874 <main+0x1a4>
 8004726:	eddf 0a54 	vldr	s1, [pc, #336]	; 8004878 <main+0x1a8>
 800472a:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800472e:	484f      	ldr	r0, [pc, #316]	; (800486c <main+0x19c>)
 8004730:	f7ff fb78 	bl	8003e24 <DCMotor_AddPID>
  DCMotor_AddL298N(&LeftFrontMotor, LFMotor_RotateDirectionCtrl1_GPIO_Port,
 8004734:	2300      	movs	r3, #0
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	4b50      	ldr	r3, [pc, #320]	; (800487c <main+0x1ac>)
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	2302      	movs	r3, #2
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	4b4f      	ldr	r3, [pc, #316]	; (8004880 <main+0x1b0>)
 8004742:	2201      	movs	r2, #1
 8004744:	494e      	ldr	r1, [pc, #312]	; (8004880 <main+0x1b0>)
 8004746:	4849      	ldr	r0, [pc, #292]	; (800486c <main+0x19c>)
 8004748:	f7ff fce0 	bl	800410c <DCMotor_AddL298N>
		                            LFMotor_RotateDirectionCtrl1_Pin,
									LFMotor_RotateDirectionCtrl2_GPIO_Port,
									LFMotor_RotateDirectionCtrl2_Pin,
									&htim1, TIM_CHANNEL_1);
  DCMotor_Init(&LeftRearMotor, "Left Rear Motor", 32, 0, 16800);
 800474c:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8004750:	2200      	movs	r2, #0
 8004752:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8004864 <main+0x194>
 8004756:	494b      	ldr	r1, [pc, #300]	; (8004884 <main+0x1b4>)
 8004758:	484b      	ldr	r0, [pc, #300]	; (8004888 <main+0x1b8>)
 800475a:	f7ff f9cf 	bl	8003afc <DCMotor_Init>
  DCMotor_AddEncoder(&LeftRearMotor, &htim3, 1560, 10);
 800475e:	230a      	movs	r3, #10
 8004760:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 8004764:	4949      	ldr	r1, [pc, #292]	; (800488c <main+0x1bc>)
 8004766:	4848      	ldr	r0, [pc, #288]	; (8004888 <main+0x1b8>)
 8004768:	f7ff fba6 	bl	8003eb8 <DCMotor_AddEncoder>
  DCMotor_AddPID(&LeftRearMotor, 1.5, 0, 0.1);
 800476c:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8004874 <main+0x1a4>
 8004770:	eddf 0a41 	vldr	s1, [pc, #260]	; 8004878 <main+0x1a8>
 8004774:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8004778:	4843      	ldr	r0, [pc, #268]	; (8004888 <main+0x1b8>)
 800477a:	f7ff fb53 	bl	8003e24 <DCMotor_AddPID>
  DCMotor_AddL298N(&LeftRearMotor,LRMotor_RotateDirectionCtrl1_GPIO_Port,
 800477e:	2304      	movs	r3, #4
 8004780:	9302      	str	r3, [sp, #8]
 8004782:	4b3e      	ldr	r3, [pc, #248]	; (800487c <main+0x1ac>)
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	2308      	movs	r3, #8
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	4b3d      	ldr	r3, [pc, #244]	; (8004880 <main+0x1b0>)
 800478c:	2204      	movs	r2, #4
 800478e:	493c      	ldr	r1, [pc, #240]	; (8004880 <main+0x1b0>)
 8004790:	483d      	ldr	r0, [pc, #244]	; (8004888 <main+0x1b8>)
 8004792:	f7ff fcbb 	bl	800410c <DCMotor_AddL298N>
		                            LRMotor_RotateDirectionCtrl1_Pin,
									LRMotor_RotateDirectionCtrl2_GPIO_Port,
									LRMotor_RotateDirectionCtrl2_Pin,
									&htim1, TIM_CHANNEL_2);
  DCMotor_Init(&RightFrontMotor, "Right Front Motor", 32, 0, 16800);
 8004796:	f244 13a0 	movw	r3, #16800	; 0x41a0
 800479a:	2200      	movs	r2, #0
 800479c:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004864 <main+0x194>
 80047a0:	493b      	ldr	r1, [pc, #236]	; (8004890 <main+0x1c0>)
 80047a2:	483c      	ldr	r0, [pc, #240]	; (8004894 <main+0x1c4>)
 80047a4:	f7ff f9aa 	bl	8003afc <DCMotor_Init>
  DCMotor_AddEncoder(&RightFrontMotor, &htim4, 1560, 10);
 80047a8:	230a      	movs	r3, #10
 80047aa:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 80047ae:	493a      	ldr	r1, [pc, #232]	; (8004898 <main+0x1c8>)
 80047b0:	4838      	ldr	r0, [pc, #224]	; (8004894 <main+0x1c4>)
 80047b2:	f7ff fb81 	bl	8003eb8 <DCMotor_AddEncoder>
  DCMotor_AddPID(&RightFrontMotor, 1.5, 0, 0.1);
 80047b6:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8004874 <main+0x1a4>
 80047ba:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8004878 <main+0x1a8>
 80047be:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80047c2:	4834      	ldr	r0, [pc, #208]	; (8004894 <main+0x1c4>)
 80047c4:	f7ff fb2e 	bl	8003e24 <DCMotor_AddPID>
  DCMotor_AddL298N(&RightFrontMotor,RFMotor_RotateDirectionCtrl1_GPIO_Port,
 80047c8:	2308      	movs	r3, #8
 80047ca:	9302      	str	r3, [sp, #8]
 80047cc:	4b2b      	ldr	r3, [pc, #172]	; (800487c <main+0x1ac>)
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	2320      	movs	r3, #32
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <main+0x1b0>)
 80047d6:	2210      	movs	r2, #16
 80047d8:	4929      	ldr	r1, [pc, #164]	; (8004880 <main+0x1b0>)
 80047da:	482e      	ldr	r0, [pc, #184]	; (8004894 <main+0x1c4>)
 80047dc:	f7ff fc96 	bl	800410c <DCMotor_AddL298N>
		                            RFMotor_RotateDirectionCtrl1_Pin,
									RFMotor_RotateDirectionCtrl2_GPIO_Port,
									RFMotor_RotateDirectionCtrl2_Pin,
									&htim1, TIM_CHANNEL_3);
  DCMotor_Init(&RightRearMotor, "Right Rear Motor", 32, 0, 16800);
 80047e0:	f244 13a0 	movw	r3, #16800	; 0x41a0
 80047e4:	2200      	movs	r2, #0
 80047e6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004864 <main+0x194>
 80047ea:	492c      	ldr	r1, [pc, #176]	; (800489c <main+0x1cc>)
 80047ec:	482c      	ldr	r0, [pc, #176]	; (80048a0 <main+0x1d0>)
 80047ee:	f7ff f985 	bl	8003afc <DCMotor_Init>
  DCMotor_AddEncoder(&RightRearMotor, &htim5, 1560, 10);
 80047f2:	230a      	movs	r3, #10
 80047f4:	f44f 62c3 	mov.w	r2, #1560	; 0x618
 80047f8:	492a      	ldr	r1, [pc, #168]	; (80048a4 <main+0x1d4>)
 80047fa:	4829      	ldr	r0, [pc, #164]	; (80048a0 <main+0x1d0>)
 80047fc:	f7ff fb5c 	bl	8003eb8 <DCMotor_AddEncoder>
  DCMotor_AddPID(&RightRearMotor, 1.5, 0, 0.1);
 8004800:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8004874 <main+0x1a4>
 8004804:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8004878 <main+0x1a8>
 8004808:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800480c:	4824      	ldr	r0, [pc, #144]	; (80048a0 <main+0x1d0>)
 800480e:	f7ff fb09 	bl	8003e24 <DCMotor_AddPID>
  DCMotor_AddL298N(&RightRearMotor,RRMotor_RotateDirectionCtrl1_GPIO_Port,
 8004812:	230c      	movs	r3, #12
 8004814:	9302      	str	r3, [sp, #8]
 8004816:	4b19      	ldr	r3, [pc, #100]	; (800487c <main+0x1ac>)
 8004818:	9301      	str	r3, [sp, #4]
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <main+0x1b0>)
 8004820:	2240      	movs	r2, #64	; 0x40
 8004822:	4917      	ldr	r1, [pc, #92]	; (8004880 <main+0x1b0>)
 8004824:	481e      	ldr	r0, [pc, #120]	; (80048a0 <main+0x1d0>)
 8004826:	f7ff fc71 	bl	800410c <DCMotor_AddL298N>
								   RRMotor_RotateDirectionCtrl2_GPIO_Port,
								   RRMotor_RotateDirectionCtrl2_Pin,
							       &htim1, TIM_CHANNEL_4);


  Car_Init(&Car, 7.5, 17, 17.1);
 800482a:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 80048a8 <main+0x1d8>
 800482e:	eef3 0a01 	vmov.f32	s1, #49	; 0x41880000  17.0
 8004832:	eeb1 0a0e 	vmov.f32	s0, #30	; 0x40f00000  7.5
 8004836:	481d      	ldr	r0, [pc, #116]	; (80048ac <main+0x1dc>)
 8004838:	f7fc fca8 	bl	800118c <Car_Init>
  Car_AddWheel(&LeftFrontMotor, &LeftRearMotor, &RightFrontMotor, &RightRearMotor);
 800483c:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <main+0x1d0>)
 800483e:	4a15      	ldr	r2, [pc, #84]	; (8004894 <main+0x1c4>)
 8004840:	4911      	ldr	r1, [pc, #68]	; (8004888 <main+0x1b8>)
 8004842:	480a      	ldr	r0, [pc, #40]	; (800486c <main+0x19c>)
 8004844:	f7fc fcec 	bl	8001220 <Car_AddWheel>

  Car_SetVelocity(&Car, 0, 40, 0);
 8004848:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8004878 <main+0x1a8>
 800484c:	eddf 0a18 	vldr	s1, [pc, #96]	; 80048b0 <main+0x1e0>
 8004850:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004878 <main+0x1a8>
 8004854:	4815      	ldr	r0, [pc, #84]	; (80048ac <main+0x1dc>)
 8004856:	f7fc fd2f 	bl	80012b8 <Car_SetVelocity>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800485a:	f7ff fe25 	bl	80044a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800485e:	f003 ffe1 	bl	8008824 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004862:	e7fe      	b.n	8004862 <main+0x192>
 8004864:	42000000 	.word	0x42000000
 8004868:	08010c40 	.word	0x08010c40
 800486c:	200002ec 	.word	0x200002ec
 8004870:	20009c3c 	.word	0x20009c3c
 8004874:	3dcccccd 	.word	0x3dcccccd
 8004878:	00000000 	.word	0x00000000
 800487c:	20009bf4 	.word	0x20009bf4
 8004880:	40020800 	.word	0x40020800
 8004884:	08010c54 	.word	0x08010c54
 8004888:	20000328 	.word	0x20000328
 800488c:	20009c84 	.word	0x20009c84
 8004890:	08010c64 	.word	0x08010c64
 8004894:	20000364 	.word	0x20000364
 8004898:	20009ccc 	.word	0x20009ccc
 800489c:	08010c78 	.word	0x08010c78
 80048a0:	200003a0 	.word	0x200003a0
 80048a4:	20009d14 	.word	0x20009d14
 80048a8:	4188cccd 	.word	0x4188cccd
 80048ac:	200002ac 	.word	0x200002ac
 80048b0:	42200000 	.word	0x42200000

080048b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b094      	sub	sp, #80	; 0x50
 80048b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048ba:	f107 0320 	add.w	r3, r7, #32
 80048be:	2230      	movs	r2, #48	; 0x30
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f005 fbeb 	bl	800a09e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048c8:	f107 030c 	add.w	r3, r7, #12
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048d8:	2300      	movs	r3, #0
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	4b28      	ldr	r3, [pc, #160]	; (8004980 <SystemClock_Config+0xcc>)
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	4a27      	ldr	r2, [pc, #156]	; (8004980 <SystemClock_Config+0xcc>)
 80048e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e6:	6413      	str	r3, [r2, #64]	; 0x40
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <SystemClock_Config+0xcc>)
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048f4:	2300      	movs	r3, #0
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	4b22      	ldr	r3, [pc, #136]	; (8004984 <SystemClock_Config+0xd0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a21      	ldr	r2, [pc, #132]	; (8004984 <SystemClock_Config+0xd0>)
 80048fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <SystemClock_Config+0xd0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004910:	2301      	movs	r3, #1
 8004912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800491a:	2302      	movs	r3, #2
 800491c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800491e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004924:	2304      	movs	r3, #4
 8004926:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004928:	23a8      	movs	r3, #168	; 0xa8
 800492a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800492c:	2302      	movs	r3, #2
 800492e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004930:	2304      	movs	r3, #4
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004934:	f107 0320 	add.w	r3, r7, #32
 8004938:	4618      	mov	r0, r3
 800493a:	f001 fc5d 	bl	80061f8 <HAL_RCC_OscConfig>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004944:	f000 f820 	bl	8004988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004948:	230f      	movs	r3, #15
 800494a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800494c:	2302      	movs	r3, #2
 800494e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004954:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800495a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800495e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004960:	f107 030c 	add.w	r3, r7, #12
 8004964:	2105      	movs	r1, #5
 8004966:	4618      	mov	r0, r3
 8004968:	f001 febe 	bl	80066e8 <HAL_RCC_ClockConfig>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004972:	f000 f809 	bl	8004988 <Error_Handler>
  }
}
 8004976:	bf00      	nop
 8004978:	3750      	adds	r7, #80	; 0x50
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023800 	.word	0x40023800
 8004984:	40007000 	.word	0x40007000

08004988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800498c:	b672      	cpsid	i
}
 800498e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004990:	e7fe      	b.n	8004990 <Error_Handler+0x8>
	...

08004994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <HAL_MspInit+0x54>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4a11      	ldr	r2, [pc, #68]	; (80049e8 <HAL_MspInit+0x54>)
 80049a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a8:	6453      	str	r3, [r2, #68]	; 0x44
 80049aa:	4b0f      	ldr	r3, [pc, #60]	; (80049e8 <HAL_MspInit+0x54>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049b6:	2300      	movs	r3, #0
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_MspInit+0x54>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	4a0a      	ldr	r2, [pc, #40]	; (80049e8 <HAL_MspInit+0x54>)
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6413      	str	r3, [r2, #64]	; 0x40
 80049c6:	4b08      	ldr	r3, [pc, #32]	; (80049e8 <HAL_MspInit+0x54>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80049d2:	2200      	movs	r2, #0
 80049d4:	210f      	movs	r1, #15
 80049d6:	f06f 0001 	mvn.w	r0, #1
 80049da:	f000 fea4 	bl	8005726 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800

080049ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049f0:	e7fe      	b.n	80049f0 <NMI_Handler+0x4>
	...

080049f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_UART_Transmit(&huart1, "Hard Fault!\r\n", 13, 0xffff);
 80049f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049fc:	220d      	movs	r2, #13
 80049fe:	4902      	ldr	r1, [pc, #8]	; (8004a08 <HardFault_Handler+0x14>)
 8004a00:	4802      	ldr	r0, [pc, #8]	; (8004a0c <HardFault_Handler+0x18>)
 8004a02:	f002 ff30 	bl	8007866 <HAL_UART_Transmit>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a06:	e7fe      	b.n	8004a06 <HardFault_Handler+0x12>
 8004a08:	08010c8c 	.word	0x08010c8c
 8004a0c:	20009d5c 	.word	0x20009d5c

08004a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a14:	e7fe      	b.n	8004a14 <MemManage_Handler+0x4>

08004a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a1a:	e7fe      	b.n	8004a1a <BusFault_Handler+0x4>

08004a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a20:	e7fe      	b.n	8004a20 <UsageFault_Handler+0x4>

08004a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a22:	b480      	push	{r7}
 8004a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a34:	f000 fd7c 	bl	8005530 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004a38:	f004 fd84 	bl	8009544 <xTaskGetSchedulerState>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d001      	beq.n	8004a46 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004a42:	f004 ffc1 	bl	80099c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a50:	4803      	ldr	r0, [pc, #12]	; (8004a60 <USART1_IRQHandler+0x14>)
 8004a52:	f002 ff9b 	bl	800798c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  io_UartRxIntHandler(&huart1);
 8004a56:	4802      	ldr	r0, [pc, #8]	; (8004a60 <USART1_IRQHandler+0x14>)
 8004a58:	f7fd ffb4 	bl	80029c4 <io_UartRxIntHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8004a5c:	bf00      	nop
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	20009d5c 	.word	0x20009d5c

08004a64 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004a68:	4803      	ldr	r0, [pc, #12]	; (8004a78 <DMA2_Stream7_IRQHandler+0x14>)
 8004a6a:	f000 ffd3 	bl	8005a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */
  io_DMAHandler(&huart1);
 8004a6e:	4803      	ldr	r0, [pc, #12]	; (8004a7c <DMA2_Stream7_IRQHandler+0x18>)
 8004a70:	f7fd fe4e 	bl	8002710 <io_DMAHandler>
  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004a74:	bf00      	nop
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20009da0 	.word	0x20009da0
 8004a7c:	20009d5c 	.word	0x20009d5c

08004a80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return 1;
 8004a84:	2301      	movs	r3, #1
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <_kill>:

int _kill(int pid, int sig)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a9a:	f005 f9cf 	bl	8009e3c <__errno>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2216      	movs	r2, #22
 8004aa2:	601a      	str	r2, [r3, #0]
  return -1;
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <_exit>:

void _exit (int status)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff ffe7 	bl	8004a90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ac2:	e7fe      	b.n	8004ac2 <_exit+0x12>

08004ac4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e00a      	b.n	8004aec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ad6:	f3af 8000 	nop.w
 8004ada:	4601      	mov	r1, r0
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	60ba      	str	r2, [r7, #8]
 8004ae2:	b2ca      	uxtb	r2, r1
 8004ae4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	dbf0      	blt.n	8004ad6 <_read+0x12>
  }

  return len;
 8004af4:	687b      	ldr	r3, [r7, #4]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3718      	adds	r7, #24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	e009      	b.n	8004b24 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	60ba      	str	r2, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	3301      	adds	r3, #1
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	dbf1      	blt.n	8004b10 <_write+0x12>
  }
  return len;
 8004b2c:	687b      	ldr	r3, [r7, #4]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <_close>:

int _close(int file)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b5e:	605a      	str	r2, [r3, #4]
  return 0;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <_isatty>:

int _isatty(int file)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b76:	2301      	movs	r3, #1
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ba8:	4a14      	ldr	r2, [pc, #80]	; (8004bfc <_sbrk+0x5c>)
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <_sbrk+0x60>)
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bb4:	4b13      	ldr	r3, [pc, #76]	; (8004c04 <_sbrk+0x64>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d102      	bne.n	8004bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <_sbrk+0x64>)
 8004bbe:	4a12      	ldr	r2, [pc, #72]	; (8004c08 <_sbrk+0x68>)
 8004bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bc2:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <_sbrk+0x64>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4413      	add	r3, r2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d207      	bcs.n	8004be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bd0:	f005 f934 	bl	8009e3c <__errno>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	220c      	movs	r2, #12
 8004bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bda:	f04f 33ff 	mov.w	r3, #4294967295
 8004bde:	e009      	b.n	8004bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <_sbrk+0x64>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004be6:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <_sbrk+0x64>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <_sbrk+0x64>)
 8004bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20020000 	.word	0x20020000
 8004c00:	00000400 	.word	0x00000400
 8004c04:	20009bf0 	.word	0x20009bf0
 8004c08:	2000db68 	.word	0x2000db68

08004c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <SystemInit+0x20>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	4a05      	ldr	r2, [pc, #20]	; (8004c2c <SystemInit+0x20>)
 8004c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b092      	sub	sp, #72	; 0x48
 8004c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
 8004c50:	615a      	str	r2, [r3, #20]
 8004c52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c54:	1d3b      	adds	r3, r7, #4
 8004c56:	2220      	movs	r2, #32
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f005 fa1f 	bl	800a09e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c60:	4b45      	ldr	r3, [pc, #276]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004c62:	4a46      	ldr	r2, [pc, #280]	; (8004d7c <MX_TIM1_Init+0x14c>)
 8004c64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 8004c66:	4b44      	ldr	r3, [pc, #272]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004c68:	22a8      	movs	r2, #168	; 0xa8
 8004c6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c6c:	4b42      	ldr	r3, [pc, #264]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 16800;
 8004c72:	4b41      	ldr	r3, [pc, #260]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004c74:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004c78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c7a:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c80:	4b3d      	ldr	r3, [pc, #244]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c86:	4b3c      	ldr	r3, [pc, #240]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c8c:	483a      	ldr	r0, [pc, #232]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004c8e:	f001 ff4b 	bl	8006b28 <HAL_TIM_PWM_Init>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004c98:	f7ff fe76 	bl	8004988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ca4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4833      	ldr	r0, [pc, #204]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004cac:	f002 fcc0 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8004cb6:	f7ff fe67 	bl	8004988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cba:	2360      	movs	r3, #96	; 0x60
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cda:	2200      	movs	r2, #0
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4826      	ldr	r0, [pc, #152]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004ce0:	f002 f96e 	bl	8006fc0 <HAL_TIM_PWM_ConfigChannel>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004cea:	f7ff fe4d 	bl	8004988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4820      	ldr	r0, [pc, #128]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004cf8:	f002 f962 	bl	8006fc0 <HAL_TIM_PWM_ConfigChannel>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8004d02:	f7ff fe41 	bl	8004988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	481a      	ldr	r0, [pc, #104]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004d10:	f002 f956 	bl	8006fc0 <HAL_TIM_PWM_ConfigChannel>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8004d1a:	f7ff fe35 	bl	8004988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d22:	220c      	movs	r2, #12
 8004d24:	4619      	mov	r1, r3
 8004d26:	4814      	ldr	r0, [pc, #80]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004d28:	f002 f94a 	bl	8006fc0 <HAL_TIM_PWM_ConfigChannel>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004d32:	f7ff fe29 	bl	8004988 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d36:	2300      	movs	r3, #0
 8004d38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004d54:	1d3b      	adds	r3, r7, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	4807      	ldr	r0, [pc, #28]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004d5a:	f002 fce5 	bl	8007728 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004d64:	f7ff fe10 	bl	8004988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004d68:	4803      	ldr	r0, [pc, #12]	; (8004d78 <MX_TIM1_Init+0x148>)
 8004d6a:	f000 fa7f 	bl	800526c <HAL_TIM_MspPostInit>

}
 8004d6e:	bf00      	nop
 8004d70:	3748      	adds	r7, #72	; 0x48
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	20009bf4 	.word	0x20009bf4
 8004d7c:	40010000 	.word	0x40010000

08004d80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08c      	sub	sp, #48	; 0x30
 8004d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d86:	f107 030c 	add.w	r3, r7, #12
 8004d8a:	2224      	movs	r2, #36	; 0x24
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f005 f985 	bl	800a09e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004d9c:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <MX_TIM2_Init+0xa4>)
 8004d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <MX_TIM2_Init+0xa4>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004daa:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <MX_TIM2_Init+0xa4>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <MX_TIM2_Init+0xa4>)
 8004db2:	f04f 32ff 	mov.w	r2, #4294967295
 8004db6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004db8:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <MX_TIM2_Init+0xa4>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <MX_TIM2_Init+0xa4>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004de0:	2300      	movs	r3, #0
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	4619      	mov	r1, r3
 8004dee:	480d      	ldr	r0, [pc, #52]	; (8004e24 <MX_TIM2_Init+0xa4>)
 8004df0:	f001 ffb2 	bl	8006d58 <HAL_TIM_Encoder_Init>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004dfa:	f7ff fdc5 	bl	8004988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e06:	1d3b      	adds	r3, r7, #4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4806      	ldr	r0, [pc, #24]	; (8004e24 <MX_TIM2_Init+0xa4>)
 8004e0c:	f002 fc10 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004e16:	f7ff fdb7 	bl	8004988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e1a:	bf00      	nop
 8004e1c:	3730      	adds	r7, #48	; 0x30
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20009c3c 	.word	0x20009c3c

08004e28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08c      	sub	sp, #48	; 0x30
 8004e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004e2e:	f107 030c 	add.w	r3, r7, #12
 8004e32:	2224      	movs	r2, #36	; 0x24
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f005 f931 	bl	800a09e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e3c:	1d3b      	adds	r3, r7, #4
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004e44:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <MX_TIM3_Init+0xa0>)
 8004e46:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <MX_TIM3_Init+0xa4>)
 8004e48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004e4a:	4b1f      	ldr	r3, [pc, #124]	; (8004ec8 <MX_TIM3_Init+0xa0>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <MX_TIM3_Init+0xa0>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004e56:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <MX_TIM3_Init+0xa0>)
 8004e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e5e:	4b1a      	ldr	r3, [pc, #104]	; (8004ec8 <MX_TIM3_Init+0xa0>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e64:	4b18      	ldr	r3, [pc, #96]	; (8004ec8 <MX_TIM3_Init+0xa0>)
 8004e66:	2200      	movs	r2, #0
 8004e68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e72:	2301      	movs	r3, #1
 8004e74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e82:	2301      	movs	r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e86:	2300      	movs	r3, #0
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004e8e:	f107 030c 	add.w	r3, r7, #12
 8004e92:	4619      	mov	r1, r3
 8004e94:	480c      	ldr	r0, [pc, #48]	; (8004ec8 <MX_TIM3_Init+0xa0>)
 8004e96:	f001 ff5f 	bl	8006d58 <HAL_TIM_Encoder_Init>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004ea0:	f7ff fd72 	bl	8004988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004eac:	1d3b      	adds	r3, r7, #4
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <MX_TIM3_Init+0xa0>)
 8004eb2:	f002 fbbd 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004ebc:	f7ff fd64 	bl	8004988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004ec0:	bf00      	nop
 8004ec2:	3730      	adds	r7, #48	; 0x30
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20009c84 	.word	0x20009c84
 8004ecc:	40000400 	.word	0x40000400

08004ed0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004ed6:	f107 030c 	add.w	r3, r7, #12
 8004eda:	2224      	movs	r2, #36	; 0x24
 8004edc:	2100      	movs	r1, #0
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f005 f8dd 	bl	800a09e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ee4:	1d3b      	adds	r3, r7, #4
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004eec:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <MX_TIM4_Init+0xa0>)
 8004eee:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <MX_TIM4_Init+0xa4>)
 8004ef0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004ef2:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <MX_TIM4_Init+0xa0>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <MX_TIM4_Init+0xa0>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004efe:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <MX_TIM4_Init+0xa0>)
 8004f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <MX_TIM4_Init+0xa0>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <MX_TIM4_Init+0xa0>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004f12:	2303      	movs	r3, #3
 8004f14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004f16:	2300      	movs	r3, #0
 8004f18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004f26:	2300      	movs	r3, #0
 8004f28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004f36:	f107 030c 	add.w	r3, r7, #12
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	480c      	ldr	r0, [pc, #48]	; (8004f70 <MX_TIM4_Init+0xa0>)
 8004f3e:	f001 ff0b 	bl	8006d58 <HAL_TIM_Encoder_Init>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8004f48:	f7ff fd1e 	bl	8004988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004f54:	1d3b      	adds	r3, r7, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4805      	ldr	r0, [pc, #20]	; (8004f70 <MX_TIM4_Init+0xa0>)
 8004f5a:	f002 fb69 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d001      	beq.n	8004f68 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004f64:	f7ff fd10 	bl	8004988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004f68:	bf00      	nop
 8004f6a:	3730      	adds	r7, #48	; 0x30
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20009ccc 	.word	0x20009ccc
 8004f74:	40000800 	.word	0x40000800

08004f78 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08c      	sub	sp, #48	; 0x30
 8004f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004f7e:	f107 030c 	add.w	r3, r7, #12
 8004f82:	2224      	movs	r2, #36	; 0x24
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f005 f889 	bl	800a09e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f8c:	1d3b      	adds	r3, r7, #4
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004f94:	4b20      	ldr	r3, [pc, #128]	; (8005018 <MX_TIM5_Init+0xa0>)
 8004f96:	4a21      	ldr	r2, [pc, #132]	; (800501c <MX_TIM5_Init+0xa4>)
 8004f98:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004f9a:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <MX_TIM5_Init+0xa0>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <MX_TIM5_Init+0xa0>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <MX_TIM5_Init+0xa0>)
 8004fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <MX_TIM5_Init+0xa0>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fb4:	4b18      	ldr	r3, [pc, #96]	; (8005018 <MX_TIM5_Init+0xa0>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	480c      	ldr	r0, [pc, #48]	; (8005018 <MX_TIM5_Init+0xa0>)
 8004fe6:	f001 feb7 	bl	8006d58 <HAL_TIM_Encoder_Init>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8004ff0:	f7ff fcca 	bl	8004988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4805      	ldr	r0, [pc, #20]	; (8005018 <MX_TIM5_Init+0xa0>)
 8005002:	f002 fb15 	bl	8007630 <HAL_TIMEx_MasterConfigSynchronization>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800500c:	f7ff fcbc 	bl	8004988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005010:	bf00      	nop
 8005012:	3730      	adds	r7, #48	; 0x30
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20009d14 	.word	0x20009d14
 800501c:	40000c00 	.word	0x40000c00

08005020 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0b      	ldr	r2, [pc, #44]	; (800505c <HAL_TIM_PWM_MspInit+0x3c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d10d      	bne.n	800504e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <HAL_TIM_PWM_MspInit+0x40>)
 8005038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503a:	4a09      	ldr	r2, [pc, #36]	; (8005060 <HAL_TIM_PWM_MspInit+0x40>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	6453      	str	r3, [r2, #68]	; 0x44
 8005042:	4b07      	ldr	r3, [pc, #28]	; (8005060 <HAL_TIM_PWM_MspInit+0x40>)
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40010000 	.word	0x40010000
 8005060:	40023800 	.word	0x40023800

08005064 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b090      	sub	sp, #64	; 0x40
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800506c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d14a      	bne.n	800511c <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005086:	2300      	movs	r3, #0
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
 800508a:	4b71      	ldr	r3, [pc, #452]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	4a70      	ldr	r2, [pc, #448]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005090:	f043 0301 	orr.w	r3, r3, #1
 8005094:	6413      	str	r3, [r2, #64]	; 0x40
 8005096:	4b6e      	ldr	r3, [pc, #440]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	4b6a      	ldr	r3, [pc, #424]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	4a69      	ldr	r2, [pc, #420]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	6313      	str	r3, [r2, #48]	; 0x30
 80050b2:	4b67      	ldr	r3, [pc, #412]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	4b63      	ldr	r3, [pc, #396]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	4a62      	ldr	r2, [pc, #392]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80050c8:	f043 0302 	orr.w	r3, r3, #2
 80050cc:	6313      	str	r3, [r2, #48]	; 0x30
 80050ce:	4b60      	ldr	r3, [pc, #384]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncA_LeftFront_Pin;
 80050da:	2320      	movs	r3, #32
 80050dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050de:	2302      	movs	r3, #2
 80050e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050e2:	2301      	movs	r3, #1
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050e6:	2300      	movs	r3, #0
 80050e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80050ea:	2301      	movs	r3, #1
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(EncA_LeftFront_GPIO_Port, &GPIO_InitStruct);
 80050ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050f2:	4619      	mov	r1, r3
 80050f4:	4857      	ldr	r0, [pc, #348]	; (8005254 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80050f6:	f000 fec9 	bl	8005e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EncB_LeftFront_Pin;
 80050fa:	2308      	movs	r3, #8
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fe:	2302      	movs	r3, #2
 8005100:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005102:	2301      	movs	r3, #1
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005106:	2300      	movs	r3, #0
 8005108:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800510a:	2301      	movs	r3, #1
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(EncB_LeftFront_GPIO_Port, &GPIO_InitStruct);
 800510e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005112:	4619      	mov	r1, r3
 8005114:	4850      	ldr	r0, [pc, #320]	; (8005258 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8005116:	f000 feb9 	bl	8005e8c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800511a:	e095      	b.n	8005248 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a4e      	ldr	r2, [pc, #312]	; (800525c <HAL_TIM_Encoder_MspInit+0x1f8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d12c      	bne.n	8005180 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	4b49      	ldr	r3, [pc, #292]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a48      	ldr	r2, [pc, #288]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
 8005136:	4b46      	ldr	r3, [pc, #280]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	4b42      	ldr	r3, [pc, #264]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	4a41      	ldr	r2, [pc, #260]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6313      	str	r3, [r2, #48]	; 0x30
 8005152:	4b3f      	ldr	r3, [pc, #252]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = EncA_LeftRear_Pin|EncB_LeftRear_Pin;
 800515e:	23c0      	movs	r3, #192	; 0xc0
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005162:	2302      	movs	r3, #2
 8005164:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005166:	2301      	movs	r3, #1
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516a:	2300      	movs	r3, #0
 800516c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800516e:	2302      	movs	r3, #2
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005172:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005176:	4619      	mov	r1, r3
 8005178:	4836      	ldr	r0, [pc, #216]	; (8005254 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800517a:	f000 fe87 	bl	8005e8c <HAL_GPIO_Init>
}
 800517e:	e063      	b.n	8005248 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM4)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a36      	ldr	r2, [pc, #216]	; (8005260 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d12d      	bne.n	80051e6 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	4b30      	ldr	r3, [pc, #192]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005194:	f043 0304 	orr.w	r3, r3, #4
 8005198:	6413      	str	r3, [r2, #64]	; 0x40
 800519a:	4b2d      	ldr	r3, [pc, #180]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80051a6:	2300      	movs	r3, #0
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	4b29      	ldr	r3, [pc, #164]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	4a28      	ldr	r2, [pc, #160]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80051b0:	f043 0308 	orr.w	r3, r3, #8
 80051b4:	6313      	str	r3, [r2, #48]	; 0x30
 80051b6:	4b26      	ldr	r3, [pc, #152]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80051b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = EncB_RightFront_Pin|EncA_RightFront_Pin;
 80051c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c8:	2302      	movs	r3, #2
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051cc:	2301      	movs	r3, #1
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051d4:	2302      	movs	r3, #2
 80051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051dc:	4619      	mov	r1, r3
 80051de:	4821      	ldr	r0, [pc, #132]	; (8005264 <HAL_TIM_Encoder_MspInit+0x200>)
 80051e0:	f000 fe54 	bl	8005e8c <HAL_GPIO_Init>
}
 80051e4:	e030      	b.n	8005248 <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1f      	ldr	r2, [pc, #124]	; (8005268 <HAL_TIM_Encoder_MspInit+0x204>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d12b      	bne.n	8005248 <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	4b16      	ldr	r3, [pc, #88]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	4a15      	ldr	r2, [pc, #84]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80051fa:	f043 0308 	orr.w	r3, r3, #8
 80051fe:	6413      	str	r3, [r2, #64]	; 0x40
 8005200:	4b13      	ldr	r3, [pc, #76]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800520c:	2300      	movs	r3, #0
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6313      	str	r3, [r2, #48]	; 0x30
 800521c:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <HAL_TIM_Encoder_MspInit+0x1ec>)
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EncA_RightRear_Pin|EncB_RightRear_Pin;
 8005228:	2303      	movs	r3, #3
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522c:	2302      	movs	r3, #2
 800522e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005230:	2301      	movs	r3, #1
 8005232:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005234:	2300      	movs	r3, #0
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005238:	2302      	movs	r3, #2
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800523c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005240:	4619      	mov	r1, r3
 8005242:	4804      	ldr	r0, [pc, #16]	; (8005254 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005244:	f000 fe22 	bl	8005e8c <HAL_GPIO_Init>
}
 8005248:	bf00      	nop
 800524a:	3740      	adds	r7, #64	; 0x40
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	40023800 	.word	0x40023800
 8005254:	40020000 	.word	0x40020000
 8005258:	40020400 	.word	0x40020400
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40020c00 	.word	0x40020c00
 8005268:	40000c00 	.word	0x40000c00

0800526c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005274:	f107 030c 	add.w	r3, r7, #12
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	60da      	str	r2, [r3, #12]
 8005282:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a12      	ldr	r2, [pc, #72]	; (80052d4 <HAL_TIM_MspPostInit+0x68>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d11e      	bne.n	80052cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800528e:	2300      	movs	r3, #0
 8005290:	60bb      	str	r3, [r7, #8]
 8005292:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_TIM_MspPostInit+0x6c>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <HAL_TIM_MspPostInit+0x6c>)
 8005298:	f043 0310 	orr.w	r3, r3, #16
 800529c:	6313      	str	r3, [r2, #48]	; 0x30
 800529e:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <HAL_TIM_MspPostInit+0x6c>)
 80052a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_LeftFrontMotor_Pin|PWM_LeftRearMotor_Pin|PWM_RightFrontMotor_Pin|PWM_RightRearMotor_Pin;
 80052aa:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80052ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b0:	2302      	movs	r3, #2
 80052b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052bc:	2301      	movs	r3, #1
 80052be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052c0:	f107 030c 	add.w	r3, r7, #12
 80052c4:	4619      	mov	r1, r3
 80052c6:	4805      	ldr	r0, [pc, #20]	; (80052dc <HAL_TIM_MspPostInit+0x70>)
 80052c8:	f000 fde0 	bl	8005e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80052cc:	bf00      	nop
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40010000 	.word	0x40010000
 80052d8:	40023800 	.word	0x40023800
 80052dc:	40021000 	.word	0x40021000

080052e0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <MX_USART1_UART_Init+0x4c>)
 80052e6:	4a12      	ldr	r2, [pc, #72]	; (8005330 <MX_USART1_UART_Init+0x50>)
 80052e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80052ea:	4b10      	ldr	r3, [pc, #64]	; (800532c <MX_USART1_UART_Init+0x4c>)
 80052ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80052f2:	4b0e      	ldr	r3, [pc, #56]	; (800532c <MX_USART1_UART_Init+0x4c>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <MX_USART1_UART_Init+0x4c>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <MX_USART1_UART_Init+0x4c>)
 8005300:	2200      	movs	r2, #0
 8005302:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <MX_USART1_UART_Init+0x4c>)
 8005306:	220c      	movs	r2, #12
 8005308:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800530a:	4b08      	ldr	r3, [pc, #32]	; (800532c <MX_USART1_UART_Init+0x4c>)
 800530c:	2200      	movs	r2, #0
 800530e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005310:	4b06      	ldr	r3, [pc, #24]	; (800532c <MX_USART1_UART_Init+0x4c>)
 8005312:	2200      	movs	r2, #0
 8005314:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005316:	4805      	ldr	r0, [pc, #20]	; (800532c <MX_USART1_UART_Init+0x4c>)
 8005318:	f002 fa58 	bl	80077cc <HAL_UART_Init>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005322:	f7ff fb31 	bl	8004988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20009d5c 	.word	0x20009d5c
 8005330:	40011000 	.word	0x40011000

08005334 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800533c:	f107 0314 	add.w	r3, r7, #20
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	609a      	str	r2, [r3, #8]
 8005348:	60da      	str	r2, [r3, #12]
 800534a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a34      	ldr	r2, [pc, #208]	; (8005424 <HAL_UART_MspInit+0xf0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d162      	bne.n	800541c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	4b33      	ldr	r3, [pc, #204]	; (8005428 <HAL_UART_MspInit+0xf4>)
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	4a32      	ldr	r2, [pc, #200]	; (8005428 <HAL_UART_MspInit+0xf4>)
 8005360:	f043 0310 	orr.w	r3, r3, #16
 8005364:	6453      	str	r3, [r2, #68]	; 0x44
 8005366:	4b30      	ldr	r3, [pc, #192]	; (8005428 <HAL_UART_MspInit+0xf4>)
 8005368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	4b2c      	ldr	r3, [pc, #176]	; (8005428 <HAL_UART_MspInit+0xf4>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	4a2b      	ldr	r2, [pc, #172]	; (8005428 <HAL_UART_MspInit+0xf4>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6313      	str	r3, [r2, #48]	; 0x30
 8005382:	4b29      	ldr	r3, [pc, #164]	; (8005428 <HAL_UART_MspInit+0xf4>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ConsoleTx_Pin|ConsoleRx_Pin;
 800538e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	2302      	movs	r3, #2
 8005396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539c:	2303      	movs	r3, #3
 800539e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053a0:	2307      	movs	r3, #7
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a4:	f107 0314 	add.w	r3, r7, #20
 80053a8:	4619      	mov	r1, r3
 80053aa:	4820      	ldr	r0, [pc, #128]	; (800542c <HAL_UART_MspInit+0xf8>)
 80053ac:	f000 fd6e 	bl	8005e8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80053b0:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053b2:	4a20      	ldr	r2, [pc, #128]	; (8005434 <HAL_UART_MspInit+0x100>)
 80053b4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80053b6:	4b1e      	ldr	r3, [pc, #120]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80053be:	4b1c      	ldr	r3, [pc, #112]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053c0:	2240      	movs	r2, #64	; 0x40
 80053c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80053ca:	4b19      	ldr	r3, [pc, #100]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053d2:	4b17      	ldr	r3, [pc, #92]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053d8:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053da:	2200      	movs	r2, #0
 80053dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80053e4:	4b12      	ldr	r3, [pc, #72]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053ea:	4b11      	ldr	r3, [pc, #68]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80053f0:	480f      	ldr	r0, [pc, #60]	; (8005430 <HAL_UART_MspInit+0xfc>)
 80053f2:	f000 f9cf 	bl	8005794 <HAL_DMA_Init>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80053fc:	f7ff fac4 	bl	8004988 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a0b      	ldr	r2, [pc, #44]	; (8005430 <HAL_UART_MspInit+0xfc>)
 8005404:	635a      	str	r2, [r3, #52]	; 0x34
 8005406:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <HAL_UART_MspInit+0xfc>)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800540c:	2200      	movs	r2, #0
 800540e:	210f      	movs	r1, #15
 8005410:	2025      	movs	r0, #37	; 0x25
 8005412:	f000 f988 	bl	8005726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005416:	2025      	movs	r0, #37	; 0x25
 8005418:	f000 f9a1 	bl	800575e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800541c:	bf00      	nop
 800541e:	3728      	adds	r7, #40	; 0x28
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40011000 	.word	0x40011000
 8005428:	40023800 	.word	0x40023800
 800542c:	40020000 	.word	0x40020000
 8005430:	20009da0 	.word	0x20009da0
 8005434:	400264b8 	.word	0x400264b8

08005438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005470 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800543c:	480d      	ldr	r0, [pc, #52]	; (8005474 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800543e:	490e      	ldr	r1, [pc, #56]	; (8005478 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005440:	4a0e      	ldr	r2, [pc, #56]	; (800547c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005444:	e002      	b.n	800544c <LoopCopyDataInit>

08005446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800544a:	3304      	adds	r3, #4

0800544c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800544c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800544e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005450:	d3f9      	bcc.n	8005446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005452:	4a0b      	ldr	r2, [pc, #44]	; (8005480 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005454:	4c0b      	ldr	r4, [pc, #44]	; (8005484 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005458:	e001      	b.n	800545e <LoopFillZerobss>

0800545a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800545a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800545c:	3204      	adds	r2, #4

0800545e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800545e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005460:	d3fb      	bcc.n	800545a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005462:	f7ff fbd3 	bl	8004c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005466:	f004 fde5 	bl	800a034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800546a:	f7ff f931 	bl	80046d0 <main>
  bx  lr    
 800546e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005478:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 800547c:	0801170c 	.word	0x0801170c
  ldr r2, =_sbss
 8005480:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8005484:	2000db68 	.word	0x2000db68

08005488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005488:	e7fe      	b.n	8005488 <ADC_IRQHandler>
	...

0800548c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005490:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <HAL_Init+0x40>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <HAL_Init+0x40>)
 8005496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800549a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_Init+0x40>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a0a      	ldr	r2, [pc, #40]	; (80054cc <HAL_Init+0x40>)
 80054a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <HAL_Init+0x40>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a07      	ldr	r2, [pc, #28]	; (80054cc <HAL_Init+0x40>)
 80054ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054b4:	2003      	movs	r0, #3
 80054b6:	f000 f92b 	bl	8005710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054ba:	200f      	movs	r0, #15
 80054bc:	f000 f808 	bl	80054d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054c0:	f7ff fa68 	bl	8004994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023c00 	.word	0x40023c00

080054d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054d8:	4b12      	ldr	r3, [pc, #72]	; (8005524 <HAL_InitTick+0x54>)
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	4b12      	ldr	r3, [pc, #72]	; (8005528 <HAL_InitTick+0x58>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	4619      	mov	r1, r3
 80054e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f943 	bl	800577a <HAL_SYSTICK_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e00e      	b.n	800551c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b0f      	cmp	r3, #15
 8005502:	d80a      	bhi.n	800551a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005504:	2200      	movs	r2, #0
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	f04f 30ff 	mov.w	r0, #4294967295
 800550c:	f000 f90b 	bl	8005726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005510:	4a06      	ldr	r2, [pc, #24]	; (800552c <HAL_InitTick+0x5c>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	e000      	b.n	800551c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	200000ac 	.word	0x200000ac
 8005528:	200000b4 	.word	0x200000b4
 800552c:	200000b0 	.word	0x200000b0

08005530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_IncTick+0x20>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	4b06      	ldr	r3, [pc, #24]	; (8005554 <HAL_IncTick+0x24>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4413      	add	r3, r2
 8005540:	4a04      	ldr	r2, [pc, #16]	; (8005554 <HAL_IncTick+0x24>)
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	200000b4 	.word	0x200000b4
 8005554:	20009e00 	.word	0x20009e00

08005558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
  return uwTick;
 800555c:	4b03      	ldr	r3, [pc, #12]	; (800556c <HAL_GetTick+0x14>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20009e00 	.word	0x20009e00

08005570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800558c:	4013      	ands	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800559c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055a2:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <__NVIC_SetPriorityGrouping+0x44>)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	60d3      	str	r3, [r2, #12]
}
 80055a8:	bf00      	nop
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	e000ed00 	.word	0xe000ed00

080055b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055bc:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <__NVIC_GetPriorityGrouping+0x18>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	f003 0307 	and.w	r3, r3, #7
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	e000ed00 	.word	0xe000ed00

080055d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	db0b      	blt.n	80055fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	f003 021f 	and.w	r2, r3, #31
 80055ec:	4907      	ldr	r1, [pc, #28]	; (800560c <__NVIC_EnableIRQ+0x38>)
 80055ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2001      	movs	r0, #1
 80055f6:	fa00 f202 	lsl.w	r2, r0, r2
 80055fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	e000e100 	.word	0xe000e100

08005610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	6039      	str	r1, [r7, #0]
 800561a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800561c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005620:	2b00      	cmp	r3, #0
 8005622:	db0a      	blt.n	800563a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	b2da      	uxtb	r2, r3
 8005628:	490c      	ldr	r1, [pc, #48]	; (800565c <__NVIC_SetPriority+0x4c>)
 800562a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562e:	0112      	lsls	r2, r2, #4
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	440b      	add	r3, r1
 8005634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005638:	e00a      	b.n	8005650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	4908      	ldr	r1, [pc, #32]	; (8005660 <__NVIC_SetPriority+0x50>)
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	3b04      	subs	r3, #4
 8005648:	0112      	lsls	r2, r2, #4
 800564a:	b2d2      	uxtb	r2, r2
 800564c:	440b      	add	r3, r1
 800564e:	761a      	strb	r2, [r3, #24]
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	e000e100 	.word	0xe000e100
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	f1c3 0307 	rsb	r3, r3, #7
 800567e:	2b04      	cmp	r3, #4
 8005680:	bf28      	it	cs
 8005682:	2304      	movcs	r3, #4
 8005684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	3304      	adds	r3, #4
 800568a:	2b06      	cmp	r3, #6
 800568c:	d902      	bls.n	8005694 <NVIC_EncodePriority+0x30>
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	3b03      	subs	r3, #3
 8005692:	e000      	b.n	8005696 <NVIC_EncodePriority+0x32>
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005698:	f04f 32ff 	mov.w	r2, #4294967295
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	43da      	mvns	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	401a      	ands	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056ac:	f04f 31ff 	mov.w	r1, #4294967295
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fa01 f303 	lsl.w	r3, r1, r3
 80056b6:	43d9      	mvns	r1, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056bc:	4313      	orrs	r3, r2
         );
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3724      	adds	r7, #36	; 0x24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056dc:	d301      	bcc.n	80056e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056de:	2301      	movs	r3, #1
 80056e0:	e00f      	b.n	8005702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056e2:	4a0a      	ldr	r2, [pc, #40]	; (800570c <SysTick_Config+0x40>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056ea:	210f      	movs	r1, #15
 80056ec:	f04f 30ff 	mov.w	r0, #4294967295
 80056f0:	f7ff ff8e 	bl	8005610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056f4:	4b05      	ldr	r3, [pc, #20]	; (800570c <SysTick_Config+0x40>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056fa:	4b04      	ldr	r3, [pc, #16]	; (800570c <SysTick_Config+0x40>)
 80056fc:	2207      	movs	r2, #7
 80056fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	e000e010 	.word	0xe000e010

08005710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff ff29 	bl	8005570 <__NVIC_SetPriorityGrouping>
}
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af00      	add	r7, sp, #0
 800572c:	4603      	mov	r3, r0
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
 8005732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005738:	f7ff ff3e 	bl	80055b8 <__NVIC_GetPriorityGrouping>
 800573c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	6978      	ldr	r0, [r7, #20]
 8005744:	f7ff ff8e 	bl	8005664 <NVIC_EncodePriority>
 8005748:	4602      	mov	r2, r0
 800574a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff ff5d 	bl	8005610 <__NVIC_SetPriority>
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576c:	4618      	mov	r0, r3
 800576e:	f7ff ff31 	bl	80055d4 <__NVIC_EnableIRQ>
}
 8005772:	bf00      	nop
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff ffa2 	bl	80056cc <SysTick_Config>
 8005788:	4603      	mov	r3, r0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057a0:	f7ff feda 	bl	8005558 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e099      	b.n	80058e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0201 	bic.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057d0:	e00f      	b.n	80057f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80057d2:	f7ff fec1 	bl	8005558 <HAL_GetTick>
 80057d6:	4602      	mov	r2, r0
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	2b05      	cmp	r3, #5
 80057de:	d908      	bls.n	80057f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2203      	movs	r2, #3
 80057ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e078      	b.n	80058e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e8      	bne.n	80057d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	4b38      	ldr	r3, [pc, #224]	; (80058ec <HAL_DMA_Init+0x158>)
 800580c:	4013      	ands	r3, r2
 800580e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800581e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800582a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005836:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a1b      	ldr	r3, [r3, #32]
 800583c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	2b04      	cmp	r3, #4
 800584a:	d107      	bne.n	800585c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	4313      	orrs	r3, r2
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f023 0307 	bic.w	r3, r3, #7
 8005872:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005882:	2b04      	cmp	r3, #4
 8005884:	d117      	bne.n	80058b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	4313      	orrs	r3, r2
 800588e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00e      	beq.n	80058b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fa7b 	bl	8005d94 <DMA_CheckFifoParam>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2240      	movs	r2, #64	; 0x40
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80058b2:	2301      	movs	r3, #1
 80058b4:	e016      	b.n	80058e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fa32 	bl	8005d28 <DMA_CalcBaseAndBitshift>
 80058c4:	4603      	mov	r3, r0
 80058c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058cc:	223f      	movs	r2, #63	; 0x3f
 80058ce:	409a      	lsls	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	f010803f 	.word	0xf010803f

080058f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058fe:	f7ff fe2b 	bl	8005558 <HAL_GetTick>
 8005902:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d008      	beq.n	8005922 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e052      	b.n	80059c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0216 	bic.w	r2, r2, #22
 8005930:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005940:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <HAL_DMA_Abort+0x62>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594e:	2b00      	cmp	r3, #0
 8005950:	d007      	beq.n	8005962 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f022 0208 	bic.w	r2, r2, #8
 8005960:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005972:	e013      	b.n	800599c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005974:	f7ff fdf0 	bl	8005558 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b05      	cmp	r3, #5
 8005980:	d90c      	bls.n	800599c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2220      	movs	r2, #32
 8005986:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2203      	movs	r2, #3
 800598c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e015      	b.n	80059c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e4      	bne.n	8005974 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ae:	223f      	movs	r2, #63	; 0x3f
 80059b0:	409a      	lsls	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d004      	beq.n	80059ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2280      	movs	r2, #128	; 0x80
 80059e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e00c      	b.n	8005a08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2205      	movs	r2, #5
 80059f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b086      	sub	sp, #24
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005a20:	4b8e      	ldr	r3, [pc, #568]	; (8005c5c <HAL_DMA_IRQHandler+0x248>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a8e      	ldr	r2, [pc, #568]	; (8005c60 <HAL_DMA_IRQHandler+0x24c>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	0a9b      	lsrs	r3, r3, #10
 8005a2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3e:	2208      	movs	r2, #8
 8005a40:	409a      	lsls	r2, r3
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01a      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d013      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0204 	bic.w	r2, r2, #4
 8005a66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6c:	2208      	movs	r2, #8
 8005a6e:	409a      	lsls	r2, r3
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	f043 0201 	orr.w	r2, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a84:	2201      	movs	r2, #1
 8005a86:	409a      	lsls	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d012      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00b      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	409a      	lsls	r2, r3
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f043 0202 	orr.w	r2, r3, #2
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aba:	2204      	movs	r2, #4
 8005abc:	409a      	lsls	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d012      	beq.n	8005aec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00b      	beq.n	8005aec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad8:	2204      	movs	r2, #4
 8005ada:	409a      	lsls	r2, r3
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae4:	f043 0204 	orr.w	r2, r3, #4
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af0:	2210      	movs	r2, #16
 8005af2:	409a      	lsls	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d043      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d03c      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b0e:	2210      	movs	r2, #16
 8005b10:	409a      	lsls	r2, r3
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d018      	beq.n	8005b56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d108      	bne.n	8005b44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d024      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
 8005b42:	e01f      	b.n	8005b84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01b      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	4798      	blx	r3
 8005b54:	e016      	b.n	8005b84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d107      	bne.n	8005b74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f022 0208 	bic.w	r2, r2, #8
 8005b72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b88:	2220      	movs	r2, #32
 8005b8a:	409a      	lsls	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 808f 	beq.w	8005cb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8087 	beq.w	8005cb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005baa:	2220      	movs	r2, #32
 8005bac:	409a      	lsls	r2, r3
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d136      	bne.n	8005c2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0216 	bic.w	r2, r2, #22
 8005bcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <HAL_DMA_IRQHandler+0x1da>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d007      	beq.n	8005bfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0208 	bic.w	r2, r2, #8
 8005bfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c02:	223f      	movs	r2, #63	; 0x3f
 8005c04:	409a      	lsls	r2, r3
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d07e      	beq.n	8005d20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	4798      	blx	r3
        }
        return;
 8005c2a:	e079      	b.n	8005d20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01d      	beq.n	8005c76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10d      	bne.n	8005c64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d031      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
 8005c58:	e02c      	b.n	8005cb4 <HAL_DMA_IRQHandler+0x2a0>
 8005c5a:	bf00      	nop
 8005c5c:	200000ac 	.word	0x200000ac
 8005c60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d023      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
 8005c74:	e01e      	b.n	8005cb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10f      	bne.n	8005ca4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0210 	bic.w	r2, r2, #16
 8005c92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d032      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d022      	beq.n	8005d0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2205      	movs	r2, #5
 8005ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d307      	bcc.n	8005cfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f2      	bne.n	8005ce0 <HAL_DMA_IRQHandler+0x2cc>
 8005cfa:	e000      	b.n	8005cfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005cfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d005      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	4798      	blx	r3
 8005d1e:	e000      	b.n	8005d22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005d20:	bf00      	nop
    }
  }
}
 8005d22:	3718      	adds	r7, #24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	3b10      	subs	r3, #16
 8005d38:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <DMA_CalcBaseAndBitshift+0x64>)
 8005d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3e:	091b      	lsrs	r3, r3, #4
 8005d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d42:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <DMA_CalcBaseAndBitshift+0x68>)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d909      	bls.n	8005d6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d5e:	f023 0303 	bic.w	r3, r3, #3
 8005d62:	1d1a      	adds	r2, r3, #4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	659a      	str	r2, [r3, #88]	; 0x58
 8005d68:	e007      	b.n	8005d7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	aaaaaaab 	.word	0xaaaaaaab
 8005d90:	08010e6c 	.word	0x08010e6c

08005d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d11f      	bne.n	8005dee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d856      	bhi.n	8005e62 <DMA_CheckFifoParam+0xce>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <DMA_CheckFifoParam+0x28>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005ddf 	.word	0x08005ddf
 8005dc4:	08005dcd 	.word	0x08005dcd
 8005dc8:	08005e63 	.word	0x08005e63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d046      	beq.n	8005e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ddc:	e043      	b.n	8005e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005de6:	d140      	bne.n	8005e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005dec:	e03d      	b.n	8005e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df6:	d121      	bne.n	8005e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d837      	bhi.n	8005e6e <DMA_CheckFifoParam+0xda>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <DMA_CheckFifoParam+0x70>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e15 	.word	0x08005e15
 8005e08:	08005e1b 	.word	0x08005e1b
 8005e0c:	08005e15 	.word	0x08005e15
 8005e10:	08005e2d 	.word	0x08005e2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e030      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d025      	beq.n	8005e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e2a:	e022      	b.n	8005e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e34:	d11f      	bne.n	8005e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e3a:	e01c      	b.n	8005e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d903      	bls.n	8005e4a <DMA_CheckFifoParam+0xb6>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d003      	beq.n	8005e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e48:	e018      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e4e:	e015      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00e      	beq.n	8005e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e60:	e00b      	b.n	8005e7a <DMA_CheckFifoParam+0xe6>
      break;
 8005e62:	bf00      	nop
 8005e64:	e00a      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e66:	bf00      	nop
 8005e68:	e008      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e006      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e004      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
      break;
 8005e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop

08005e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	e16b      	b.n	8006180 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	f040 815a 	bne.w	800617a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d005      	beq.n	8005ede <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d130      	bne.n	8005f40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	2203      	movs	r2, #3
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f14:	2201      	movs	r2, #1
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	43db      	mvns	r3, r3
 8005f1e:	69ba      	ldr	r2, [r7, #24]
 8005f20:	4013      	ands	r3, r2
 8005f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	091b      	lsrs	r3, r3, #4
 8005f2a:	f003 0201 	and.w	r2, r3, #1
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d017      	beq.n	8005f7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	2203      	movs	r2, #3
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	689a      	ldr	r2, [r3, #8]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f003 0303 	and.w	r3, r3, #3
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d123      	bne.n	8005fd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	08da      	lsrs	r2, r3, #3
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3208      	adds	r2, #8
 8005f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	220f      	movs	r2, #15
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	08da      	lsrs	r2, r3, #3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	3208      	adds	r2, #8
 8005fca:	69b9      	ldr	r1, [r7, #24]
 8005fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	2203      	movs	r2, #3
 8005fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 0203 	and.w	r2, r3, #3
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80b4 	beq.w	800617a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	4b60      	ldr	r3, [pc, #384]	; (8006198 <HAL_GPIO_Init+0x30c>)
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	4a5f      	ldr	r2, [pc, #380]	; (8006198 <HAL_GPIO_Init+0x30c>)
 800601c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006020:	6453      	str	r3, [r2, #68]	; 0x44
 8006022:	4b5d      	ldr	r3, [pc, #372]	; (8006198 <HAL_GPIO_Init+0x30c>)
 8006024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800602e:	4a5b      	ldr	r2, [pc, #364]	; (800619c <HAL_GPIO_Init+0x310>)
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	089b      	lsrs	r3, r3, #2
 8006034:	3302      	adds	r3, #2
 8006036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	220f      	movs	r2, #15
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	43db      	mvns	r3, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4013      	ands	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a52      	ldr	r2, [pc, #328]	; (80061a0 <HAL_GPIO_Init+0x314>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d02b      	beq.n	80060b2 <HAL_GPIO_Init+0x226>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a51      	ldr	r2, [pc, #324]	; (80061a4 <HAL_GPIO_Init+0x318>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d025      	beq.n	80060ae <HAL_GPIO_Init+0x222>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a50      	ldr	r2, [pc, #320]	; (80061a8 <HAL_GPIO_Init+0x31c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01f      	beq.n	80060aa <HAL_GPIO_Init+0x21e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a4f      	ldr	r2, [pc, #316]	; (80061ac <HAL_GPIO_Init+0x320>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d019      	beq.n	80060a6 <HAL_GPIO_Init+0x21a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a4e      	ldr	r2, [pc, #312]	; (80061b0 <HAL_GPIO_Init+0x324>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <HAL_GPIO_Init+0x216>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a4d      	ldr	r2, [pc, #308]	; (80061b4 <HAL_GPIO_Init+0x328>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00d      	beq.n	800609e <HAL_GPIO_Init+0x212>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a4c      	ldr	r2, [pc, #304]	; (80061b8 <HAL_GPIO_Init+0x32c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d007      	beq.n	800609a <HAL_GPIO_Init+0x20e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a4b      	ldr	r2, [pc, #300]	; (80061bc <HAL_GPIO_Init+0x330>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d101      	bne.n	8006096 <HAL_GPIO_Init+0x20a>
 8006092:	2307      	movs	r3, #7
 8006094:	e00e      	b.n	80060b4 <HAL_GPIO_Init+0x228>
 8006096:	2308      	movs	r3, #8
 8006098:	e00c      	b.n	80060b4 <HAL_GPIO_Init+0x228>
 800609a:	2306      	movs	r3, #6
 800609c:	e00a      	b.n	80060b4 <HAL_GPIO_Init+0x228>
 800609e:	2305      	movs	r3, #5
 80060a0:	e008      	b.n	80060b4 <HAL_GPIO_Init+0x228>
 80060a2:	2304      	movs	r3, #4
 80060a4:	e006      	b.n	80060b4 <HAL_GPIO_Init+0x228>
 80060a6:	2303      	movs	r3, #3
 80060a8:	e004      	b.n	80060b4 <HAL_GPIO_Init+0x228>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e002      	b.n	80060b4 <HAL_GPIO_Init+0x228>
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <HAL_GPIO_Init+0x228>
 80060b2:	2300      	movs	r3, #0
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	f002 0203 	and.w	r2, r2, #3
 80060ba:	0092      	lsls	r2, r2, #2
 80060bc:	4093      	lsls	r3, r2
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060c4:	4935      	ldr	r1, [pc, #212]	; (800619c <HAL_GPIO_Init+0x310>)
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	089b      	lsrs	r3, r3, #2
 80060ca:	3302      	adds	r3, #2
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060d2:	4b3b      	ldr	r3, [pc, #236]	; (80061c0 <HAL_GPIO_Init+0x334>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	43db      	mvns	r3, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4013      	ands	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060f6:	4a32      	ldr	r2, [pc, #200]	; (80061c0 <HAL_GPIO_Init+0x334>)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060fc:	4b30      	ldr	r3, [pc, #192]	; (80061c0 <HAL_GPIO_Init+0x334>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	43db      	mvns	r3, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4013      	ands	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006120:	4a27      	ldr	r2, [pc, #156]	; (80061c0 <HAL_GPIO_Init+0x334>)
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006126:	4b26      	ldr	r3, [pc, #152]	; (80061c0 <HAL_GPIO_Init+0x334>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	43db      	mvns	r3, r3
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4013      	ands	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800614a:	4a1d      	ldr	r2, [pc, #116]	; (80061c0 <HAL_GPIO_Init+0x334>)
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006150:	4b1b      	ldr	r3, [pc, #108]	; (80061c0 <HAL_GPIO_Init+0x334>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	43db      	mvns	r3, r3
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	4013      	ands	r3, r2
 800615e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006174:	4a12      	ldr	r2, [pc, #72]	; (80061c0 <HAL_GPIO_Init+0x334>)
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	3301      	adds	r3, #1
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2b0f      	cmp	r3, #15
 8006184:	f67f ae90 	bls.w	8005ea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	3724      	adds	r7, #36	; 0x24
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40023800 	.word	0x40023800
 800619c:	40013800 	.word	0x40013800
 80061a0:	40020000 	.word	0x40020000
 80061a4:	40020400 	.word	0x40020400
 80061a8:	40020800 	.word	0x40020800
 80061ac:	40020c00 	.word	0x40020c00
 80061b0:	40021000 	.word	0x40021000
 80061b4:	40021400 	.word	0x40021400
 80061b8:	40021800 	.word	0x40021800
 80061bc:	40021c00 	.word	0x40021c00
 80061c0:	40013c00 	.word	0x40013c00

080061c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
 80061d0:	4613      	mov	r3, r2
 80061d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061d4:	787b      	ldrb	r3, [r7, #1]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061da:	887a      	ldrh	r2, [r7, #2]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061e0:	e003      	b.n	80061ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061e2:	887b      	ldrh	r3, [r7, #2]
 80061e4:	041a      	lsls	r2, r3, #16
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	619a      	str	r2, [r3, #24]
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
	...

080061f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b086      	sub	sp, #24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e267      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d075      	beq.n	8006302 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006216:	4b88      	ldr	r3, [pc, #544]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f003 030c 	and.w	r3, r3, #12
 800621e:	2b04      	cmp	r3, #4
 8006220:	d00c      	beq.n	800623c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006222:	4b85      	ldr	r3, [pc, #532]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800622a:	2b08      	cmp	r3, #8
 800622c:	d112      	bne.n	8006254 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622e:	4b82      	ldr	r3, [pc, #520]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800623a:	d10b      	bne.n	8006254 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800623c:	4b7e      	ldr	r3, [pc, #504]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d05b      	beq.n	8006300 <HAL_RCC_OscConfig+0x108>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d157      	bne.n	8006300 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e242      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800625c:	d106      	bne.n	800626c <HAL_RCC_OscConfig+0x74>
 800625e:	4b76      	ldr	r3, [pc, #472]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a75      	ldr	r2, [pc, #468]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006268:	6013      	str	r3, [r2, #0]
 800626a:	e01d      	b.n	80062a8 <HAL_RCC_OscConfig+0xb0>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006274:	d10c      	bne.n	8006290 <HAL_RCC_OscConfig+0x98>
 8006276:	4b70      	ldr	r3, [pc, #448]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a6f      	ldr	r2, [pc, #444]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 800627c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	4b6d      	ldr	r3, [pc, #436]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a6c      	ldr	r2, [pc, #432]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	e00b      	b.n	80062a8 <HAL_RCC_OscConfig+0xb0>
 8006290:	4b69      	ldr	r3, [pc, #420]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a68      	ldr	r2, [pc, #416]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006296:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	4b66      	ldr	r3, [pc, #408]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a65      	ldr	r2, [pc, #404]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 80062a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d013      	beq.n	80062d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b0:	f7ff f952 	bl	8005558 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b8:	f7ff f94e 	bl	8005558 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b64      	cmp	r3, #100	; 0x64
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e207      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062ca:	4b5b      	ldr	r3, [pc, #364]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f0      	beq.n	80062b8 <HAL_RCC_OscConfig+0xc0>
 80062d6:	e014      	b.n	8006302 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d8:	f7ff f93e 	bl	8005558 <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062de:	e008      	b.n	80062f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062e0:	f7ff f93a 	bl	8005558 <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b64      	cmp	r3, #100	; 0x64
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e1f3      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062f2:	4b51      	ldr	r3, [pc, #324]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1f0      	bne.n	80062e0 <HAL_RCC_OscConfig+0xe8>
 80062fe:	e000      	b.n	8006302 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d063      	beq.n	80063d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800630e:	4b4a      	ldr	r3, [pc, #296]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 030c 	and.w	r3, r3, #12
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00b      	beq.n	8006332 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800631a:	4b47      	ldr	r3, [pc, #284]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006322:	2b08      	cmp	r3, #8
 8006324:	d11c      	bne.n	8006360 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006326:	4b44      	ldr	r3, [pc, #272]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d116      	bne.n	8006360 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006332:	4b41      	ldr	r3, [pc, #260]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_RCC_OscConfig+0x152>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d001      	beq.n	800634a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e1c7      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800634a:	4b3b      	ldr	r3, [pc, #236]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	4937      	ldr	r1, [pc, #220]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 800635a:	4313      	orrs	r3, r2
 800635c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800635e:	e03a      	b.n	80063d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d020      	beq.n	80063aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006368:	4b34      	ldr	r3, [pc, #208]	; (800643c <HAL_RCC_OscConfig+0x244>)
 800636a:	2201      	movs	r2, #1
 800636c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636e:	f7ff f8f3 	bl	8005558 <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006376:	f7ff f8ef 	bl	8005558 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e1a8      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006388:	4b2b      	ldr	r3, [pc, #172]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0f0      	beq.n	8006376 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006394:	4b28      	ldr	r3, [pc, #160]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4925      	ldr	r1, [pc, #148]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	600b      	str	r3, [r1, #0]
 80063a8:	e015      	b.n	80063d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063aa:	4b24      	ldr	r3, [pc, #144]	; (800643c <HAL_RCC_OscConfig+0x244>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b0:	f7ff f8d2 	bl	8005558 <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063b8:	f7ff f8ce 	bl	8005558 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e187      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ca:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0302 	and.w	r3, r3, #2
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f0      	bne.n	80063b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d036      	beq.n	8006450 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d016      	beq.n	8006418 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ea:	4b15      	ldr	r3, [pc, #84]	; (8006440 <HAL_RCC_OscConfig+0x248>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f0:	f7ff f8b2 	bl	8005558 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f8:	f7ff f8ae 	bl	8005558 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e167      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <HAL_RCC_OscConfig+0x240>)
 800640c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0f0      	beq.n	80063f8 <HAL_RCC_OscConfig+0x200>
 8006416:	e01b      	b.n	8006450 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006418:	4b09      	ldr	r3, [pc, #36]	; (8006440 <HAL_RCC_OscConfig+0x248>)
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800641e:	f7ff f89b 	bl	8005558 <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006424:	e00e      	b.n	8006444 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006426:	f7ff f897 	bl	8005558 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d907      	bls.n	8006444 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e150      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
 8006438:	40023800 	.word	0x40023800
 800643c:	42470000 	.word	0x42470000
 8006440:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006444:	4b88      	ldr	r3, [pc, #544]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1ea      	bne.n	8006426 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0304 	and.w	r3, r3, #4
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 8097 	beq.w	800658c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800645e:	2300      	movs	r3, #0
 8006460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006462:	4b81      	ldr	r3, [pc, #516]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10f      	bne.n	800648e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	4b7d      	ldr	r3, [pc, #500]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	4a7c      	ldr	r2, [pc, #496]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647c:	6413      	str	r3, [r2, #64]	; 0x40
 800647e:	4b7a      	ldr	r3, [pc, #488]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006486:	60bb      	str	r3, [r7, #8]
 8006488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800648a:	2301      	movs	r3, #1
 800648c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648e:	4b77      	ldr	r3, [pc, #476]	; (800666c <HAL_RCC_OscConfig+0x474>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006496:	2b00      	cmp	r3, #0
 8006498:	d118      	bne.n	80064cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800649a:	4b74      	ldr	r3, [pc, #464]	; (800666c <HAL_RCC_OscConfig+0x474>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a73      	ldr	r2, [pc, #460]	; (800666c <HAL_RCC_OscConfig+0x474>)
 80064a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a6:	f7ff f857 	bl	8005558 <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ac:	e008      	b.n	80064c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ae:	f7ff f853 	bl	8005558 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e10c      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c0:	4b6a      	ldr	r3, [pc, #424]	; (800666c <HAL_RCC_OscConfig+0x474>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0f0      	beq.n	80064ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d106      	bne.n	80064e2 <HAL_RCC_OscConfig+0x2ea>
 80064d4:	4b64      	ldr	r3, [pc, #400]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 80064d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d8:	4a63      	ldr	r2, [pc, #396]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	6713      	str	r3, [r2, #112]	; 0x70
 80064e0:	e01c      	b.n	800651c <HAL_RCC_OscConfig+0x324>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	2b05      	cmp	r3, #5
 80064e8:	d10c      	bne.n	8006504 <HAL_RCC_OscConfig+0x30c>
 80064ea:	4b5f      	ldr	r3, [pc, #380]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	4a5e      	ldr	r2, [pc, #376]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 80064f0:	f043 0304 	orr.w	r3, r3, #4
 80064f4:	6713      	str	r3, [r2, #112]	; 0x70
 80064f6:	4b5c      	ldr	r3, [pc, #368]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	4a5b      	ldr	r2, [pc, #364]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	6713      	str	r3, [r2, #112]	; 0x70
 8006502:	e00b      	b.n	800651c <HAL_RCC_OscConfig+0x324>
 8006504:	4b58      	ldr	r3, [pc, #352]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006508:	4a57      	ldr	r2, [pc, #348]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	6713      	str	r3, [r2, #112]	; 0x70
 8006510:	4b55      	ldr	r3, [pc, #340]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006514:	4a54      	ldr	r2, [pc, #336]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006516:	f023 0304 	bic.w	r3, r3, #4
 800651a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d015      	beq.n	8006550 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006524:	f7ff f818 	bl	8005558 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800652a:	e00a      	b.n	8006542 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800652c:	f7ff f814 	bl	8005558 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	f241 3288 	movw	r2, #5000	; 0x1388
 800653a:	4293      	cmp	r3, r2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e0cb      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006542:	4b49      	ldr	r3, [pc, #292]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0ee      	beq.n	800652c <HAL_RCC_OscConfig+0x334>
 800654e:	e014      	b.n	800657a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006550:	f7ff f802 	bl	8005558 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006556:	e00a      	b.n	800656e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006558:	f7fe fffe 	bl	8005558 <HAL_GetTick>
 800655c:	4602      	mov	r2, r0
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	f241 3288 	movw	r2, #5000	; 0x1388
 8006566:	4293      	cmp	r3, r2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e0b5      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800656e:	4b3e      	ldr	r3, [pc, #248]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1ee      	bne.n	8006558 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d105      	bne.n	800658c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006580:	4b39      	ldr	r3, [pc, #228]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	4a38      	ldr	r2, [pc, #224]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800658a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 80a1 	beq.w	80066d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006596:	4b34      	ldr	r3, [pc, #208]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 030c 	and.w	r3, r3, #12
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d05c      	beq.n	800665c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d141      	bne.n	800662e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065aa:	4b31      	ldr	r3, [pc, #196]	; (8006670 <HAL_RCC_OscConfig+0x478>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b0:	f7fe ffd2 	bl	8005558 <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b8:	f7fe ffce 	bl	8005558 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e087      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ca:	4b27      	ldr	r3, [pc, #156]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69da      	ldr	r2, [r3, #28]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	019b      	lsls	r3, r3, #6
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	3b01      	subs	r3, #1
 80065f0:	041b      	lsls	r3, r3, #16
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	061b      	lsls	r3, r3, #24
 80065fa:	491b      	ldr	r1, [pc, #108]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006600:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <HAL_RCC_OscConfig+0x478>)
 8006602:	2201      	movs	r2, #1
 8006604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006606:	f7fe ffa7 	bl	8005558 <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800660e:	f7fe ffa3 	bl	8005558 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e05c      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006620:	4b11      	ldr	r3, [pc, #68]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0f0      	beq.n	800660e <HAL_RCC_OscConfig+0x416>
 800662c:	e054      	b.n	80066d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800662e:	4b10      	ldr	r3, [pc, #64]	; (8006670 <HAL_RCC_OscConfig+0x478>)
 8006630:	2200      	movs	r2, #0
 8006632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006634:	f7fe ff90 	bl	8005558 <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800663c:	f7fe ff8c 	bl	8005558 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b02      	cmp	r3, #2
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e045      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664e:	4b06      	ldr	r3, [pc, #24]	; (8006668 <HAL_RCC_OscConfig+0x470>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1f0      	bne.n	800663c <HAL_RCC_OscConfig+0x444>
 800665a:	e03d      	b.n	80066d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d107      	bne.n	8006674 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e038      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
 8006668:	40023800 	.word	0x40023800
 800666c:	40007000 	.word	0x40007000
 8006670:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006674:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <HAL_RCC_OscConfig+0x4ec>)
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d028      	beq.n	80066d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800668c:	429a      	cmp	r2, r3
 800668e:	d121      	bne.n	80066d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d11a      	bne.n	80066d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066a4:	4013      	ands	r3, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d111      	bne.n	80066d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	085b      	lsrs	r3, r3, #1
 80066bc:	3b01      	subs	r3, #1
 80066be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d107      	bne.n	80066d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d001      	beq.n	80066d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	40023800 	.word	0x40023800

080066e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0cc      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066fc:	4b68      	ldr	r3, [pc, #416]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d90c      	bls.n	8006724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800670a:	4b65      	ldr	r3, [pc, #404]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	b2d2      	uxtb	r2, r2
 8006710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006712:	4b63      	ldr	r3, [pc, #396]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d001      	beq.n	8006724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0b8      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d020      	beq.n	8006772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800673c:	4b59      	ldr	r3, [pc, #356]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	4a58      	ldr	r2, [pc, #352]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006742:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006746:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006754:	4b53      	ldr	r3, [pc, #332]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4a52      	ldr	r2, [pc, #328]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800675e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006760:	4b50      	ldr	r3, [pc, #320]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	494d      	ldr	r1, [pc, #308]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	4313      	orrs	r3, r2
 8006770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d044      	beq.n	8006808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d107      	bne.n	8006796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006786:	4b47      	ldr	r3, [pc, #284]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d119      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e07f      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	2b02      	cmp	r3, #2
 800679c:	d003      	beq.n	80067a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d107      	bne.n	80067b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a6:	4b3f      	ldr	r3, [pc, #252]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e06f      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067b6:	4b3b      	ldr	r3, [pc, #236]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e067      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067c6:	4b37      	ldr	r3, [pc, #220]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f023 0203 	bic.w	r2, r3, #3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4934      	ldr	r1, [pc, #208]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067d8:	f7fe febe 	bl	8005558 <HAL_GetTick>
 80067dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067de:	e00a      	b.n	80067f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e0:	f7fe feba 	bl	8005558 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e04f      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067f6:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 020c 	and.w	r2, r3, #12
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	429a      	cmp	r2, r3
 8006806:	d1eb      	bne.n	80067e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006808:	4b25      	ldr	r3, [pc, #148]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	683a      	ldr	r2, [r7, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d20c      	bcs.n	8006830 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006816:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800681e:	4b20      	ldr	r3, [pc, #128]	; (80068a0 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	429a      	cmp	r2, r3
 800682a:	d001      	beq.n	8006830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e032      	b.n	8006896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800683c:	4b19      	ldr	r3, [pc, #100]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	4916      	ldr	r1, [pc, #88]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	4313      	orrs	r3, r2
 800684c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d009      	beq.n	800686e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800685a:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	490e      	ldr	r1, [pc, #56]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	4313      	orrs	r3, r2
 800686c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800686e:	f000 f821 	bl	80068b4 <HAL_RCC_GetSysClockFreq>
 8006872:	4602      	mov	r2, r0
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	091b      	lsrs	r3, r3, #4
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	490a      	ldr	r1, [pc, #40]	; (80068a8 <HAL_RCC_ClockConfig+0x1c0>)
 8006880:	5ccb      	ldrb	r3, [r1, r3]
 8006882:	fa22 f303 	lsr.w	r3, r2, r3
 8006886:	4a09      	ldr	r2, [pc, #36]	; (80068ac <HAL_RCC_ClockConfig+0x1c4>)
 8006888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <HAL_RCC_ClockConfig+0x1c8>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fe1e 	bl	80054d0 <HAL_InitTick>

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40023c00 	.word	0x40023c00
 80068a4:	40023800 	.word	0x40023800
 80068a8:	08010e54 	.word	0x08010e54
 80068ac:	200000ac 	.word	0x200000ac
 80068b0:	200000b0 	.word	0x200000b0

080068b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b8:	b094      	sub	sp, #80	; 0x50
 80068ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	647b      	str	r3, [r7, #68]	; 0x44
 80068c0:	2300      	movs	r3, #0
 80068c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c4:	2300      	movs	r3, #0
 80068c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068cc:	4b79      	ldr	r3, [pc, #484]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 030c 	and.w	r3, r3, #12
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d00d      	beq.n	80068f4 <HAL_RCC_GetSysClockFreq+0x40>
 80068d8:	2b08      	cmp	r3, #8
 80068da:	f200 80e1 	bhi.w	8006aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <HAL_RCC_GetSysClockFreq+0x34>
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	d003      	beq.n	80068ee <HAL_RCC_GetSysClockFreq+0x3a>
 80068e6:	e0db      	b.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068e8:	4b73      	ldr	r3, [pc, #460]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 80068ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068ec:	e0db      	b.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068ee:	4b73      	ldr	r3, [pc, #460]	; (8006abc <HAL_RCC_GetSysClockFreq+0x208>)
 80068f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068f2:	e0d8      	b.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068f4:	4b6f      	ldr	r3, [pc, #444]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068fe:	4b6d      	ldr	r3, [pc, #436]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d063      	beq.n	80069d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800690a:	4b6a      	ldr	r3, [pc, #424]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	099b      	lsrs	r3, r3, #6
 8006910:	2200      	movs	r2, #0
 8006912:	63bb      	str	r3, [r7, #56]	; 0x38
 8006914:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691c:	633b      	str	r3, [r7, #48]	; 0x30
 800691e:	2300      	movs	r3, #0
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
 8006922:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006926:	4622      	mov	r2, r4
 8006928:	462b      	mov	r3, r5
 800692a:	f04f 0000 	mov.w	r0, #0
 800692e:	f04f 0100 	mov.w	r1, #0
 8006932:	0159      	lsls	r1, r3, #5
 8006934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006938:	0150      	lsls	r0, r2, #5
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4621      	mov	r1, r4
 8006940:	1a51      	subs	r1, r2, r1
 8006942:	6139      	str	r1, [r7, #16]
 8006944:	4629      	mov	r1, r5
 8006946:	eb63 0301 	sbc.w	r3, r3, r1
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	f04f 0200 	mov.w	r2, #0
 8006950:	f04f 0300 	mov.w	r3, #0
 8006954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006958:	4659      	mov	r1, fp
 800695a:	018b      	lsls	r3, r1, #6
 800695c:	4651      	mov	r1, sl
 800695e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006962:	4651      	mov	r1, sl
 8006964:	018a      	lsls	r2, r1, #6
 8006966:	4651      	mov	r1, sl
 8006968:	ebb2 0801 	subs.w	r8, r2, r1
 800696c:	4659      	mov	r1, fp
 800696e:	eb63 0901 	sbc.w	r9, r3, r1
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	f04f 0300 	mov.w	r3, #0
 800697a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800697e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006982:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006986:	4690      	mov	r8, r2
 8006988:	4699      	mov	r9, r3
 800698a:	4623      	mov	r3, r4
 800698c:	eb18 0303 	adds.w	r3, r8, r3
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	462b      	mov	r3, r5
 8006994:	eb49 0303 	adc.w	r3, r9, r3
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069a6:	4629      	mov	r1, r5
 80069a8:	024b      	lsls	r3, r1, #9
 80069aa:	4621      	mov	r1, r4
 80069ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069b0:	4621      	mov	r1, r4
 80069b2:	024a      	lsls	r2, r1, #9
 80069b4:	4610      	mov	r0, r2
 80069b6:	4619      	mov	r1, r3
 80069b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ba:	2200      	movs	r2, #0
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069c4:	f7fa f970 	bl	8000ca8 <__aeabi_uldivmod>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4613      	mov	r3, r2
 80069ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d0:	e058      	b.n	8006a84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069d2:	4b38      	ldr	r3, [pc, #224]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	099b      	lsrs	r3, r3, #6
 80069d8:	2200      	movs	r2, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	4611      	mov	r1, r2
 80069de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069e2:	623b      	str	r3, [r7, #32]
 80069e4:	2300      	movs	r3, #0
 80069e6:	627b      	str	r3, [r7, #36]	; 0x24
 80069e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	f04f 0000 	mov.w	r0, #0
 80069f4:	f04f 0100 	mov.w	r1, #0
 80069f8:	0159      	lsls	r1, r3, #5
 80069fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069fe:	0150      	lsls	r0, r2, #5
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4641      	mov	r1, r8
 8006a06:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a24:	ebb2 040a 	subs.w	r4, r2, sl
 8006a28:	eb63 050b 	sbc.w	r5, r3, fp
 8006a2c:	f04f 0200 	mov.w	r2, #0
 8006a30:	f04f 0300 	mov.w	r3, #0
 8006a34:	00eb      	lsls	r3, r5, #3
 8006a36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a3a:	00e2      	lsls	r2, r4, #3
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	461d      	mov	r5, r3
 8006a40:	4643      	mov	r3, r8
 8006a42:	18e3      	adds	r3, r4, r3
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	464b      	mov	r3, r9
 8006a48:	eb45 0303 	adc.w	r3, r5, r3
 8006a4c:	607b      	str	r3, [r7, #4]
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	028b      	lsls	r3, r1, #10
 8006a5e:	4621      	mov	r1, r4
 8006a60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a64:	4621      	mov	r1, r4
 8006a66:	028a      	lsls	r2, r1, #10
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a6e:	2200      	movs	r2, #0
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	61fa      	str	r2, [r7, #28]
 8006a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a78:	f7fa f916 	bl	8000ca8 <__aeabi_uldivmod>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4613      	mov	r3, r2
 8006a82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a84:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	0c1b      	lsrs	r3, r3, #16
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	3301      	adds	r3, #1
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a9e:	e002      	b.n	8006aa6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aa2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3750      	adds	r7, #80	; 0x50
 8006aac:	46bd      	mov	sp, r7
 8006aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ab2:	bf00      	nop
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	00f42400 	.word	0x00f42400
 8006abc:	007a1200 	.word	0x007a1200

08006ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ac4:	4b03      	ldr	r3, [pc, #12]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	200000ac 	.word	0x200000ac

08006ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006adc:	f7ff fff0 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	0a9b      	lsrs	r3, r3, #10
 8006ae8:	f003 0307 	and.w	r3, r3, #7
 8006aec:	4903      	ldr	r1, [pc, #12]	; (8006afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aee:	5ccb      	ldrb	r3, [r1, r3]
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40023800 	.word	0x40023800
 8006afc:	08010e64 	.word	0x08010e64

08006b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b04:	f7ff ffdc 	bl	8006ac0 <HAL_RCC_GetHCLKFreq>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	0b5b      	lsrs	r3, r3, #13
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	4903      	ldr	r1, [pc, #12]	; (8006b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b16:	5ccb      	ldrb	r3, [r1, r3]
 8006b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40023800 	.word	0x40023800
 8006b24:	08010e64 	.word	0x08010e64

08006b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e041      	b.n	8006bbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fe fa66 	bl	8005020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f000 faec 	bl	8007144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <HAL_TIM_PWM_Start+0x24>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	bf14      	ite	ne
 8006be4:	2301      	movne	r3, #1
 8006be6:	2300      	moveq	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e022      	b.n	8006c32 <HAL_TIM_PWM_Start+0x6a>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d109      	bne.n	8006c06 <HAL_TIM_PWM_Start+0x3e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	bf14      	ite	ne
 8006bfe:	2301      	movne	r3, #1
 8006c00:	2300      	moveq	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	e015      	b.n	8006c32 <HAL_TIM_PWM_Start+0x6a>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d109      	bne.n	8006c20 <HAL_TIM_PWM_Start+0x58>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	bf14      	ite	ne
 8006c18:	2301      	movne	r3, #1
 8006c1a:	2300      	moveq	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	e008      	b.n	8006c32 <HAL_TIM_PWM_Start+0x6a>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	bf14      	ite	ne
 8006c2c:	2301      	movne	r3, #1
 8006c2e:	2300      	moveq	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e07c      	b.n	8006d34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <HAL_TIM_PWM_Start+0x82>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c48:	e013      	b.n	8006c72 <HAL_TIM_PWM_Start+0xaa>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d104      	bne.n	8006c5a <HAL_TIM_PWM_Start+0x92>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c58:	e00b      	b.n	8006c72 <HAL_TIM_PWM_Start+0xaa>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_PWM_Start+0xa2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c68:	e003      	b.n	8006c72 <HAL_TIM_PWM_Start+0xaa>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2201      	movs	r2, #1
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fcb2 	bl	80075e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2d      	ldr	r2, [pc, #180]	; (8006d3c <HAL_TIM_PWM_Start+0x174>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_TIM_PWM_Start+0xcc>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2c      	ldr	r2, [pc, #176]	; (8006d40 <HAL_TIM_PWM_Start+0x178>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d101      	bne.n	8006c98 <HAL_TIM_PWM_Start+0xd0>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e000      	b.n	8006c9a <HAL_TIM_PWM_Start+0xd2>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a22      	ldr	r2, [pc, #136]	; (8006d3c <HAL_TIM_PWM_Start+0x174>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d022      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc0:	d01d      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1f      	ldr	r2, [pc, #124]	; (8006d44 <HAL_TIM_PWM_Start+0x17c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <HAL_TIM_PWM_Start+0x180>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1c      	ldr	r2, [pc, #112]	; (8006d4c <HAL_TIM_PWM_Start+0x184>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	; (8006d40 <HAL_TIM_PWM_Start+0x178>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <HAL_TIM_PWM_Start+0x188>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a16      	ldr	r2, [pc, #88]	; (8006d54 <HAL_TIM_PWM_Start+0x18c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d111      	bne.n	8006d22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b06      	cmp	r3, #6
 8006d0e:	d010      	beq.n	8006d32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d20:	e007      	b.n	8006d32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0201 	orr.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400
 8006d44:	40000400 	.word	0x40000400
 8006d48:	40000800 	.word	0x40000800
 8006d4c:	40000c00 	.word	0x40000c00
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40001800 	.word	0x40001800

08006d58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e097      	b.n	8006e9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fe f96f 	bl	8005064 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9c:	f023 0307 	bic.w	r3, r3, #7
 8006da0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f000 f9c9 	bl	8007144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dda:	f023 0303 	bic.w	r3, r3, #3
 8006dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	4313      	orrs	r3, r2
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006df8:	f023 030c 	bic.w	r3, r3, #12
 8006dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	021b      	lsls	r3, r3, #8
 8006e14:	4313      	orrs	r3, r2
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	011a      	lsls	r2, r3, #4
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	031b      	lsls	r3, r3, #12
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ebc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ec4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006ecc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d110      	bne.n	8006ef6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d102      	bne.n	8006ee0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006eda:	7b7b      	ldrb	r3, [r7, #13]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d001      	beq.n	8006ee4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e069      	b.n	8006fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ef4:	e031      	b.n	8006f5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d110      	bne.n	8006f1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d102      	bne.n	8006f08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f02:	7b3b      	ldrb	r3, [r7, #12]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d001      	beq.n	8006f0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e055      	b.n	8006fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f1c:	e01d      	b.n	8006f5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d108      	bne.n	8006f36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d105      	bne.n	8006f36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f2a:	7b7b      	ldrb	r3, [r7, #13]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d102      	bne.n	8006f36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f30:	7b3b      	ldrb	r3, [r7, #12]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d001      	beq.n	8006f3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e03e      	b.n	8006fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_TIM_Encoder_Start+0xc4>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d008      	beq.n	8006f78 <HAL_TIM_Encoder_Start+0xd4>
 8006f66:	e00f      	b.n	8006f88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fb37 	bl	80075e4 <TIM_CCxChannelCmd>
      break;
 8006f76:	e016      	b.n	8006fa6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	2104      	movs	r1, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fb2f 	bl	80075e4 <TIM_CCxChannelCmd>
      break;
 8006f86:	e00e      	b.n	8006fa6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fb27 	bl	80075e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	2104      	movs	r1, #4
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fb20 	bl	80075e4 <TIM_CCxChannelCmd>
      break;
 8006fa4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d101      	bne.n	8006fde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fda:	2302      	movs	r3, #2
 8006fdc:	e0ae      	b.n	800713c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b0c      	cmp	r3, #12
 8006fea:	f200 809f 	bhi.w	800712c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fee:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007029 	.word	0x08007029
 8006ff8:	0800712d 	.word	0x0800712d
 8006ffc:	0800712d 	.word	0x0800712d
 8007000:	0800712d 	.word	0x0800712d
 8007004:	08007069 	.word	0x08007069
 8007008:	0800712d 	.word	0x0800712d
 800700c:	0800712d 	.word	0x0800712d
 8007010:	0800712d 	.word	0x0800712d
 8007014:	080070ab 	.word	0x080070ab
 8007018:	0800712d 	.word	0x0800712d
 800701c:	0800712d 	.word	0x0800712d
 8007020:	0800712d 	.word	0x0800712d
 8007024:	080070eb 	.word	0x080070eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68b9      	ldr	r1, [r7, #8]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f928 	bl	8007284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0208 	orr.w	r2, r2, #8
 8007042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0204 	bic.w	r2, r2, #4
 8007052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6999      	ldr	r1, [r3, #24]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	619a      	str	r2, [r3, #24]
      break;
 8007066:	e064      	b.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f978 	bl	8007364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699a      	ldr	r2, [r3, #24]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6999      	ldr	r1, [r3, #24]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	021a      	lsls	r2, r3, #8
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	619a      	str	r2, [r3, #24]
      break;
 80070a8:	e043      	b.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68b9      	ldr	r1, [r7, #8]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 f9cd 	bl	8007450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69da      	ldr	r2, [r3, #28]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0208 	orr.w	r2, r2, #8
 80070c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	69da      	ldr	r2, [r3, #28]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0204 	bic.w	r2, r2, #4
 80070d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69d9      	ldr	r1, [r3, #28]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	61da      	str	r2, [r3, #28]
      break;
 80070e8:	e023      	b.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68b9      	ldr	r1, [r7, #8]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fa21 	bl	8007538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	69da      	ldr	r2, [r3, #28]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	69d9      	ldr	r1, [r3, #28]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	021a      	lsls	r2, r3, #8
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	61da      	str	r2, [r3, #28]
      break;
 800712a:	e002      	b.n	8007132 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	75fb      	strb	r3, [r7, #23]
      break;
 8007130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800713a:	7dfb      	ldrb	r3, [r7, #23]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3718      	adds	r7, #24
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a40      	ldr	r2, [pc, #256]	; (8007258 <TIM_Base_SetConfig+0x114>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <TIM_Base_SetConfig+0x40>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007162:	d00f      	beq.n	8007184 <TIM_Base_SetConfig+0x40>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a3d      	ldr	r2, [pc, #244]	; (800725c <TIM_Base_SetConfig+0x118>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d00b      	beq.n	8007184 <TIM_Base_SetConfig+0x40>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a3c      	ldr	r2, [pc, #240]	; (8007260 <TIM_Base_SetConfig+0x11c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d007      	beq.n	8007184 <TIM_Base_SetConfig+0x40>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a3b      	ldr	r2, [pc, #236]	; (8007264 <TIM_Base_SetConfig+0x120>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d003      	beq.n	8007184 <TIM_Base_SetConfig+0x40>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a3a      	ldr	r2, [pc, #232]	; (8007268 <TIM_Base_SetConfig+0x124>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d108      	bne.n	8007196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2f      	ldr	r2, [pc, #188]	; (8007258 <TIM_Base_SetConfig+0x114>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d02b      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a4:	d027      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a2c      	ldr	r2, [pc, #176]	; (800725c <TIM_Base_SetConfig+0x118>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d023      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a2b      	ldr	r2, [pc, #172]	; (8007260 <TIM_Base_SetConfig+0x11c>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d01f      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a2a      	ldr	r2, [pc, #168]	; (8007264 <TIM_Base_SetConfig+0x120>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d01b      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a29      	ldr	r2, [pc, #164]	; (8007268 <TIM_Base_SetConfig+0x124>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d017      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a28      	ldr	r2, [pc, #160]	; (800726c <TIM_Base_SetConfig+0x128>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d013      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a27      	ldr	r2, [pc, #156]	; (8007270 <TIM_Base_SetConfig+0x12c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00f      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a26      	ldr	r2, [pc, #152]	; (8007274 <TIM_Base_SetConfig+0x130>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d00b      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a25      	ldr	r2, [pc, #148]	; (8007278 <TIM_Base_SetConfig+0x134>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d007      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a24      	ldr	r2, [pc, #144]	; (800727c <TIM_Base_SetConfig+0x138>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d003      	beq.n	80071f6 <TIM_Base_SetConfig+0xb2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a23      	ldr	r2, [pc, #140]	; (8007280 <TIM_Base_SetConfig+0x13c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d108      	bne.n	8007208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	689a      	ldr	r2, [r3, #8]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <TIM_Base_SetConfig+0x114>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d003      	beq.n	800723c <TIM_Base_SetConfig+0xf8>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a0c      	ldr	r2, [pc, #48]	; (8007268 <TIM_Base_SetConfig+0x124>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d103      	bne.n	8007244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	691a      	ldr	r2, [r3, #16]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	615a      	str	r2, [r3, #20]
}
 800724a:	bf00      	nop
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	40010000 	.word	0x40010000
 800725c:	40000400 	.word	0x40000400
 8007260:	40000800 	.word	0x40000800
 8007264:	40000c00 	.word	0x40000c00
 8007268:	40010400 	.word	0x40010400
 800726c:	40014000 	.word	0x40014000
 8007270:	40014400 	.word	0x40014400
 8007274:	40014800 	.word	0x40014800
 8007278:	40001800 	.word	0x40001800
 800727c:	40001c00 	.word	0x40001c00
 8007280:	40002000 	.word	0x40002000

08007284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	f023 0201 	bic.w	r2, r3, #1
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0303 	bic.w	r3, r3, #3
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f023 0302 	bic.w	r3, r3, #2
 80072cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a20      	ldr	r2, [pc, #128]	; (800735c <TIM_OC1_SetConfig+0xd8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_OC1_SetConfig+0x64>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a1f      	ldr	r2, [pc, #124]	; (8007360 <TIM_OC1_SetConfig+0xdc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d10c      	bne.n	8007302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f023 0308 	bic.w	r3, r3, #8
 80072ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f023 0304 	bic.w	r3, r3, #4
 8007300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a15      	ldr	r2, [pc, #84]	; (800735c <TIM_OC1_SetConfig+0xd8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d003      	beq.n	8007312 <TIM_OC1_SetConfig+0x8e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a14      	ldr	r2, [pc, #80]	; (8007360 <TIM_OC1_SetConfig+0xdc>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d111      	bne.n	8007336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	4313      	orrs	r3, r2
 8007334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	621a      	str	r2, [r3, #32]
}
 8007350:	bf00      	nop
 8007352:	371c      	adds	r7, #28
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	40010000 	.word	0x40010000
 8007360:	40010400 	.word	0x40010400

08007364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f023 0210 	bic.w	r2, r3, #16
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800739a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f023 0320 	bic.w	r3, r3, #32
 80073ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a22      	ldr	r2, [pc, #136]	; (8007448 <TIM_OC2_SetConfig+0xe4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d003      	beq.n	80073cc <TIM_OC2_SetConfig+0x68>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a21      	ldr	r2, [pc, #132]	; (800744c <TIM_OC2_SetConfig+0xe8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d10d      	bne.n	80073e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a17      	ldr	r2, [pc, #92]	; (8007448 <TIM_OC2_SetConfig+0xe4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC2_SetConfig+0x94>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a16      	ldr	r2, [pc, #88]	; (800744c <TIM_OC2_SetConfig+0xe8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d113      	bne.n	8007420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	4313      	orrs	r3, r2
 8007412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4313      	orrs	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	693a      	ldr	r2, [r7, #16]
 8007424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40010000 	.word	0x40010000
 800744c:	40010400 	.word	0x40010400

08007450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a21      	ldr	r2, [pc, #132]	; (8007530 <TIM_OC3_SetConfig+0xe0>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d003      	beq.n	80074b6 <TIM_OC3_SetConfig+0x66>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a20      	ldr	r2, [pc, #128]	; (8007534 <TIM_OC3_SetConfig+0xe4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10d      	bne.n	80074d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a16      	ldr	r2, [pc, #88]	; (8007530 <TIM_OC3_SetConfig+0xe0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d003      	beq.n	80074e2 <TIM_OC3_SetConfig+0x92>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a15      	ldr	r2, [pc, #84]	; (8007534 <TIM_OC3_SetConfig+0xe4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d113      	bne.n	800750a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	621a      	str	r2, [r3, #32]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	40010000 	.word	0x40010000
 8007534:	40010400 	.word	0x40010400

08007538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800756e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4313      	orrs	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	031b      	lsls	r3, r3, #12
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a12      	ldr	r2, [pc, #72]	; (80075dc <TIM_OC4_SetConfig+0xa4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d003      	beq.n	80075a0 <TIM_OC4_SetConfig+0x68>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a11      	ldr	r2, [pc, #68]	; (80075e0 <TIM_OC4_SetConfig+0xa8>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d109      	bne.n	80075b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	019b      	lsls	r3, r3, #6
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40010000 	.word	0x40010000
 80075e0:	40010400 	.word	0x40010400

080075e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	2201      	movs	r2, #1
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a1a      	ldr	r2, [r3, #32]
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	43db      	mvns	r3, r3
 8007606:	401a      	ands	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a1a      	ldr	r2, [r3, #32]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	6879      	ldr	r1, [r7, #4]
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	431a      	orrs	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	621a      	str	r2, [r3, #32]
}
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
	...

08007630 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007640:	2b01      	cmp	r3, #1
 8007642:	d101      	bne.n	8007648 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007644:	2302      	movs	r3, #2
 8007646:	e05a      	b.n	80076fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a21      	ldr	r2, [pc, #132]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d022      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007694:	d01d      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d018      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a1b      	ldr	r2, [pc, #108]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d013      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a1a      	ldr	r2, [pc, #104]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00e      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a18      	ldr	r2, [pc, #96]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d009      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a17      	ldr	r2, [pc, #92]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d004      	beq.n	80076d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a15      	ldr	r2, [pc, #84]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d10c      	bne.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	40010000 	.word	0x40010000
 8007710:	40000400 	.word	0x40000400
 8007714:	40000800 	.word	0x40000800
 8007718:	40000c00 	.word	0x40000c00
 800771c:	40010400 	.word	0x40010400
 8007720:	40014000 	.word	0x40014000
 8007724:	40001800 	.word	0x40001800

08007728 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800773c:	2b01      	cmp	r3, #1
 800773e:	d101      	bne.n	8007744 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007740:	2302      	movs	r3, #2
 8007742:	e03d      	b.n	80077c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	4313      	orrs	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4313      	orrs	r3, r2
 8007782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	4313      	orrs	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	69db      	ldr	r3, [r3, #28]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e03f      	b.n	800785e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fd fd9e 	bl	8005334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2224      	movs	r2, #36	; 0x24
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800780e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fd7b 	bl	800830c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	695a      	ldr	r2, [r3, #20]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b08a      	sub	sp, #40	; 0x28
 800786a:	af02      	add	r7, sp, #8
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	4613      	mov	r3, r2
 8007874:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b20      	cmp	r3, #32
 8007884:	d17c      	bne.n	8007980 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d002      	beq.n	8007892 <HAL_UART_Transmit+0x2c>
 800788c:	88fb      	ldrh	r3, [r7, #6]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e075      	b.n	8007982 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800789c:	2b01      	cmp	r3, #1
 800789e:	d101      	bne.n	80078a4 <HAL_UART_Transmit+0x3e>
 80078a0:	2302      	movs	r3, #2
 80078a2:	e06e      	b.n	8007982 <HAL_UART_Transmit+0x11c>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2221      	movs	r2, #33	; 0x21
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ba:	f7fd fe4d 	bl	8005558 <HAL_GetTick>
 80078be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	88fa      	ldrh	r2, [r7, #6]
 80078c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	88fa      	ldrh	r2, [r7, #6]
 80078ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d4:	d108      	bne.n	80078e8 <HAL_UART_Transmit+0x82>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d104      	bne.n	80078e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078de:	2300      	movs	r3, #0
 80078e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e003      	b.n	80078f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078ec:	2300      	movs	r3, #0
 80078ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80078f8:	e02a      	b.n	8007950 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	2200      	movs	r2, #0
 8007902:	2180      	movs	r1, #128	; 0x80
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 faf9 	bl	8007efc <UART_WaitOnFlagUntilTimeout>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e036      	b.n	8007982 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10b      	bne.n	8007932 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	3302      	adds	r3, #2
 800792e:	61bb      	str	r3, [r7, #24]
 8007930:	e007      	b.n	8007942 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	3301      	adds	r3, #1
 8007940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1cf      	bne.n	80078fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2200      	movs	r2, #0
 8007962:	2140      	movs	r1, #64	; 0x40
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f000 fac9 	bl	8007efc <UART_WaitOnFlagUntilTimeout>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e006      	b.n	8007982 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2220      	movs	r2, #32
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	e000      	b.n	8007982 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007980:	2302      	movs	r3, #2
  }
}
 8007982:	4618      	mov	r0, r3
 8007984:	3720      	adds	r7, #32
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b0ba      	sub	sp, #232	; 0xe8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80079be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80079ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10f      	bne.n	80079f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <HAL_UART_IRQHandler+0x66>
 80079de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fbd3 	bl	8008196 <UART_Receive_IT>
      return;
 80079f0:	e256      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80079f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 80de 	beq.w	8007bb8 <HAL_UART_IRQHandler+0x22c>
 80079fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a00:	f003 0301 	and.w	r3, r3, #1
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d106      	bne.n	8007a16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 80d1 	beq.w	8007bb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <HAL_UART_IRQHandler+0xae>
 8007a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d005      	beq.n	8007a3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	f043 0201 	orr.w	r2, r3, #1
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3e:	f003 0304 	and.w	r3, r3, #4
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <HAL_UART_IRQHandler+0xd2>
 8007a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d005      	beq.n	8007a5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	f043 0202 	orr.w	r2, r3, #2
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a62:	f003 0302 	and.w	r3, r3, #2
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00b      	beq.n	8007a82 <HAL_UART_IRQHandler+0xf6>
 8007a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	f043 0204 	orr.w	r2, r3, #4
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a86:	f003 0308 	and.w	r3, r3, #8
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d011      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x126>
 8007a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d105      	bne.n	8007aa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d005      	beq.n	8007ab2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	f043 0208 	orr.w	r2, r3, #8
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 81ed 	beq.w	8007e96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d008      	beq.n	8007ada <HAL_UART_IRQHandler+0x14e>
 8007ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d002      	beq.n	8007ada <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 fb5e 	bl	8008196 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae4:	2b40      	cmp	r3, #64	; 0x40
 8007ae6:	bf0c      	ite	eq
 8007ae8:	2301      	moveq	r3, #1
 8007aea:	2300      	movne	r3, #0
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d103      	bne.n	8007b06 <HAL_UART_IRQHandler+0x17a>
 8007afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d04f      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa66 	bl	8007fd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d141      	bne.n	8007b9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3314      	adds	r3, #20
 8007b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3314      	adds	r3, #20
 8007b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1d9      	bne.n	8007b1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d013      	beq.n	8007b96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b72:	4a7d      	ldr	r2, [pc, #500]	; (8007d68 <HAL_UART_IRQHandler+0x3dc>)
 8007b74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fd ff28 	bl	80059d0 <HAL_DMA_Abort_IT>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d016      	beq.n	8007bb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	e00e      	b.n	8007bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f99a 	bl	8007ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9c:	e00a      	b.n	8007bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f996 	bl	8007ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	e006      	b.n	8007bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f992 	bl	8007ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bb2:	e170      	b.n	8007e96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb4:	bf00      	nop
    return;
 8007bb6:	e16e      	b.n	8007e96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	f040 814a 	bne.w	8007e56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc6:	f003 0310 	and.w	r3, r3, #16
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 8143 	beq.w	8007e56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 813c 	beq.w	8007e56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bde:	2300      	movs	r3, #0
 8007be0:	60bb      	str	r3, [r7, #8]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60bb      	str	r3, [r7, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	60bb      	str	r3, [r7, #8]
 8007bf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	f040 80b4 	bne.w	8007d6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8140 	beq.w	8007e9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c22:	429a      	cmp	r2, r3
 8007c24:	f080 8139 	bcs.w	8007e9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c3a:	f000 8088 	beq.w	8007d4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	330c      	adds	r3, #12
 8007c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	330c      	adds	r3, #12
 8007c66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007c6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1d9      	bne.n	8007c3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3314      	adds	r3, #20
 8007c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e1      	bne.n	8007c8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	3314      	adds	r3, #20
 8007ccc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e3      	bne.n	8007cc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	330c      	adds	r3, #12
 8007d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1e:	f023 0310 	bic.w	r3, r3, #16
 8007d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007d30:	65ba      	str	r2, [r7, #88]	; 0x58
 8007d32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e3      	bne.n	8007d0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fd fdd1 	bl	80058f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8c0 	bl	8007ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d64:	e099      	b.n	8007e9a <HAL_UART_IRQHandler+0x50e>
 8007d66:	bf00      	nop
 8007d68:	0800809f 	.word	0x0800809f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 808b 	beq.w	8007e9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 8086 	beq.w	8007e9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	330c      	adds	r3, #12
 8007d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	e853 3f00 	ldrex	r3, [r3]
 8007da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	330c      	adds	r3, #12
 8007db2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007db6:	647a      	str	r2, [r7, #68]	; 0x44
 8007db8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e3      	bne.n	8007d92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3314      	adds	r3, #20
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3314      	adds	r3, #20
 8007dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dee:	633a      	str	r2, [r7, #48]	; 0x30
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e3      	bne.n	8007dca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0310 	bic.w	r3, r3, #16
 8007e26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007e34:	61fa      	str	r2, [r7, #28]
 8007e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	69b9      	ldr	r1, [r7, #24]
 8007e3a:	69fa      	ldr	r2, [r7, #28]
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	617b      	str	r3, [r7, #20]
   return(result);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e3      	bne.n	8007e10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 f848 	bl	8007ee4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e54:	e023      	b.n	8007e9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <HAL_UART_IRQHandler+0x4ea>
 8007e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d003      	beq.n	8007e76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f929 	bl	80080c6 <UART_Transmit_IT>
    return;
 8007e74:	e014      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x514>
 8007e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d008      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f969 	bl	8008166 <UART_EndTransmit_IT>
    return;
 8007e94:	e004      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
    return;
 8007e96:	bf00      	nop
 8007e98:	e002      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8007e9a:	bf00      	nop
 8007e9c:	e000      	b.n	8007ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8007e9e:	bf00      	nop
  }
}
 8007ea0:	37e8      	adds	r7, #232	; 0xe8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop

08007ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b090      	sub	sp, #64	; 0x40
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	4613      	mov	r3, r2
 8007f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f0c:	e050      	b.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f14:	d04c      	beq.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d007      	beq.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f1c:	f7fd fb1c 	bl	8005558 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d241      	bcs.n	8007fb0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	330c      	adds	r3, #12
 8007f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	e853 3f00 	ldrex	r3, [r3]
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f4c:	637a      	str	r2, [r7, #52]	; 0x34
 8007f4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f54:	e841 2300 	strex	r3, r2, [r1]
 8007f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e5      	bne.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	3314      	adds	r3, #20
 8007f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f023 0301 	bic.w	r3, r3, #1
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3314      	adds	r3, #20
 8007f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f80:	623a      	str	r2, [r7, #32]
 8007f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	69f9      	ldr	r1, [r7, #28]
 8007f86:	6a3a      	ldr	r2, [r7, #32]
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e5      	bne.n	8007f60 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e00f      	b.n	8007fd0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	bf0c      	ite	eq
 8007fc0:	2301      	moveq	r3, #1
 8007fc2:	2300      	movne	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d09f      	beq.n	8007f0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3740      	adds	r7, #64	; 0x40
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b095      	sub	sp, #84	; 0x54
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	330c      	adds	r3, #12
 8007fe6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	330c      	adds	r3, #12
 8007ffe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008000:	643a      	str	r2, [r7, #64]	; 0x40
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e5      	bne.n	8007fe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3314      	adds	r3, #20
 800801a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	61fb      	str	r3, [r7, #28]
   return(result);
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	f023 0301 	bic.w	r3, r3, #1
 800802a:	64bb      	str	r3, [r7, #72]	; 0x48
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3314      	adds	r3, #20
 8008032:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008034:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800803a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e5      	bne.n	8008014 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	2b01      	cmp	r3, #1
 800804e:	d119      	bne.n	8008084 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f023 0310 	bic.w	r3, r3, #16
 8008066:	647b      	str	r3, [r7, #68]	; 0x44
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008070:	61ba      	str	r2, [r7, #24]
 8008072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6979      	ldr	r1, [r7, #20]
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	613b      	str	r3, [r7, #16]
   return(result);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e5      	bne.n	8008050 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008092:	bf00      	nop
 8008094:	3754      	adds	r7, #84	; 0x54
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b084      	sub	sp, #16
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff ff09 	bl	8007ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080be:	bf00      	nop
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b21      	cmp	r3, #33	; 0x21
 80080d8:	d13e      	bne.n	8008158 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e2:	d114      	bne.n	800810e <UART_Transmit_IT+0x48>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d110      	bne.n	800810e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008100:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	1c9a      	adds	r2, r3, #2
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	621a      	str	r2, [r3, #32]
 800810c:	e008      	b.n	8008120 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	1c59      	adds	r1, r3, #1
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	6211      	str	r1, [r2, #32]
 8008118:	781a      	ldrb	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008124:	b29b      	uxth	r3, r3
 8008126:	3b01      	subs	r3, #1
 8008128:	b29b      	uxth	r3, r3
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	4619      	mov	r1, r3
 800812e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008130:	2b00      	cmp	r3, #0
 8008132:	d10f      	bne.n	8008154 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008142:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008152:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	e000      	b.n	800815a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008158:	2302      	movs	r3, #2
  }
}
 800815a:	4618      	mov	r0, r3
 800815c:	3714      	adds	r7, #20
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800817c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff fe8e 	bl	8007ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b08c      	sub	sp, #48	; 0x30
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b22      	cmp	r3, #34	; 0x22
 80081a8:	f040 80ab 	bne.w	8008302 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b4:	d117      	bne.n	80081e6 <UART_Receive_IT+0x50>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d113      	bne.n	80081e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	1c9a      	adds	r2, r3, #2
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	629a      	str	r2, [r3, #40]	; 0x28
 80081e4:	e026      	b.n	8008234 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f8:	d007      	beq.n	800820a <UART_Receive_IT+0x74>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <UART_Receive_IT+0x82>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d106      	bne.n	8008218 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	b2da      	uxtb	r2, r3
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	701a      	strb	r2, [r3, #0]
 8008216:	e008      	b.n	800822a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008224:	b2da      	uxtb	r2, r3
 8008226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008228:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822e:	1c5a      	adds	r2, r3, #1
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b01      	subs	r3, #1
 800823c:	b29b      	uxth	r3, r3
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	4619      	mov	r1, r3
 8008242:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008244:	2b00      	cmp	r3, #0
 8008246:	d15a      	bne.n	80082fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0220 	bic.w	r2, r2, #32
 8008256:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008266:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695a      	ldr	r2, [r3, #20]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0201 	bic.w	r2, r2, #1
 8008276:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008284:	2b01      	cmp	r3, #1
 8008286:	d135      	bne.n	80082f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	330c      	adds	r3, #12
 8008294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	613b      	str	r3, [r7, #16]
   return(result);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f023 0310 	bic.w	r3, r3, #16
 80082a4:	627b      	str	r3, [r7, #36]	; 0x24
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	330c      	adds	r3, #12
 80082ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ae:	623a      	str	r2, [r7, #32]
 80082b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	69f9      	ldr	r1, [r7, #28]
 80082b4:	6a3a      	ldr	r2, [r7, #32]
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80082bc:	69bb      	ldr	r3, [r7, #24]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e5      	bne.n	800828e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0310 	and.w	r3, r3, #16
 80082cc:	2b10      	cmp	r3, #16
 80082ce:	d10a      	bne.n	80082e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	60fb      	str	r3, [r7, #12]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7ff fdf9 	bl	8007ee4 <HAL_UARTEx_RxEventCallback>
 80082f2:	e002      	b.n	80082fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7ff fde1 	bl	8007ebc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	e002      	b.n	8008304 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	e000      	b.n	8008304 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008302:	2302      	movs	r3, #2
  }
}
 8008304:	4618      	mov	r0, r3
 8008306:	3730      	adds	r7, #48	; 0x30
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800830c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008310:	b0c0      	sub	sp, #256	; 0x100
 8008312:	af00      	add	r7, sp, #0
 8008314:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008328:	68d9      	ldr	r1, [r3, #12]
 800832a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	ea40 0301 	orr.w	r3, r0, r1
 8008334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800833a:	689a      	ldr	r2, [r3, #8]
 800833c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	431a      	orrs	r2, r3
 8008344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008348:	695b      	ldr	r3, [r3, #20]
 800834a:	431a      	orrs	r2, r3
 800834c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	4313      	orrs	r3, r2
 8008354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008364:	f021 010c 	bic.w	r1, r1, #12
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008372:	430b      	orrs	r3, r1
 8008374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008386:	6999      	ldr	r1, [r3, #24]
 8008388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	ea40 0301 	orr.w	r3, r0, r1
 8008392:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b8f      	ldr	r3, [pc, #572]	; (80085d8 <UART_SetConfig+0x2cc>)
 800839c:	429a      	cmp	r2, r3
 800839e:	d005      	beq.n	80083ac <UART_SetConfig+0xa0>
 80083a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b8d      	ldr	r3, [pc, #564]	; (80085dc <UART_SetConfig+0x2d0>)
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d104      	bne.n	80083b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083ac:	f7fe fba8 	bl	8006b00 <HAL_RCC_GetPCLK2Freq>
 80083b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80083b4:	e003      	b.n	80083be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80083b6:	f7fe fb8f 	bl	8006ad8 <HAL_RCC_GetPCLK1Freq>
 80083ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083c8:	f040 810c 	bne.w	80085e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083d0:	2200      	movs	r2, #0
 80083d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80083d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80083da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80083de:	4622      	mov	r2, r4
 80083e0:	462b      	mov	r3, r5
 80083e2:	1891      	adds	r1, r2, r2
 80083e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80083e6:	415b      	adcs	r3, r3
 80083e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80083ee:	4621      	mov	r1, r4
 80083f0:	eb12 0801 	adds.w	r8, r2, r1
 80083f4:	4629      	mov	r1, r5
 80083f6:	eb43 0901 	adc.w	r9, r3, r1
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800840a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800840e:	4690      	mov	r8, r2
 8008410:	4699      	mov	r9, r3
 8008412:	4623      	mov	r3, r4
 8008414:	eb18 0303 	adds.w	r3, r8, r3
 8008418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800841c:	462b      	mov	r3, r5
 800841e:	eb49 0303 	adc.w	r3, r9, r3
 8008422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008432:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800843a:	460b      	mov	r3, r1
 800843c:	18db      	adds	r3, r3, r3
 800843e:	653b      	str	r3, [r7, #80]	; 0x50
 8008440:	4613      	mov	r3, r2
 8008442:	eb42 0303 	adc.w	r3, r2, r3
 8008446:	657b      	str	r3, [r7, #84]	; 0x54
 8008448:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800844c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008450:	f7f8 fc2a 	bl	8000ca8 <__aeabi_uldivmod>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4b61      	ldr	r3, [pc, #388]	; (80085e0 <UART_SetConfig+0x2d4>)
 800845a:	fba3 2302 	umull	r2, r3, r3, r2
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	011c      	lsls	r4, r3, #4
 8008462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008466:	2200      	movs	r2, #0
 8008468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800846c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008470:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008474:	4642      	mov	r2, r8
 8008476:	464b      	mov	r3, r9
 8008478:	1891      	adds	r1, r2, r2
 800847a:	64b9      	str	r1, [r7, #72]	; 0x48
 800847c:	415b      	adcs	r3, r3
 800847e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008480:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008484:	4641      	mov	r1, r8
 8008486:	eb12 0a01 	adds.w	sl, r2, r1
 800848a:	4649      	mov	r1, r9
 800848c:	eb43 0b01 	adc.w	fp, r3, r1
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800849c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084a4:	4692      	mov	sl, r2
 80084a6:	469b      	mov	fp, r3
 80084a8:	4643      	mov	r3, r8
 80084aa:	eb1a 0303 	adds.w	r3, sl, r3
 80084ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084b2:	464b      	mov	r3, r9
 80084b4:	eb4b 0303 	adc.w	r3, fp, r3
 80084b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80084cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80084d0:	460b      	mov	r3, r1
 80084d2:	18db      	adds	r3, r3, r3
 80084d4:	643b      	str	r3, [r7, #64]	; 0x40
 80084d6:	4613      	mov	r3, r2
 80084d8:	eb42 0303 	adc.w	r3, r2, r3
 80084dc:	647b      	str	r3, [r7, #68]	; 0x44
 80084de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80084e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80084e6:	f7f8 fbdf 	bl	8000ca8 <__aeabi_uldivmod>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	4b3b      	ldr	r3, [pc, #236]	; (80085e0 <UART_SetConfig+0x2d4>)
 80084f2:	fba3 2301 	umull	r2, r3, r3, r1
 80084f6:	095b      	lsrs	r3, r3, #5
 80084f8:	2264      	movs	r2, #100	; 0x64
 80084fa:	fb02 f303 	mul.w	r3, r2, r3
 80084fe:	1acb      	subs	r3, r1, r3
 8008500:	00db      	lsls	r3, r3, #3
 8008502:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008506:	4b36      	ldr	r3, [pc, #216]	; (80085e0 <UART_SetConfig+0x2d4>)
 8008508:	fba3 2302 	umull	r2, r3, r3, r2
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	005b      	lsls	r3, r3, #1
 8008510:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008514:	441c      	add	r4, r3
 8008516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800851a:	2200      	movs	r2, #0
 800851c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008520:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008524:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008528:	4642      	mov	r2, r8
 800852a:	464b      	mov	r3, r9
 800852c:	1891      	adds	r1, r2, r2
 800852e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008530:	415b      	adcs	r3, r3
 8008532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008538:	4641      	mov	r1, r8
 800853a:	1851      	adds	r1, r2, r1
 800853c:	6339      	str	r1, [r7, #48]	; 0x30
 800853e:	4649      	mov	r1, r9
 8008540:	414b      	adcs	r3, r1
 8008542:	637b      	str	r3, [r7, #52]	; 0x34
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008550:	4659      	mov	r1, fp
 8008552:	00cb      	lsls	r3, r1, #3
 8008554:	4651      	mov	r1, sl
 8008556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800855a:	4651      	mov	r1, sl
 800855c:	00ca      	lsls	r2, r1, #3
 800855e:	4610      	mov	r0, r2
 8008560:	4619      	mov	r1, r3
 8008562:	4603      	mov	r3, r0
 8008564:	4642      	mov	r2, r8
 8008566:	189b      	adds	r3, r3, r2
 8008568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800856c:	464b      	mov	r3, r9
 800856e:	460a      	mov	r2, r1
 8008570:	eb42 0303 	adc.w	r3, r2, r3
 8008574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008584:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800858c:	460b      	mov	r3, r1
 800858e:	18db      	adds	r3, r3, r3
 8008590:	62bb      	str	r3, [r7, #40]	; 0x28
 8008592:	4613      	mov	r3, r2
 8008594:	eb42 0303 	adc.w	r3, r2, r3
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800859a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800859e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085a2:	f7f8 fb81 	bl	8000ca8 <__aeabi_uldivmod>
 80085a6:	4602      	mov	r2, r0
 80085a8:	460b      	mov	r3, r1
 80085aa:	4b0d      	ldr	r3, [pc, #52]	; (80085e0 <UART_SetConfig+0x2d4>)
 80085ac:	fba3 1302 	umull	r1, r3, r3, r2
 80085b0:	095b      	lsrs	r3, r3, #5
 80085b2:	2164      	movs	r1, #100	; 0x64
 80085b4:	fb01 f303 	mul.w	r3, r1, r3
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	3332      	adds	r3, #50	; 0x32
 80085be:	4a08      	ldr	r2, [pc, #32]	; (80085e0 <UART_SetConfig+0x2d4>)
 80085c0:	fba2 2303 	umull	r2, r3, r2, r3
 80085c4:	095b      	lsrs	r3, r3, #5
 80085c6:	f003 0207 	and.w	r2, r3, #7
 80085ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4422      	add	r2, r4
 80085d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80085d4:	e105      	b.n	80087e2 <UART_SetConfig+0x4d6>
 80085d6:	bf00      	nop
 80085d8:	40011000 	.word	0x40011000
 80085dc:	40011400 	.word	0x40011400
 80085e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80085f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80085f6:	4642      	mov	r2, r8
 80085f8:	464b      	mov	r3, r9
 80085fa:	1891      	adds	r1, r2, r2
 80085fc:	6239      	str	r1, [r7, #32]
 80085fe:	415b      	adcs	r3, r3
 8008600:	627b      	str	r3, [r7, #36]	; 0x24
 8008602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008606:	4641      	mov	r1, r8
 8008608:	1854      	adds	r4, r2, r1
 800860a:	4649      	mov	r1, r9
 800860c:	eb43 0501 	adc.w	r5, r3, r1
 8008610:	f04f 0200 	mov.w	r2, #0
 8008614:	f04f 0300 	mov.w	r3, #0
 8008618:	00eb      	lsls	r3, r5, #3
 800861a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800861e:	00e2      	lsls	r2, r4, #3
 8008620:	4614      	mov	r4, r2
 8008622:	461d      	mov	r5, r3
 8008624:	4643      	mov	r3, r8
 8008626:	18e3      	adds	r3, r4, r3
 8008628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800862c:	464b      	mov	r3, r9
 800862e:	eb45 0303 	adc.w	r3, r5, r3
 8008632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008642:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008646:	f04f 0200 	mov.w	r2, #0
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008652:	4629      	mov	r1, r5
 8008654:	008b      	lsls	r3, r1, #2
 8008656:	4621      	mov	r1, r4
 8008658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800865c:	4621      	mov	r1, r4
 800865e:	008a      	lsls	r2, r1, #2
 8008660:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008664:	f7f8 fb20 	bl	8000ca8 <__aeabi_uldivmod>
 8008668:	4602      	mov	r2, r0
 800866a:	460b      	mov	r3, r1
 800866c:	4b60      	ldr	r3, [pc, #384]	; (80087f0 <UART_SetConfig+0x4e4>)
 800866e:	fba3 2302 	umull	r2, r3, r3, r2
 8008672:	095b      	lsrs	r3, r3, #5
 8008674:	011c      	lsls	r4, r3, #4
 8008676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800867a:	2200      	movs	r2, #0
 800867c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008680:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008684:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008688:	4642      	mov	r2, r8
 800868a:	464b      	mov	r3, r9
 800868c:	1891      	adds	r1, r2, r2
 800868e:	61b9      	str	r1, [r7, #24]
 8008690:	415b      	adcs	r3, r3
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008698:	4641      	mov	r1, r8
 800869a:	1851      	adds	r1, r2, r1
 800869c:	6139      	str	r1, [r7, #16]
 800869e:	4649      	mov	r1, r9
 80086a0:	414b      	adcs	r3, r1
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80086b0:	4659      	mov	r1, fp
 80086b2:	00cb      	lsls	r3, r1, #3
 80086b4:	4651      	mov	r1, sl
 80086b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086ba:	4651      	mov	r1, sl
 80086bc:	00ca      	lsls	r2, r1, #3
 80086be:	4610      	mov	r0, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	4603      	mov	r3, r0
 80086c4:	4642      	mov	r2, r8
 80086c6:	189b      	adds	r3, r3, r2
 80086c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80086cc:	464b      	mov	r3, r9
 80086ce:	460a      	mov	r2, r1
 80086d0:	eb42 0303 	adc.w	r3, r2, r3
 80086d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80086e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80086e4:	f04f 0200 	mov.w	r2, #0
 80086e8:	f04f 0300 	mov.w	r3, #0
 80086ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80086f0:	4649      	mov	r1, r9
 80086f2:	008b      	lsls	r3, r1, #2
 80086f4:	4641      	mov	r1, r8
 80086f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086fa:	4641      	mov	r1, r8
 80086fc:	008a      	lsls	r2, r1, #2
 80086fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008702:	f7f8 fad1 	bl	8000ca8 <__aeabi_uldivmod>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4b39      	ldr	r3, [pc, #228]	; (80087f0 <UART_SetConfig+0x4e4>)
 800870c:	fba3 1302 	umull	r1, r3, r3, r2
 8008710:	095b      	lsrs	r3, r3, #5
 8008712:	2164      	movs	r1, #100	; 0x64
 8008714:	fb01 f303 	mul.w	r3, r1, r3
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	011b      	lsls	r3, r3, #4
 800871c:	3332      	adds	r3, #50	; 0x32
 800871e:	4a34      	ldr	r2, [pc, #208]	; (80087f0 <UART_SetConfig+0x4e4>)
 8008720:	fba2 2303 	umull	r2, r3, r2, r3
 8008724:	095b      	lsrs	r3, r3, #5
 8008726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800872a:	441c      	add	r4, r3
 800872c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008730:	2200      	movs	r2, #0
 8008732:	673b      	str	r3, [r7, #112]	; 0x70
 8008734:	677a      	str	r2, [r7, #116]	; 0x74
 8008736:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800873a:	4642      	mov	r2, r8
 800873c:	464b      	mov	r3, r9
 800873e:	1891      	adds	r1, r2, r2
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	415b      	adcs	r3, r3
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800874a:	4641      	mov	r1, r8
 800874c:	1851      	adds	r1, r2, r1
 800874e:	6039      	str	r1, [r7, #0]
 8008750:	4649      	mov	r1, r9
 8008752:	414b      	adcs	r3, r1
 8008754:	607b      	str	r3, [r7, #4]
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	f04f 0300 	mov.w	r3, #0
 800875e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008762:	4659      	mov	r1, fp
 8008764:	00cb      	lsls	r3, r1, #3
 8008766:	4651      	mov	r1, sl
 8008768:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800876c:	4651      	mov	r1, sl
 800876e:	00ca      	lsls	r2, r1, #3
 8008770:	4610      	mov	r0, r2
 8008772:	4619      	mov	r1, r3
 8008774:	4603      	mov	r3, r0
 8008776:	4642      	mov	r2, r8
 8008778:	189b      	adds	r3, r3, r2
 800877a:	66bb      	str	r3, [r7, #104]	; 0x68
 800877c:	464b      	mov	r3, r9
 800877e:	460a      	mov	r2, r1
 8008780:	eb42 0303 	adc.w	r3, r2, r3
 8008784:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	663b      	str	r3, [r7, #96]	; 0x60
 8008790:	667a      	str	r2, [r7, #100]	; 0x64
 8008792:	f04f 0200 	mov.w	r2, #0
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800879e:	4649      	mov	r1, r9
 80087a0:	008b      	lsls	r3, r1, #2
 80087a2:	4641      	mov	r1, r8
 80087a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087a8:	4641      	mov	r1, r8
 80087aa:	008a      	lsls	r2, r1, #2
 80087ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80087b0:	f7f8 fa7a 	bl	8000ca8 <__aeabi_uldivmod>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <UART_SetConfig+0x4e4>)
 80087ba:	fba3 1302 	umull	r1, r3, r3, r2
 80087be:	095b      	lsrs	r3, r3, #5
 80087c0:	2164      	movs	r1, #100	; 0x64
 80087c2:	fb01 f303 	mul.w	r3, r1, r3
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	3332      	adds	r3, #50	; 0x32
 80087cc:	4a08      	ldr	r2, [pc, #32]	; (80087f0 <UART_SetConfig+0x4e4>)
 80087ce:	fba2 2303 	umull	r2, r3, r2, r3
 80087d2:	095b      	lsrs	r3, r3, #5
 80087d4:	f003 020f 	and.w	r2, r3, #15
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4422      	add	r2, r4
 80087e0:	609a      	str	r2, [r3, #8]
}
 80087e2:	bf00      	nop
 80087e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80087e8:	46bd      	mov	sp, r7
 80087ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80087ee:	bf00      	nop
 80087f0:	51eb851f 	.word	0x51eb851f

080087f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008806:	2b84      	cmp	r3, #132	; 0x84
 8008808:	d005      	beq.n	8008816 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800880a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4413      	add	r3, r2
 8008812:	3303      	adds	r3, #3
 8008814:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008816:	68fb      	ldr	r3, [r7, #12]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008828:	f000 fb74 	bl	8008f14 <vTaskStartScheduler>
  
  return osOK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	bd80      	pop	{r7, pc}

08008832 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008834:	b089      	sub	sp, #36	; 0x24
 8008836:	af04      	add	r7, sp, #16
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d020      	beq.n	8008886 <osThreadCreate+0x54>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d01c      	beq.n	8008886 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685c      	ldr	r4, [r3, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681d      	ldr	r5, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691e      	ldr	r6, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff ffc8 	bl	80087f4 <makeFreeRtosPriority>
 8008864:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800886e:	9202      	str	r2, [sp, #8]
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	9100      	str	r1, [sp, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	4632      	mov	r2, r6
 8008878:	4629      	mov	r1, r5
 800887a:	4620      	mov	r0, r4
 800887c:	f000 f8ed 	bl	8008a5a <xTaskCreateStatic>
 8008880:	4603      	mov	r3, r0
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	e01c      	b.n	80088c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685c      	ldr	r4, [r3, #4]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008892:	b29e      	uxth	r6, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff ffaa 	bl	80087f4 <makeFreeRtosPriority>
 80088a0:	4602      	mov	r2, r0
 80088a2:	f107 030c 	add.w	r3, r7, #12
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	9200      	str	r2, [sp, #0]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	4632      	mov	r2, r6
 80088ae:	4629      	mov	r1, r5
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 f92f 	bl	8008b14 <xTaskCreate>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d001      	beq.n	80088c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80088bc:	2300      	movs	r3, #0
 80088be:	e000      	b.n	80088c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80088c0:	68fb      	ldr	r3, [r7, #12]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d001      	beq.n	80088e0 <osDelay+0x16>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	e000      	b.n	80088e2 <osDelay+0x18>
 80088e0:	2301      	movs	r3, #1
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 fae2 	bl	8008eac <vTaskDelay>
  
  return osOK;
 80088e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}

080088f2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f103 0208 	add.w	r2, r3, #8
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f04f 32ff 	mov.w	r2, #4294967295
 800890a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f103 0208 	add.w	r2, r3, #8
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f103 0208 	add.w	r2, r3, #8
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	68fa      	ldr	r2, [r7, #12]
 8008960:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	683a      	ldr	r2, [r7, #0]
 8008970:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	1c5a      	adds	r2, r3, #1
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	601a      	str	r2, [r3, #0]
}
 8008988:	bf00      	nop
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d103      	bne.n	80089b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	e00c      	b.n	80089ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3308      	adds	r3, #8
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	e002      	b.n	80089c2 <vListInsert+0x2e>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	60fb      	str	r3, [r7, #12]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68ba      	ldr	r2, [r7, #8]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d2f6      	bcs.n	80089bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	685a      	ldr	r2, [r3, #4]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a06:	b480      	push	{r7}
 8008a08:	b085      	sub	sp, #20
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6892      	ldr	r2, [r2, #8]
 8008a1c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6852      	ldr	r2, [r2, #4]
 8008a26:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d103      	bne.n	8008a3a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	689a      	ldr	r2, [r3, #8]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	1e5a      	subs	r2, r3, #1
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b08e      	sub	sp, #56	; 0x38
 8008a5e:	af04      	add	r7, sp, #16
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	607a      	str	r2, [r7, #4]
 8008a66:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008a80:	bf00      	nop
 8008a82:	e7fe      	b.n	8008a82 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10a      	bne.n	8008aa0 <xTaskCreateStatic+0x46>
	__asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	61fb      	str	r3, [r7, #28]
}
 8008a9c:	bf00      	nop
 8008a9e:	e7fe      	b.n	8008a9e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008aa0:	23c4      	movs	r3, #196	; 0xc4
 8008aa2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2bc4      	cmp	r3, #196	; 0xc4
 8008aa8:	d00a      	beq.n	8008ac0 <xTaskCreateStatic+0x66>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	61bb      	str	r3, [r7, #24]
}
 8008abc:	bf00      	nop
 8008abe:	e7fe      	b.n	8008abe <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008ac0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01e      	beq.n	8008b06 <xTaskCreateStatic+0xac>
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d01b      	beq.n	8008b06 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ad6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9303      	str	r3, [sp, #12]
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	9302      	str	r3, [sp, #8]
 8008ae8:	f107 0314 	add.w	r3, r7, #20
 8008aec:	9301      	str	r3, [sp, #4]
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f851 	bl	8008ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008afe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b00:	f000 f8ec 	bl	8008cdc <prvAddNewTaskToReadyList>
 8008b04:	e001      	b.n	8008b0a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b0a:	697b      	ldr	r3, [r7, #20]
	}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3728      	adds	r7, #40	; 0x28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08c      	sub	sp, #48	; 0x30
 8008b18:	af04      	add	r7, sp, #16
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	4613      	mov	r3, r2
 8008b22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b24:	88fb      	ldrh	r3, [r7, #6]
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 ff9d 	bl	8009a68 <pvPortMalloc>
 8008b2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00e      	beq.n	8008b54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b36:	20c4      	movs	r0, #196	; 0xc4
 8008b38:	f000 ff96 	bl	8009a68 <pvPortMalloc>
 8008b3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	631a      	str	r2, [r3, #48]	; 0x30
 8008b4a:	e005      	b.n	8008b58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b4c:	6978      	ldr	r0, [r7, #20]
 8008b4e:	f001 f857 	bl	8009c00 <vPortFree>
 8008b52:	e001      	b.n	8008b58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b54:	2300      	movs	r3, #0
 8008b56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d017      	beq.n	8008b8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b66:	88fa      	ldrh	r2, [r7, #6]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	9303      	str	r3, [sp, #12]
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	9302      	str	r3, [sp, #8]
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	68b9      	ldr	r1, [r7, #8]
 8008b7c:	68f8      	ldr	r0, [r7, #12]
 8008b7e:	f000 f80f 	bl	8008ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b82:	69f8      	ldr	r0, [r7, #28]
 8008b84:	f000 f8aa 	bl	8008cdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	e002      	b.n	8008b94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b94:	69bb      	ldr	r3, [r7, #24]
	}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3720      	adds	r7, #32
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
	...

08008ba0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	4413      	add	r3, r2
 8008bbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	f023 0307 	bic.w	r3, r3, #7
 8008bc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	f003 0307 	and.w	r3, r3, #7
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00a      	beq.n	8008be8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	617b      	str	r3, [r7, #20]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d01f      	beq.n	8008c2e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bee:	2300      	movs	r3, #0
 8008bf0:	61fb      	str	r3, [r7, #28]
 8008bf2:	e012      	b.n	8008c1a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bf4:	68ba      	ldr	r2, [r7, #8]
 8008bf6:	69fb      	ldr	r3, [r7, #28]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	7819      	ldrb	r1, [r3, #0]
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	3334      	adds	r3, #52	; 0x34
 8008c04:	460a      	mov	r2, r1
 8008c06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d006      	beq.n	8008c22 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	3301      	adds	r3, #1
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	2b1d      	cmp	r3, #29
 8008c1e:	d9e9      	bls.n	8008bf4 <prvInitialiseNewTask+0x54>
 8008c20:	e000      	b.n	8008c24 <prvInitialiseNewTask+0x84>
			{
				break;
 8008c22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008c2c:	e003      	b.n	8008c36 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	2b06      	cmp	r3, #6
 8008c3a:	d901      	bls.n	8008c40 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c3c:	2306      	movs	r3, #6
 8008c3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c4a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	2200      	movs	r2, #0
 8008c50:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	3304      	adds	r3, #4
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7ff fe6b 	bl	8008932 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5e:	3318      	adds	r3, #24
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7ff fe66 	bl	8008932 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	f1c3 0207 	rsb	r2, r3, #7
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	335c      	adds	r3, #92	; 0x5c
 8008c90:	2260      	movs	r2, #96	; 0x60
 8008c92:	2100      	movs	r1, #0
 8008c94:	4618      	mov	r0, r3
 8008c96:	f001 fa02 	bl	800a09e <memset>
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	4a0c      	ldr	r2, [pc, #48]	; (8008cd0 <prvInitialiseNewTask+0x130>)
 8008c9e:	661a      	str	r2, [r3, #96]	; 0x60
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	4a0c      	ldr	r2, [pc, #48]	; (8008cd4 <prvInitialiseNewTask+0x134>)
 8008ca4:	665a      	str	r2, [r3, #100]	; 0x64
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca8:	4a0b      	ldr	r2, [pc, #44]	; (8008cd8 <prvInitialiseNewTask+0x138>)
 8008caa:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	69b8      	ldr	r0, [r7, #24]
 8008cb2:	f000 fccb 	bl	800964c <pxPortInitialiseStack>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d002      	beq.n	8008cc8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc8:	bf00      	nop
 8008cca:	3720      	adds	r7, #32
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	08010e94 	.word	0x08010e94
 8008cd4:	08010eb4 	.word	0x08010eb4
 8008cd8:	08010e74 	.word	0x08010e74

08008cdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ce4:	f000 fdde 	bl	80098a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008ce8:	4b2a      	ldr	r3, [pc, #168]	; (8008d94 <prvAddNewTaskToReadyList+0xb8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3301      	adds	r3, #1
 8008cee:	4a29      	ldr	r2, [pc, #164]	; (8008d94 <prvAddNewTaskToReadyList+0xb8>)
 8008cf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cf2:	4b29      	ldr	r3, [pc, #164]	; (8008d98 <prvAddNewTaskToReadyList+0xbc>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d109      	bne.n	8008d0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cfa:	4a27      	ldr	r2, [pc, #156]	; (8008d98 <prvAddNewTaskToReadyList+0xbc>)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d00:	4b24      	ldr	r3, [pc, #144]	; (8008d94 <prvAddNewTaskToReadyList+0xb8>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d110      	bne.n	8008d2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d08:	f000 fb5a 	bl	80093c0 <prvInitialiseTaskLists>
 8008d0c:	e00d      	b.n	8008d2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d0e:	4b23      	ldr	r3, [pc, #140]	; (8008d9c <prvAddNewTaskToReadyList+0xc0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d109      	bne.n	8008d2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d16:	4b20      	ldr	r3, [pc, #128]	; (8008d98 <prvAddNewTaskToReadyList+0xbc>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d802      	bhi.n	8008d2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d24:	4a1c      	ldr	r2, [pc, #112]	; (8008d98 <prvAddNewTaskToReadyList+0xbc>)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d2a:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <prvAddNewTaskToReadyList+0xc4>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	4a1b      	ldr	r2, [pc, #108]	; (8008da0 <prvAddNewTaskToReadyList+0xc4>)
 8008d32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	2201      	movs	r2, #1
 8008d3a:	409a      	lsls	r2, r3
 8008d3c:	4b19      	ldr	r3, [pc, #100]	; (8008da4 <prvAddNewTaskToReadyList+0xc8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	4a18      	ldr	r2, [pc, #96]	; (8008da4 <prvAddNewTaskToReadyList+0xc8>)
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4a15      	ldr	r2, [pc, #84]	; (8008da8 <prvAddNewTaskToReadyList+0xcc>)
 8008d54:	441a      	add	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	4610      	mov	r0, r2
 8008d5e:	f7ff fdf5 	bl	800894c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d62:	f000 fdcf 	bl	8009904 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d66:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <prvAddNewTaskToReadyList+0xc0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00e      	beq.n	8008d8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <prvAddNewTaskToReadyList+0xbc>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d207      	bcs.n	8008d8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <prvAddNewTaskToReadyList+0xd0>)
 8008d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	20009f04 	.word	0x20009f04
 8008d98:	20009e04 	.word	0x20009e04
 8008d9c:	20009f10 	.word	0x20009f10
 8008da0:	20009f20 	.word	0x20009f20
 8008da4:	20009f0c 	.word	0x20009f0c
 8008da8:	20009e08 	.word	0x20009e08
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08a      	sub	sp, #40	; 0x28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10a      	bne.n	8008dda <vTaskDelayUntil+0x2a>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	617b      	str	r3, [r7, #20]
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <vTaskDelayUntil+0x46>
	__asm volatile
 8008de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de4:	f383 8811 	msr	BASEPRI, r3
 8008de8:	f3bf 8f6f 	isb	sy
 8008dec:	f3bf 8f4f 	dsb	sy
 8008df0:	613b      	str	r3, [r7, #16]
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008df6:	4b2a      	ldr	r3, [pc, #168]	; (8008ea0 <vTaskDelayUntil+0xf0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <vTaskDelayUntil+0x64>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	60fb      	str	r3, [r7, #12]
}
 8008e10:	bf00      	nop
 8008e12:	e7fe      	b.n	8008e12 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008e14:	f000 f8e8 	bl	8008fe8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008e18:	4b22      	ldr	r3, [pc, #136]	; (8008ea4 <vTaskDelayUntil+0xf4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4413      	add	r3, r2
 8008e26:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6a3a      	ldr	r2, [r7, #32]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d20b      	bcs.n	8008e4a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69fa      	ldr	r2, [r7, #28]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d211      	bcs.n	8008e60 <vTaskDelayUntil+0xb0>
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d90d      	bls.n	8008e60 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008e44:	2301      	movs	r3, #1
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
 8008e48:	e00a      	b.n	8008e60 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d303      	bcc.n	8008e5c <vTaskDelayUntil+0xac>
 8008e54:	69fa      	ldr	r2, [r7, #28]
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d901      	bls.n	8008e60 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	69fa      	ldr	r2, [r7, #28]
 8008e64:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2100      	movs	r1, #0
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fb83 	bl	8009580 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008e7a:	f000 f8c3 	bl	8009004 <xTaskResumeAll>
 8008e7e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d107      	bne.n	8008e96 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008e86:	4b08      	ldr	r3, [pc, #32]	; (8008ea8 <vTaskDelayUntil+0xf8>)
 8008e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8c:	601a      	str	r2, [r3, #0]
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e96:	bf00      	nop
 8008e98:	3728      	adds	r7, #40	; 0x28
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20009f2c 	.word	0x20009f2c
 8008ea4:	20009f08 	.word	0x20009f08
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d017      	beq.n	8008eee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ebe:	4b13      	ldr	r3, [pc, #76]	; (8008f0c <vTaskDelay+0x60>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00a      	beq.n	8008edc <vTaskDelay+0x30>
	__asm volatile
 8008ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	60bb      	str	r3, [r7, #8]
}
 8008ed8:	bf00      	nop
 8008eda:	e7fe      	b.n	8008eda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008edc:	f000 f884 	bl	8008fe8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fb4c 	bl	8009580 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ee8:	f000 f88c 	bl	8009004 <xTaskResumeAll>
 8008eec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d107      	bne.n	8008f04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ef4:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <vTaskDelay+0x64>)
 8008ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008efa:	601a      	str	r2, [r3, #0]
 8008efc:	f3bf 8f4f 	dsb	sy
 8008f00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f04:	bf00      	nop
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20009f2c 	.word	0x20009f2c
 8008f10:	e000ed04 	.word	0xe000ed04

08008f14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b08a      	sub	sp, #40	; 0x28
 8008f18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f22:	463a      	mov	r2, r7
 8008f24:	1d39      	adds	r1, r7, #4
 8008f26:	f107 0308 	add.w	r3, r7, #8
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fb faa2 	bl	8004474 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68ba      	ldr	r2, [r7, #8]
 8008f36:	9202      	str	r2, [sp, #8]
 8008f38:	9301      	str	r3, [sp, #4]
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	460a      	mov	r2, r1
 8008f42:	4921      	ldr	r1, [pc, #132]	; (8008fc8 <vTaskStartScheduler+0xb4>)
 8008f44:	4821      	ldr	r0, [pc, #132]	; (8008fcc <vTaskStartScheduler+0xb8>)
 8008f46:	f7ff fd88 	bl	8008a5a <xTaskCreateStatic>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	4a20      	ldr	r2, [pc, #128]	; (8008fd0 <vTaskStartScheduler+0xbc>)
 8008f4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f50:	4b1f      	ldr	r3, [pc, #124]	; (8008fd0 <vTaskStartScheduler+0xbc>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e001      	b.n	8008f62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d11b      	bne.n	8008fa0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	613b      	str	r3, [r7, #16]
}
 8008f7a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008f7c:	4b15      	ldr	r3, [pc, #84]	; (8008fd4 <vTaskStartScheduler+0xc0>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	335c      	adds	r3, #92	; 0x5c
 8008f82:	4a15      	ldr	r2, [pc, #84]	; (8008fd8 <vTaskStartScheduler+0xc4>)
 8008f84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f86:	4b15      	ldr	r3, [pc, #84]	; (8008fdc <vTaskStartScheduler+0xc8>)
 8008f88:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f8e:	4b14      	ldr	r3, [pc, #80]	; (8008fe0 <vTaskStartScheduler+0xcc>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008f94:	4b13      	ldr	r3, [pc, #76]	; (8008fe4 <vTaskStartScheduler+0xd0>)
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f9a:	f000 fbe1 	bl	8009760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f9e:	e00e      	b.n	8008fbe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa6:	d10a      	bne.n	8008fbe <vTaskStartScheduler+0xaa>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	60fb      	str	r3, [r7, #12]
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <vTaskStartScheduler+0xa8>
}
 8008fbe:	bf00      	nop
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	08010c9c 	.word	0x08010c9c
 8008fcc:	08009391 	.word	0x08009391
 8008fd0:	20009f28 	.word	0x20009f28
 8008fd4:	20009e04 	.word	0x20009e04
 8008fd8:	200000bc 	.word	0x200000bc
 8008fdc:	20009f24 	.word	0x20009f24
 8008fe0:	20009f10 	.word	0x20009f10
 8008fe4:	20009f08 	.word	0x20009f08

08008fe8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008fec:	4b04      	ldr	r3, [pc, #16]	; (8009000 <vTaskSuspendAll+0x18>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	4a03      	ldr	r2, [pc, #12]	; (8009000 <vTaskSuspendAll+0x18>)
 8008ff4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008ff6:	bf00      	nop
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	20009f2c 	.word	0x20009f2c

08009004 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800900e:	2300      	movs	r3, #0
 8009010:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009012:	4b41      	ldr	r3, [pc, #260]	; (8009118 <xTaskResumeAll+0x114>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <xTaskResumeAll+0x2c>
	__asm volatile
 800901a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901e:	f383 8811 	msr	BASEPRI, r3
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	f3bf 8f4f 	dsb	sy
 800902a:	603b      	str	r3, [r7, #0]
}
 800902c:	bf00      	nop
 800902e:	e7fe      	b.n	800902e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009030:	f000 fc38 	bl	80098a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009034:	4b38      	ldr	r3, [pc, #224]	; (8009118 <xTaskResumeAll+0x114>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3b01      	subs	r3, #1
 800903a:	4a37      	ldr	r2, [pc, #220]	; (8009118 <xTaskResumeAll+0x114>)
 800903c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800903e:	4b36      	ldr	r3, [pc, #216]	; (8009118 <xTaskResumeAll+0x114>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d161      	bne.n	800910a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009046:	4b35      	ldr	r3, [pc, #212]	; (800911c <xTaskResumeAll+0x118>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d05d      	beq.n	800910a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800904e:	e02e      	b.n	80090ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009050:	4b33      	ldr	r3, [pc, #204]	; (8009120 <xTaskResumeAll+0x11c>)
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3318      	adds	r3, #24
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff fcd2 	bl	8008a06 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	3304      	adds	r3, #4
 8009066:	4618      	mov	r0, r3
 8009068:	f7ff fccd 	bl	8008a06 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	2201      	movs	r2, #1
 8009072:	409a      	lsls	r2, r3
 8009074:	4b2b      	ldr	r3, [pc, #172]	; (8009124 <xTaskResumeAll+0x120>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4313      	orrs	r3, r2
 800907a:	4a2a      	ldr	r2, [pc, #168]	; (8009124 <xTaskResumeAll+0x120>)
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4a27      	ldr	r2, [pc, #156]	; (8009128 <xTaskResumeAll+0x124>)
 800908c:	441a      	add	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3304      	adds	r3, #4
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f7ff fc59 	bl	800894c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909e:	4b23      	ldr	r3, [pc, #140]	; (800912c <xTaskResumeAll+0x128>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d302      	bcc.n	80090ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80090a8:	4b21      	ldr	r3, [pc, #132]	; (8009130 <xTaskResumeAll+0x12c>)
 80090aa:	2201      	movs	r2, #1
 80090ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090ae:	4b1c      	ldr	r3, [pc, #112]	; (8009120 <xTaskResumeAll+0x11c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1cc      	bne.n	8009050 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d001      	beq.n	80090c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090bc:	f000 fa22 	bl	8009504 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090c0:	4b1c      	ldr	r3, [pc, #112]	; (8009134 <xTaskResumeAll+0x130>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d010      	beq.n	80090ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090cc:	f000 f846 	bl	800915c <xTaskIncrementTick>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d002      	beq.n	80090dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80090d6:	4b16      	ldr	r3, [pc, #88]	; (8009130 <xTaskResumeAll+0x12c>)
 80090d8:	2201      	movs	r2, #1
 80090da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	3b01      	subs	r3, #1
 80090e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1f1      	bne.n	80090cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80090e8:	4b12      	ldr	r3, [pc, #72]	; (8009134 <xTaskResumeAll+0x130>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090ee:	4b10      	ldr	r3, [pc, #64]	; (8009130 <xTaskResumeAll+0x12c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d009      	beq.n	800910a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090f6:	2301      	movs	r3, #1
 80090f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <xTaskResumeAll+0x134>)
 80090fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	f3bf 8f4f 	dsb	sy
 8009106:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800910a:	f000 fbfb 	bl	8009904 <vPortExitCritical>

	return xAlreadyYielded;
 800910e:	68bb      	ldr	r3, [r7, #8]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20009f2c 	.word	0x20009f2c
 800911c:	20009f04 	.word	0x20009f04
 8009120:	20009ec4 	.word	0x20009ec4
 8009124:	20009f0c 	.word	0x20009f0c
 8009128:	20009e08 	.word	0x20009e08
 800912c:	20009e04 	.word	0x20009e04
 8009130:	20009f18 	.word	0x20009f18
 8009134:	20009f14 	.word	0x20009f14
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009142:	4b05      	ldr	r3, [pc, #20]	; (8009158 <xTaskGetTickCount+0x1c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009148:	687b      	ldr	r3, [r7, #4]
}
 800914a:	4618      	mov	r0, r3
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	20009f08 	.word	0x20009f08

0800915c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009162:	2300      	movs	r3, #0
 8009164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009166:	4b4e      	ldr	r3, [pc, #312]	; (80092a0 <xTaskIncrementTick+0x144>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	f040 808e 	bne.w	800928c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009170:	4b4c      	ldr	r3, [pc, #304]	; (80092a4 <xTaskIncrementTick+0x148>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009178:	4a4a      	ldr	r2, [pc, #296]	; (80092a4 <xTaskIncrementTick+0x148>)
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d120      	bne.n	80091c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009184:	4b48      	ldr	r3, [pc, #288]	; (80092a8 <xTaskIncrementTick+0x14c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	603b      	str	r3, [r7, #0]
}
 80091a0:	bf00      	nop
 80091a2:	e7fe      	b.n	80091a2 <xTaskIncrementTick+0x46>
 80091a4:	4b40      	ldr	r3, [pc, #256]	; (80092a8 <xTaskIncrementTick+0x14c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	4b40      	ldr	r3, [pc, #256]	; (80092ac <xTaskIncrementTick+0x150>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a3e      	ldr	r2, [pc, #248]	; (80092a8 <xTaskIncrementTick+0x14c>)
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	4a3e      	ldr	r2, [pc, #248]	; (80092ac <xTaskIncrementTick+0x150>)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	4b3d      	ldr	r3, [pc, #244]	; (80092b0 <xTaskIncrementTick+0x154>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3301      	adds	r3, #1
 80091be:	4a3c      	ldr	r2, [pc, #240]	; (80092b0 <xTaskIncrementTick+0x154>)
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	f000 f99f 	bl	8009504 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091c6:	4b3b      	ldr	r3, [pc, #236]	; (80092b4 <xTaskIncrementTick+0x158>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d348      	bcc.n	8009262 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091d0:	4b35      	ldr	r3, [pc, #212]	; (80092a8 <xTaskIncrementTick+0x14c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d104      	bne.n	80091e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091da:	4b36      	ldr	r3, [pc, #216]	; (80092b4 <xTaskIncrementTick+0x158>)
 80091dc:	f04f 32ff 	mov.w	r2, #4294967295
 80091e0:	601a      	str	r2, [r3, #0]
					break;
 80091e2:	e03e      	b.n	8009262 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091e4:	4b30      	ldr	r3, [pc, #192]	; (80092a8 <xTaskIncrementTick+0x14c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d203      	bcs.n	8009204 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091fc:	4a2d      	ldr	r2, [pc, #180]	; (80092b4 <xTaskIncrementTick+0x158>)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009202:	e02e      	b.n	8009262 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	3304      	adds	r3, #4
 8009208:	4618      	mov	r0, r3
 800920a:	f7ff fbfc 	bl	8008a06 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	3318      	adds	r3, #24
 800921a:	4618      	mov	r0, r3
 800921c:	f7ff fbf3 	bl	8008a06 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009224:	2201      	movs	r2, #1
 8009226:	409a      	lsls	r2, r3
 8009228:	4b23      	ldr	r3, [pc, #140]	; (80092b8 <xTaskIncrementTick+0x15c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4313      	orrs	r3, r2
 800922e:	4a22      	ldr	r2, [pc, #136]	; (80092b8 <xTaskIncrementTick+0x15c>)
 8009230:	6013      	str	r3, [r2, #0]
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009236:	4613      	mov	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4a1f      	ldr	r2, [pc, #124]	; (80092bc <xTaskIncrementTick+0x160>)
 8009240:	441a      	add	r2, r3
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	3304      	adds	r3, #4
 8009246:	4619      	mov	r1, r3
 8009248:	4610      	mov	r0, r2
 800924a:	f7ff fb7f 	bl	800894c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009252:	4b1b      	ldr	r3, [pc, #108]	; (80092c0 <xTaskIncrementTick+0x164>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009258:	429a      	cmp	r2, r3
 800925a:	d3b9      	bcc.n	80091d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800925c:	2301      	movs	r3, #1
 800925e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009260:	e7b6      	b.n	80091d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009262:	4b17      	ldr	r3, [pc, #92]	; (80092c0 <xTaskIncrementTick+0x164>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	4914      	ldr	r1, [pc, #80]	; (80092bc <xTaskIncrementTick+0x160>)
 800926a:	4613      	mov	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	4413      	add	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	440b      	add	r3, r1
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d901      	bls.n	800927e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800927a:	2301      	movs	r3, #1
 800927c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800927e:	4b11      	ldr	r3, [pc, #68]	; (80092c4 <xTaskIncrementTick+0x168>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009286:	2301      	movs	r3, #1
 8009288:	617b      	str	r3, [r7, #20]
 800928a:	e004      	b.n	8009296 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800928c:	4b0e      	ldr	r3, [pc, #56]	; (80092c8 <xTaskIncrementTick+0x16c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	3301      	adds	r3, #1
 8009292:	4a0d      	ldr	r2, [pc, #52]	; (80092c8 <xTaskIncrementTick+0x16c>)
 8009294:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009296:	697b      	ldr	r3, [r7, #20]
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20009f2c 	.word	0x20009f2c
 80092a4:	20009f08 	.word	0x20009f08
 80092a8:	20009ebc 	.word	0x20009ebc
 80092ac:	20009ec0 	.word	0x20009ec0
 80092b0:	20009f1c 	.word	0x20009f1c
 80092b4:	20009f24 	.word	0x20009f24
 80092b8:	20009f0c 	.word	0x20009f0c
 80092bc:	20009e08 	.word	0x20009e08
 80092c0:	20009e04 	.word	0x20009e04
 80092c4:	20009f18 	.word	0x20009f18
 80092c8:	20009f14 	.word	0x20009f14

080092cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092d2:	4b29      	ldr	r3, [pc, #164]	; (8009378 <vTaskSwitchContext+0xac>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d003      	beq.n	80092e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092da:	4b28      	ldr	r3, [pc, #160]	; (800937c <vTaskSwitchContext+0xb0>)
 80092dc:	2201      	movs	r2, #1
 80092de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092e0:	e044      	b.n	800936c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80092e2:	4b26      	ldr	r3, [pc, #152]	; (800937c <vTaskSwitchContext+0xb0>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e8:	4b25      	ldr	r3, [pc, #148]	; (8009380 <vTaskSwitchContext+0xb4>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	fab3 f383 	clz	r3, r3
 80092f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092f6:	7afb      	ldrb	r3, [r7, #11]
 80092f8:	f1c3 031f 	rsb	r3, r3, #31
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	4921      	ldr	r1, [pc, #132]	; (8009384 <vTaskSwitchContext+0xb8>)
 8009300:	697a      	ldr	r2, [r7, #20]
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	440b      	add	r3, r1
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10a      	bne.n	8009328 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009316:	f383 8811 	msr	BASEPRI, r3
 800931a:	f3bf 8f6f 	isb	sy
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	607b      	str	r3, [r7, #4]
}
 8009324:	bf00      	nop
 8009326:	e7fe      	b.n	8009326 <vTaskSwitchContext+0x5a>
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4a14      	ldr	r2, [pc, #80]	; (8009384 <vTaskSwitchContext+0xb8>)
 8009334:	4413      	add	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	605a      	str	r2, [r3, #4]
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	3308      	adds	r3, #8
 800934a:	429a      	cmp	r2, r3
 800934c:	d104      	bne.n	8009358 <vTaskSwitchContext+0x8c>
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	605a      	str	r2, [r3, #4]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	4a0a      	ldr	r2, [pc, #40]	; (8009388 <vTaskSwitchContext+0xbc>)
 8009360:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <vTaskSwitchContext+0xbc>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	335c      	adds	r3, #92	; 0x5c
 8009368:	4a08      	ldr	r2, [pc, #32]	; (800938c <vTaskSwitchContext+0xc0>)
 800936a:	6013      	str	r3, [r2, #0]
}
 800936c:	bf00      	nop
 800936e:	371c      	adds	r7, #28
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr
 8009378:	20009f2c 	.word	0x20009f2c
 800937c:	20009f18 	.word	0x20009f18
 8009380:	20009f0c 	.word	0x20009f0c
 8009384:	20009e08 	.word	0x20009e08
 8009388:	20009e04 	.word	0x20009e04
 800938c:	200000bc 	.word	0x200000bc

08009390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009398:	f000 f852 	bl	8009440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800939c:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <prvIdleTask+0x28>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d9f9      	bls.n	8009398 <prvIdleTask+0x8>
			{
				taskYIELD();
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <prvIdleTask+0x2c>)
 80093a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80093b4:	e7f0      	b.n	8009398 <prvIdleTask+0x8>
 80093b6:	bf00      	nop
 80093b8:	20009e08 	.word	0x20009e08
 80093bc:	e000ed04 	.word	0xe000ed04

080093c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093c6:	2300      	movs	r3, #0
 80093c8:	607b      	str	r3, [r7, #4]
 80093ca:	e00c      	b.n	80093e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	4613      	mov	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	4a12      	ldr	r2, [pc, #72]	; (8009420 <prvInitialiseTaskLists+0x60>)
 80093d8:	4413      	add	r3, r2
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff fa89 	bl	80088f2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	3301      	adds	r3, #1
 80093e4:	607b      	str	r3, [r7, #4]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2b06      	cmp	r3, #6
 80093ea:	d9ef      	bls.n	80093cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093ec:	480d      	ldr	r0, [pc, #52]	; (8009424 <prvInitialiseTaskLists+0x64>)
 80093ee:	f7ff fa80 	bl	80088f2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093f2:	480d      	ldr	r0, [pc, #52]	; (8009428 <prvInitialiseTaskLists+0x68>)
 80093f4:	f7ff fa7d 	bl	80088f2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093f8:	480c      	ldr	r0, [pc, #48]	; (800942c <prvInitialiseTaskLists+0x6c>)
 80093fa:	f7ff fa7a 	bl	80088f2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093fe:	480c      	ldr	r0, [pc, #48]	; (8009430 <prvInitialiseTaskLists+0x70>)
 8009400:	f7ff fa77 	bl	80088f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009404:	480b      	ldr	r0, [pc, #44]	; (8009434 <prvInitialiseTaskLists+0x74>)
 8009406:	f7ff fa74 	bl	80088f2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800940a:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <prvInitialiseTaskLists+0x78>)
 800940c:	4a05      	ldr	r2, [pc, #20]	; (8009424 <prvInitialiseTaskLists+0x64>)
 800940e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009410:	4b0a      	ldr	r3, [pc, #40]	; (800943c <prvInitialiseTaskLists+0x7c>)
 8009412:	4a05      	ldr	r2, [pc, #20]	; (8009428 <prvInitialiseTaskLists+0x68>)
 8009414:	601a      	str	r2, [r3, #0]
}
 8009416:	bf00      	nop
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20009e08 	.word	0x20009e08
 8009424:	20009e94 	.word	0x20009e94
 8009428:	20009ea8 	.word	0x20009ea8
 800942c:	20009ec4 	.word	0x20009ec4
 8009430:	20009ed8 	.word	0x20009ed8
 8009434:	20009ef0 	.word	0x20009ef0
 8009438:	20009ebc 	.word	0x20009ebc
 800943c:	20009ec0 	.word	0x20009ec0

08009440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009446:	e019      	b.n	800947c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009448:	f000 fa2c 	bl	80098a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800944c:	4b10      	ldr	r3, [pc, #64]	; (8009490 <prvCheckTasksWaitingTermination+0x50>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3304      	adds	r3, #4
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff fad4 	bl	8008a06 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800945e:	4b0d      	ldr	r3, [pc, #52]	; (8009494 <prvCheckTasksWaitingTermination+0x54>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3b01      	subs	r3, #1
 8009464:	4a0b      	ldr	r2, [pc, #44]	; (8009494 <prvCheckTasksWaitingTermination+0x54>)
 8009466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009468:	4b0b      	ldr	r3, [pc, #44]	; (8009498 <prvCheckTasksWaitingTermination+0x58>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3b01      	subs	r3, #1
 800946e:	4a0a      	ldr	r2, [pc, #40]	; (8009498 <prvCheckTasksWaitingTermination+0x58>)
 8009470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009472:	f000 fa47 	bl	8009904 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f810 	bl	800949c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800947c:	4b06      	ldr	r3, [pc, #24]	; (8009498 <prvCheckTasksWaitingTermination+0x58>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e1      	bne.n	8009448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009484:	bf00      	nop
 8009486:	bf00      	nop
 8009488:	3708      	adds	r7, #8
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20009ed8 	.word	0x20009ed8
 8009494:	20009f04 	.word	0x20009f04
 8009498:	20009eec 	.word	0x20009eec

0800949c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	335c      	adds	r3, #92	; 0x5c
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fd1d 	bl	800aee8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d108      	bne.n	80094ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 fb9f 	bl	8009c00 <vPortFree>
				vPortFree( pxTCB );
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fb9c 	bl	8009c00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80094c8:	e018      	b.n	80094fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d103      	bne.n	80094dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fb93 	bl	8009c00 <vPortFree>
	}
 80094da:	e00f      	b.n	80094fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80094e2:	2b02      	cmp	r3, #2
 80094e4:	d00a      	beq.n	80094fc <prvDeleteTCB+0x60>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60fb      	str	r3, [r7, #12]
}
 80094f8:	bf00      	nop
 80094fa:	e7fe      	b.n	80094fa <prvDeleteTCB+0x5e>
	}
 80094fc:	bf00      	nop
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800950a:	4b0c      	ldr	r3, [pc, #48]	; (800953c <prvResetNextTaskUnblockTime+0x38>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d104      	bne.n	800951e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009514:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <prvResetNextTaskUnblockTime+0x3c>)
 8009516:	f04f 32ff 	mov.w	r2, #4294967295
 800951a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800951c:	e008      	b.n	8009530 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800951e:	4b07      	ldr	r3, [pc, #28]	; (800953c <prvResetNextTaskUnblockTime+0x38>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	4a04      	ldr	r2, [pc, #16]	; (8009540 <prvResetNextTaskUnblockTime+0x3c>)
 800952e:	6013      	str	r3, [r2, #0]
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	20009ebc 	.word	0x20009ebc
 8009540:	20009f24 	.word	0x20009f24

08009544 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800954a:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <xTaskGetSchedulerState+0x34>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d102      	bne.n	8009558 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009552:	2301      	movs	r3, #1
 8009554:	607b      	str	r3, [r7, #4]
 8009556:	e008      	b.n	800956a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009558:	4b08      	ldr	r3, [pc, #32]	; (800957c <xTaskGetSchedulerState+0x38>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009560:	2302      	movs	r3, #2
 8009562:	607b      	str	r3, [r7, #4]
 8009564:	e001      	b.n	800956a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009566:	2300      	movs	r3, #0
 8009568:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800956a:	687b      	ldr	r3, [r7, #4]
	}
 800956c:	4618      	mov	r0, r3
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr
 8009578:	20009f10 	.word	0x20009f10
 800957c:	20009f2c 	.word	0x20009f2c

08009580 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800958a:	4b29      	ldr	r3, [pc, #164]	; (8009630 <prvAddCurrentTaskToDelayedList+0xb0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009590:	4b28      	ldr	r3, [pc, #160]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3304      	adds	r3, #4
 8009596:	4618      	mov	r0, r3
 8009598:	f7ff fa35 	bl	8008a06 <uxListRemove>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80095a2:	4b24      	ldr	r3, [pc, #144]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	2201      	movs	r2, #1
 80095aa:	fa02 f303 	lsl.w	r3, r2, r3
 80095ae:	43da      	mvns	r2, r3
 80095b0:	4b21      	ldr	r3, [pc, #132]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4013      	ands	r3, r2
 80095b6:	4a20      	ldr	r2, [pc, #128]	; (8009638 <prvAddCurrentTaskToDelayedList+0xb8>)
 80095b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c0:	d10a      	bne.n	80095d8 <prvAddCurrentTaskToDelayedList+0x58>
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d007      	beq.n	80095d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095c8:	4b1a      	ldr	r3, [pc, #104]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	3304      	adds	r3, #4
 80095ce:	4619      	mov	r1, r3
 80095d0:	481a      	ldr	r0, [pc, #104]	; (800963c <prvAddCurrentTaskToDelayedList+0xbc>)
 80095d2:	f7ff f9bb 	bl	800894c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80095d6:	e026      	b.n	8009626 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4413      	add	r3, r2
 80095de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80095e0:	4b14      	ldr	r3, [pc, #80]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d209      	bcs.n	8009604 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095f0:	4b13      	ldr	r3, [pc, #76]	; (8009640 <prvAddCurrentTaskToDelayedList+0xc0>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	3304      	adds	r3, #4
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f7ff f9c9 	bl	8008994 <vListInsert>
}
 8009602:	e010      	b.n	8009626 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009604:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <prvAddCurrentTaskToDelayedList+0xb4>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3304      	adds	r3, #4
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7ff f9bf 	bl	8008994 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009616:	4b0c      	ldr	r3, [pc, #48]	; (8009648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	429a      	cmp	r2, r3
 800961e:	d202      	bcs.n	8009626 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009620:	4a09      	ldr	r2, [pc, #36]	; (8009648 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6013      	str	r3, [r2, #0]
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20009f08 	.word	0x20009f08
 8009634:	20009e04 	.word	0x20009e04
 8009638:	20009f0c 	.word	0x20009f0c
 800963c:	20009ef0 	.word	0x20009ef0
 8009640:	20009ec0 	.word	0x20009ec0
 8009644:	20009ebc 	.word	0x20009ebc
 8009648:	20009f24 	.word	0x20009f24

0800964c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3b04      	subs	r3, #4
 800965c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3b04      	subs	r3, #4
 800966a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f023 0201 	bic.w	r2, r3, #1
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3b04      	subs	r3, #4
 800967a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800967c:	4a0c      	ldr	r2, [pc, #48]	; (80096b0 <pxPortInitialiseStack+0x64>)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3b14      	subs	r3, #20
 8009686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	3b04      	subs	r3, #4
 8009692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f06f 0202 	mvn.w	r2, #2
 800969a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	3b20      	subs	r3, #32
 80096a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096a2:	68fb      	ldr	r3, [r7, #12]
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr
 80096b0:	080096b5 	.word	0x080096b5

080096b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80096ba:	2300      	movs	r3, #0
 80096bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80096be:	4b12      	ldr	r3, [pc, #72]	; (8009708 <prvTaskExitError+0x54>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096c6:	d00a      	beq.n	80096de <prvTaskExitError+0x2a>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	60fb      	str	r3, [r7, #12]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <prvTaskExitError+0x28>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	60bb      	str	r3, [r7, #8]
}
 80096f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80096f2:	bf00      	nop
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0fc      	beq.n	80096f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	200000b8 	.word	0x200000b8
 800970c:	00000000 	.word	0x00000000

08009710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009710:	4b07      	ldr	r3, [pc, #28]	; (8009730 <pxCurrentTCBConst2>)
 8009712:	6819      	ldr	r1, [r3, #0]
 8009714:	6808      	ldr	r0, [r1, #0]
 8009716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971a:	f380 8809 	msr	PSP, r0
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f04f 0000 	mov.w	r0, #0
 8009726:	f380 8811 	msr	BASEPRI, r0
 800972a:	4770      	bx	lr
 800972c:	f3af 8000 	nop.w

08009730 <pxCurrentTCBConst2>:
 8009730:	20009e04 	.word	0x20009e04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop

08009738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009738:	4808      	ldr	r0, [pc, #32]	; (800975c <prvPortStartFirstTask+0x24>)
 800973a:	6800      	ldr	r0, [r0, #0]
 800973c:	6800      	ldr	r0, [r0, #0]
 800973e:	f380 8808 	msr	MSP, r0
 8009742:	f04f 0000 	mov.w	r0, #0
 8009746:	f380 8814 	msr	CONTROL, r0
 800974a:	b662      	cpsie	i
 800974c:	b661      	cpsie	f
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	df00      	svc	0
 8009758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800975a:	bf00      	nop
 800975c:	e000ed08 	.word	0xe000ed08

08009760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009766:	4b46      	ldr	r3, [pc, #280]	; (8009880 <xPortStartScheduler+0x120>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a46      	ldr	r2, [pc, #280]	; (8009884 <xPortStartScheduler+0x124>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d10a      	bne.n	8009786 <xPortStartScheduler+0x26>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	613b      	str	r3, [r7, #16]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009786:	4b3e      	ldr	r3, [pc, #248]	; (8009880 <xPortStartScheduler+0x120>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a3f      	ldr	r2, [pc, #252]	; (8009888 <xPortStartScheduler+0x128>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d10a      	bne.n	80097a6 <xPortStartScheduler+0x46>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	60fb      	str	r3, [r7, #12]
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80097a6:	4b39      	ldr	r3, [pc, #228]	; (800988c <xPortStartScheduler+0x12c>)
 80097a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	22ff      	movs	r2, #255	; 0xff
 80097b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	4b31      	ldr	r3, [pc, #196]	; (8009890 <xPortStartScheduler+0x130>)
 80097cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80097ce:	4b31      	ldr	r3, [pc, #196]	; (8009894 <xPortStartScheduler+0x134>)
 80097d0:	2207      	movs	r2, #7
 80097d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097d4:	e009      	b.n	80097ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80097d6:	4b2f      	ldr	r3, [pc, #188]	; (8009894 <xPortStartScheduler+0x134>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3b01      	subs	r3, #1
 80097dc:	4a2d      	ldr	r2, [pc, #180]	; (8009894 <xPortStartScheduler+0x134>)
 80097de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f2:	2b80      	cmp	r3, #128	; 0x80
 80097f4:	d0ef      	beq.n	80097d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80097f6:	4b27      	ldr	r3, [pc, #156]	; (8009894 <xPortStartScheduler+0x134>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f1c3 0307 	rsb	r3, r3, #7
 80097fe:	2b04      	cmp	r3, #4
 8009800:	d00a      	beq.n	8009818 <xPortStartScheduler+0xb8>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	60bb      	str	r3, [r7, #8]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009818:	4b1e      	ldr	r3, [pc, #120]	; (8009894 <xPortStartScheduler+0x134>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	021b      	lsls	r3, r3, #8
 800981e:	4a1d      	ldr	r2, [pc, #116]	; (8009894 <xPortStartScheduler+0x134>)
 8009820:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009822:	4b1c      	ldr	r3, [pc, #112]	; (8009894 <xPortStartScheduler+0x134>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800982a:	4a1a      	ldr	r2, [pc, #104]	; (8009894 <xPortStartScheduler+0x134>)
 800982c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	b2da      	uxtb	r2, r3
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009836:	4b18      	ldr	r3, [pc, #96]	; (8009898 <xPortStartScheduler+0x138>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a17      	ldr	r2, [pc, #92]	; (8009898 <xPortStartScheduler+0x138>)
 800983c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009842:	4b15      	ldr	r3, [pc, #84]	; (8009898 <xPortStartScheduler+0x138>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a14      	ldr	r2, [pc, #80]	; (8009898 <xPortStartScheduler+0x138>)
 8009848:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800984c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800984e:	f000 f8dd 	bl	8009a0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009852:	4b12      	ldr	r3, [pc, #72]	; (800989c <xPortStartScheduler+0x13c>)
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009858:	f000 f8fc 	bl	8009a54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800985c:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <xPortStartScheduler+0x140>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a0f      	ldr	r2, [pc, #60]	; (80098a0 <xPortStartScheduler+0x140>)
 8009862:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009866:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009868:	f7ff ff66 	bl	8009738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800986c:	f7ff fd2e 	bl	80092cc <vTaskSwitchContext>
	prvTaskExitError();
 8009870:	f7ff ff20 	bl	80096b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	e000ed00 	.word	0xe000ed00
 8009884:	410fc271 	.word	0x410fc271
 8009888:	410fc270 	.word	0x410fc270
 800988c:	e000e400 	.word	0xe000e400
 8009890:	20009f30 	.word	0x20009f30
 8009894:	20009f34 	.word	0x20009f34
 8009898:	e000ed20 	.word	0xe000ed20
 800989c:	200000b8 	.word	0x200000b8
 80098a0:	e000ef34 	.word	0xe000ef34

080098a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	607b      	str	r3, [r7, #4]
}
 80098bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80098be:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <vPortEnterCritical+0x58>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3301      	adds	r3, #1
 80098c4:	4a0d      	ldr	r2, [pc, #52]	; (80098fc <vPortEnterCritical+0x58>)
 80098c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80098c8:	4b0c      	ldr	r3, [pc, #48]	; (80098fc <vPortEnterCritical+0x58>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d10f      	bne.n	80098f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80098d0:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <vPortEnterCritical+0x5c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	603b      	str	r3, [r7, #0]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <vPortEnterCritical+0x4a>
	}
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	200000b8 	.word	0x200000b8
 8009900:	e000ed04 	.word	0xe000ed04

08009904 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800990a:	4b12      	ldr	r3, [pc, #72]	; (8009954 <vPortExitCritical+0x50>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10a      	bne.n	8009928 <vPortExitCritical+0x24>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	607b      	str	r3, [r7, #4]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009928:	4b0a      	ldr	r3, [pc, #40]	; (8009954 <vPortExitCritical+0x50>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3b01      	subs	r3, #1
 800992e:	4a09      	ldr	r2, [pc, #36]	; (8009954 <vPortExitCritical+0x50>)
 8009930:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009932:	4b08      	ldr	r3, [pc, #32]	; (8009954 <vPortExitCritical+0x50>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d105      	bne.n	8009946 <vPortExitCritical+0x42>
 800993a:	2300      	movs	r3, #0
 800993c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009944:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	200000b8 	.word	0x200000b8
	...

08009960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009960:	f3ef 8009 	mrs	r0, PSP
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	4b15      	ldr	r3, [pc, #84]	; (80099c0 <pxCurrentTCBConst>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	f01e 0f10 	tst.w	lr, #16
 8009970:	bf08      	it	eq
 8009972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997a:	6010      	str	r0, [r2, #0]
 800997c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009980:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009984:	f380 8811 	msr	BASEPRI, r0
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f7ff fc9c 	bl	80092cc <vTaskSwitchContext>
 8009994:	f04f 0000 	mov.w	r0, #0
 8009998:	f380 8811 	msr	BASEPRI, r0
 800999c:	bc09      	pop	{r0, r3}
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	6808      	ldr	r0, [r1, #0]
 80099a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a6:	f01e 0f10 	tst.w	lr, #16
 80099aa:	bf08      	it	eq
 80099ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80099b0:	f380 8809 	msr	PSP, r0
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	f3af 8000 	nop.w

080099c0 <pxCurrentTCBConst>:
 80099c0:	20009e04 	.word	0x20009e04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80099c4:	bf00      	nop
 80099c6:	bf00      	nop

080099c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	607b      	str	r3, [r7, #4]
}
 80099e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80099e2:	f7ff fbbb 	bl	800915c <xTaskIncrementTick>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d003      	beq.n	80099f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80099ec:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <xPortSysTickHandler+0x40>)
 80099ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f2:	601a      	str	r2, [r3, #0]
 80099f4:	2300      	movs	r3, #0
 80099f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f383 8811 	msr	BASEPRI, r3
}
 80099fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a10:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <vPortSetupTimerInterrupt+0x34>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a16:	4b0b      	ldr	r3, [pc, #44]	; (8009a44 <vPortSetupTimerInterrupt+0x38>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a1c:	4b0a      	ldr	r3, [pc, #40]	; (8009a48 <vPortSetupTimerInterrupt+0x3c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a0a      	ldr	r2, [pc, #40]	; (8009a4c <vPortSetupTimerInterrupt+0x40>)
 8009a22:	fba2 2303 	umull	r2, r3, r2, r3
 8009a26:	099b      	lsrs	r3, r3, #6
 8009a28:	4a09      	ldr	r2, [pc, #36]	; (8009a50 <vPortSetupTimerInterrupt+0x44>)
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a2e:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <vPortSetupTimerInterrupt+0x34>)
 8009a30:	2207      	movs	r2, #7
 8009a32:	601a      	str	r2, [r3, #0]
}
 8009a34:	bf00      	nop
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	e000e010 	.word	0xe000e010
 8009a44:	e000e018 	.word	0xe000e018
 8009a48:	200000ac 	.word	0x200000ac
 8009a4c:	10624dd3 	.word	0x10624dd3
 8009a50:	e000e014 	.word	0xe000e014

08009a54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009a54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009a64 <vPortEnableVFP+0x10>
 8009a58:	6801      	ldr	r1, [r0, #0]
 8009a5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009a5e:	6001      	str	r1, [r0, #0]
 8009a60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009a62:	bf00      	nop
 8009a64:	e000ed88 	.word	0xe000ed88

08009a68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08a      	sub	sp, #40	; 0x28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a70:	2300      	movs	r3, #0
 8009a72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a74:	f7ff fab8 	bl	8008fe8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a78:	4b5b      	ldr	r3, [pc, #364]	; (8009be8 <pvPortMalloc+0x180>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a80:	f000 f920 	bl	8009cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a84:	4b59      	ldr	r3, [pc, #356]	; (8009bec <pvPortMalloc+0x184>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f040 8093 	bne.w	8009bb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d01d      	beq.n	8009ad4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009a98:	2208      	movs	r2, #8
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f003 0307 	and.w	r3, r3, #7
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d014      	beq.n	8009ad4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f023 0307 	bic.w	r3, r3, #7
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f003 0307 	and.w	r3, r3, #7
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <pvPortMalloc+0x6c>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	617b      	str	r3, [r7, #20]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d06e      	beq.n	8009bb8 <pvPortMalloc+0x150>
 8009ada:	4b45      	ldr	r3, [pc, #276]	; (8009bf0 <pvPortMalloc+0x188>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d869      	bhi.n	8009bb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ae4:	4b43      	ldr	r3, [pc, #268]	; (8009bf4 <pvPortMalloc+0x18c>)
 8009ae6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ae8:	4b42      	ldr	r3, [pc, #264]	; (8009bf4 <pvPortMalloc+0x18c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009aee:	e004      	b.n	8009afa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d903      	bls.n	8009b0c <pvPortMalloc+0xa4>
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1f1      	bne.n	8009af0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b0c:	4b36      	ldr	r3, [pc, #216]	; (8009be8 <pvPortMalloc+0x180>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d050      	beq.n	8009bb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b16:	6a3b      	ldr	r3, [r7, #32]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2208      	movs	r2, #8
 8009b1c:	4413      	add	r3, r2
 8009b1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	2308      	movs	r3, #8
 8009b32:	005b      	lsls	r3, r3, #1
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d91f      	bls.n	8009b78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00a      	beq.n	8009b60 <pvPortMalloc+0xf8>
	__asm volatile
 8009b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4e:	f383 8811 	msr	BASEPRI, r3
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	f3bf 8f4f 	dsb	sy
 8009b5a:	613b      	str	r3, [r7, #16]
}
 8009b5c:	bf00      	nop
 8009b5e:	e7fe      	b.n	8009b5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	1ad2      	subs	r2, r2, r3
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b72:	69b8      	ldr	r0, [r7, #24]
 8009b74:	f000 f908 	bl	8009d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b78:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <pvPortMalloc+0x188>)
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	4a1b      	ldr	r2, [pc, #108]	; (8009bf0 <pvPortMalloc+0x188>)
 8009b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b86:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <pvPortMalloc+0x188>)
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	4b1b      	ldr	r3, [pc, #108]	; (8009bf8 <pvPortMalloc+0x190>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d203      	bcs.n	8009b9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b92:	4b17      	ldr	r3, [pc, #92]	; (8009bf0 <pvPortMalloc+0x188>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a18      	ldr	r2, [pc, #96]	; (8009bf8 <pvPortMalloc+0x190>)
 8009b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	4b13      	ldr	r3, [pc, #76]	; (8009bec <pvPortMalloc+0x184>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bae:	4b13      	ldr	r3, [pc, #76]	; (8009bfc <pvPortMalloc+0x194>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	4a11      	ldr	r2, [pc, #68]	; (8009bfc <pvPortMalloc+0x194>)
 8009bb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bb8:	f7ff fa24 	bl	8009004 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00a      	beq.n	8009bdc <pvPortMalloc+0x174>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	60fb      	str	r3, [r7, #12]
}
 8009bd8:	bf00      	nop
 8009bda:	e7fe      	b.n	8009bda <pvPortMalloc+0x172>
	return pvReturn;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3728      	adds	r7, #40	; 0x28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	2000db40 	.word	0x2000db40
 8009bec:	2000db54 	.word	0x2000db54
 8009bf0:	2000db44 	.word	0x2000db44
 8009bf4:	2000db38 	.word	0x2000db38
 8009bf8:	2000db48 	.word	0x2000db48
 8009bfc:	2000db4c 	.word	0x2000db4c

08009c00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d04d      	beq.n	8009cae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c12:	2308      	movs	r3, #8
 8009c14:	425b      	negs	r3, r3
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	4413      	add	r3, r2
 8009c1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	4b24      	ldr	r3, [pc, #144]	; (8009cb8 <vPortFree+0xb8>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <vPortFree+0x44>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	60fb      	str	r3, [r7, #12]
}
 8009c40:	bf00      	nop
 8009c42:	e7fe      	b.n	8009c42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00a      	beq.n	8009c62 <vPortFree+0x62>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	60bb      	str	r3, [r7, #8]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	4b14      	ldr	r3, [pc, #80]	; (8009cb8 <vPortFree+0xb8>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d01e      	beq.n	8009cae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d11a      	bne.n	8009cae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	4b0e      	ldr	r3, [pc, #56]	; (8009cb8 <vPortFree+0xb8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	43db      	mvns	r3, r3
 8009c82:	401a      	ands	r2, r3
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c88:	f7ff f9ae 	bl	8008fe8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	4b0a      	ldr	r3, [pc, #40]	; (8009cbc <vPortFree+0xbc>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4413      	add	r3, r2
 8009c96:	4a09      	ldr	r2, [pc, #36]	; (8009cbc <vPortFree+0xbc>)
 8009c98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c9a:	6938      	ldr	r0, [r7, #16]
 8009c9c:	f000 f874 	bl	8009d88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ca0:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <vPortFree+0xc0>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	4a06      	ldr	r2, [pc, #24]	; (8009cc0 <vPortFree+0xc0>)
 8009ca8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009caa:	f7ff f9ab 	bl	8009004 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cae:	bf00      	nop
 8009cb0:	3718      	adds	r7, #24
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	2000db54 	.word	0x2000db54
 8009cbc:	2000db44 	.word	0x2000db44
 8009cc0:	2000db50 	.word	0x2000db50

08009cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cd0:	4b27      	ldr	r3, [pc, #156]	; (8009d70 <prvHeapInit+0xac>)
 8009cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00c      	beq.n	8009cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3307      	adds	r3, #7
 8009ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f023 0307 	bic.w	r3, r3, #7
 8009cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	4a1f      	ldr	r2, [pc, #124]	; (8009d70 <prvHeapInit+0xac>)
 8009cf4:	4413      	add	r3, r2
 8009cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cfc:	4a1d      	ldr	r2, [pc, #116]	; (8009d74 <prvHeapInit+0xb0>)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d02:	4b1c      	ldr	r3, [pc, #112]	; (8009d74 <prvHeapInit+0xb0>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d10:	2208      	movs	r2, #8
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f023 0307 	bic.w	r3, r3, #7
 8009d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	4a15      	ldr	r2, [pc, #84]	; (8009d78 <prvHeapInit+0xb4>)
 8009d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d26:	4b14      	ldr	r3, [pc, #80]	; (8009d78 <prvHeapInit+0xb4>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d2e:	4b12      	ldr	r3, [pc, #72]	; (8009d78 <prvHeapInit+0xb4>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	1ad2      	subs	r2, r2, r3
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d44:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <prvHeapInit+0xb4>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	4a0a      	ldr	r2, [pc, #40]	; (8009d7c <prvHeapInit+0xb8>)
 8009d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	4a09      	ldr	r2, [pc, #36]	; (8009d80 <prvHeapInit+0xbc>)
 8009d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d5c:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <prvHeapInit+0xc0>)
 8009d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009d62:	601a      	str	r2, [r3, #0]
}
 8009d64:	bf00      	nop
 8009d66:	3714      	adds	r7, #20
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr
 8009d70:	20009f38 	.word	0x20009f38
 8009d74:	2000db38 	.word	0x2000db38
 8009d78:	2000db40 	.word	0x2000db40
 8009d7c:	2000db48 	.word	0x2000db48
 8009d80:	2000db44 	.word	0x2000db44
 8009d84:	2000db54 	.word	0x2000db54

08009d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d90:	4b28      	ldr	r3, [pc, #160]	; (8009e34 <prvInsertBlockIntoFreeList+0xac>)
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	e002      	b.n	8009d9c <prvInsertBlockIntoFreeList+0x14>
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d8f7      	bhi.n	8009d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	4413      	add	r3, r2
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d108      	bne.n	8009dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	441a      	add	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d118      	bne.n	8009e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <prvInsertBlockIntoFreeList+0xb0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d00d      	beq.n	8009e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	441a      	add	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	e008      	b.n	8009e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e06:	4b0c      	ldr	r3, [pc, #48]	; (8009e38 <prvInsertBlockIntoFreeList+0xb0>)
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	e003      	b.n	8009e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d002      	beq.n	8009e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e26:	bf00      	nop
 8009e28:	3714      	adds	r7, #20
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	2000db38 	.word	0x2000db38
 8009e38:	2000db40 	.word	0x2000db40

08009e3c <__errno>:
 8009e3c:	4b01      	ldr	r3, [pc, #4]	; (8009e44 <__errno+0x8>)
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	200000bc 	.word	0x200000bc

08009e48 <std>:
 8009e48:	2300      	movs	r3, #0
 8009e4a:	b510      	push	{r4, lr}
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e56:	6083      	str	r3, [r0, #8]
 8009e58:	8181      	strh	r1, [r0, #12]
 8009e5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e5c:	81c2      	strh	r2, [r0, #14]
 8009e5e:	6183      	str	r3, [r0, #24]
 8009e60:	4619      	mov	r1, r3
 8009e62:	2208      	movs	r2, #8
 8009e64:	305c      	adds	r0, #92	; 0x5c
 8009e66:	f000 f91a 	bl	800a09e <memset>
 8009e6a:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <std+0x38>)
 8009e6c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e6e:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <std+0x3c>)
 8009e70:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e72:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <std+0x40>)
 8009e74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e76:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <std+0x44>)
 8009e78:	6224      	str	r4, [r4, #32]
 8009e7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009e7c:	bd10      	pop	{r4, pc}
 8009e7e:	bf00      	nop
 8009e80:	0800b065 	.word	0x0800b065
 8009e84:	0800b08b 	.word	0x0800b08b
 8009e88:	0800b0c3 	.word	0x0800b0c3
 8009e8c:	0800b0e7 	.word	0x0800b0e7

08009e90 <_cleanup_r>:
 8009e90:	4901      	ldr	r1, [pc, #4]	; (8009e98 <_cleanup_r+0x8>)
 8009e92:	f000 b8af 	b.w	8009ff4 <_fwalk_reent>
 8009e96:	bf00      	nop
 8009e98:	0800ce11 	.word	0x0800ce11

08009e9c <__sfmoreglue>:
 8009e9c:	b570      	push	{r4, r5, r6, lr}
 8009e9e:	2268      	movs	r2, #104	; 0x68
 8009ea0:	1e4d      	subs	r5, r1, #1
 8009ea2:	4355      	muls	r5, r2
 8009ea4:	460e      	mov	r6, r1
 8009ea6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eaa:	f000 f921 	bl	800a0f0 <_malloc_r>
 8009eae:	4604      	mov	r4, r0
 8009eb0:	b140      	cbz	r0, 8009ec4 <__sfmoreglue+0x28>
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	e9c0 1600 	strd	r1, r6, [r0]
 8009eb8:	300c      	adds	r0, #12
 8009eba:	60a0      	str	r0, [r4, #8]
 8009ebc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ec0:	f000 f8ed 	bl	800a09e <memset>
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	bd70      	pop	{r4, r5, r6, pc}

08009ec8 <__sfp_lock_acquire>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	; (8009ed0 <__sfp_lock_acquire+0x8>)
 8009eca:	f000 b8d8 	b.w	800a07e <__retarget_lock_acquire_recursive>
 8009ece:	bf00      	nop
 8009ed0:	2000db59 	.word	0x2000db59

08009ed4 <__sfp_lock_release>:
 8009ed4:	4801      	ldr	r0, [pc, #4]	; (8009edc <__sfp_lock_release+0x8>)
 8009ed6:	f000 b8d3 	b.w	800a080 <__retarget_lock_release_recursive>
 8009eda:	bf00      	nop
 8009edc:	2000db59 	.word	0x2000db59

08009ee0 <__sinit_lock_acquire>:
 8009ee0:	4801      	ldr	r0, [pc, #4]	; (8009ee8 <__sinit_lock_acquire+0x8>)
 8009ee2:	f000 b8cc 	b.w	800a07e <__retarget_lock_acquire_recursive>
 8009ee6:	bf00      	nop
 8009ee8:	2000db5a 	.word	0x2000db5a

08009eec <__sinit_lock_release>:
 8009eec:	4801      	ldr	r0, [pc, #4]	; (8009ef4 <__sinit_lock_release+0x8>)
 8009eee:	f000 b8c7 	b.w	800a080 <__retarget_lock_release_recursive>
 8009ef2:	bf00      	nop
 8009ef4:	2000db5a 	.word	0x2000db5a

08009ef8 <__sinit>:
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	4604      	mov	r4, r0
 8009efc:	f7ff fff0 	bl	8009ee0 <__sinit_lock_acquire>
 8009f00:	69a3      	ldr	r3, [r4, #24]
 8009f02:	b11b      	cbz	r3, 8009f0c <__sinit+0x14>
 8009f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f08:	f7ff bff0 	b.w	8009eec <__sinit_lock_release>
 8009f0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f10:	6523      	str	r3, [r4, #80]	; 0x50
 8009f12:	4b13      	ldr	r3, [pc, #76]	; (8009f60 <__sinit+0x68>)
 8009f14:	4a13      	ldr	r2, [pc, #76]	; (8009f64 <__sinit+0x6c>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f1a:	42a3      	cmp	r3, r4
 8009f1c:	bf04      	itt	eq
 8009f1e:	2301      	moveq	r3, #1
 8009f20:	61a3      	streq	r3, [r4, #24]
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 f820 	bl	8009f68 <__sfp>
 8009f28:	6060      	str	r0, [r4, #4]
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 f81c 	bl	8009f68 <__sfp>
 8009f30:	60a0      	str	r0, [r4, #8]
 8009f32:	4620      	mov	r0, r4
 8009f34:	f000 f818 	bl	8009f68 <__sfp>
 8009f38:	2200      	movs	r2, #0
 8009f3a:	60e0      	str	r0, [r4, #12]
 8009f3c:	2104      	movs	r1, #4
 8009f3e:	6860      	ldr	r0, [r4, #4]
 8009f40:	f7ff ff82 	bl	8009e48 <std>
 8009f44:	68a0      	ldr	r0, [r4, #8]
 8009f46:	2201      	movs	r2, #1
 8009f48:	2109      	movs	r1, #9
 8009f4a:	f7ff ff7d 	bl	8009e48 <std>
 8009f4e:	68e0      	ldr	r0, [r4, #12]
 8009f50:	2202      	movs	r2, #2
 8009f52:	2112      	movs	r1, #18
 8009f54:	f7ff ff78 	bl	8009e48 <std>
 8009f58:	2301      	movs	r3, #1
 8009f5a:	61a3      	str	r3, [r4, #24]
 8009f5c:	e7d2      	b.n	8009f04 <__sinit+0xc>
 8009f5e:	bf00      	nop
 8009f60:	08010ed4 	.word	0x08010ed4
 8009f64:	08009e91 	.word	0x08009e91

08009f68 <__sfp>:
 8009f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6a:	4607      	mov	r7, r0
 8009f6c:	f7ff ffac 	bl	8009ec8 <__sfp_lock_acquire>
 8009f70:	4b1e      	ldr	r3, [pc, #120]	; (8009fec <__sfp+0x84>)
 8009f72:	681e      	ldr	r6, [r3, #0]
 8009f74:	69b3      	ldr	r3, [r6, #24]
 8009f76:	b913      	cbnz	r3, 8009f7e <__sfp+0x16>
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7ff ffbd 	bl	8009ef8 <__sinit>
 8009f7e:	3648      	adds	r6, #72	; 0x48
 8009f80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f84:	3b01      	subs	r3, #1
 8009f86:	d503      	bpl.n	8009f90 <__sfp+0x28>
 8009f88:	6833      	ldr	r3, [r6, #0]
 8009f8a:	b30b      	cbz	r3, 8009fd0 <__sfp+0x68>
 8009f8c:	6836      	ldr	r6, [r6, #0]
 8009f8e:	e7f7      	b.n	8009f80 <__sfp+0x18>
 8009f90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f94:	b9d5      	cbnz	r5, 8009fcc <__sfp+0x64>
 8009f96:	4b16      	ldr	r3, [pc, #88]	; (8009ff0 <__sfp+0x88>)
 8009f98:	60e3      	str	r3, [r4, #12]
 8009f9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f9e:	6665      	str	r5, [r4, #100]	; 0x64
 8009fa0:	f000 f86c 	bl	800a07c <__retarget_lock_init_recursive>
 8009fa4:	f7ff ff96 	bl	8009ed4 <__sfp_lock_release>
 8009fa8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fb0:	6025      	str	r5, [r4, #0]
 8009fb2:	61a5      	str	r5, [r4, #24]
 8009fb4:	2208      	movs	r2, #8
 8009fb6:	4629      	mov	r1, r5
 8009fb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fbc:	f000 f86f 	bl	800a09e <memset>
 8009fc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fc8:	4620      	mov	r0, r4
 8009fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fcc:	3468      	adds	r4, #104	; 0x68
 8009fce:	e7d9      	b.n	8009f84 <__sfp+0x1c>
 8009fd0:	2104      	movs	r1, #4
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	f7ff ff62 	bl	8009e9c <__sfmoreglue>
 8009fd8:	4604      	mov	r4, r0
 8009fda:	6030      	str	r0, [r6, #0]
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d1d5      	bne.n	8009f8c <__sfp+0x24>
 8009fe0:	f7ff ff78 	bl	8009ed4 <__sfp_lock_release>
 8009fe4:	230c      	movs	r3, #12
 8009fe6:	603b      	str	r3, [r7, #0]
 8009fe8:	e7ee      	b.n	8009fc8 <__sfp+0x60>
 8009fea:	bf00      	nop
 8009fec:	08010ed4 	.word	0x08010ed4
 8009ff0:	ffff0001 	.word	0xffff0001

08009ff4 <_fwalk_reent>:
 8009ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	4688      	mov	r8, r1
 8009ffc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a000:	2700      	movs	r7, #0
 800a002:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a006:	f1b9 0901 	subs.w	r9, r9, #1
 800a00a:	d505      	bpl.n	800a018 <_fwalk_reent+0x24>
 800a00c:	6824      	ldr	r4, [r4, #0]
 800a00e:	2c00      	cmp	r4, #0
 800a010:	d1f7      	bne.n	800a002 <_fwalk_reent+0xe>
 800a012:	4638      	mov	r0, r7
 800a014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a018:	89ab      	ldrh	r3, [r5, #12]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d907      	bls.n	800a02e <_fwalk_reent+0x3a>
 800a01e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a022:	3301      	adds	r3, #1
 800a024:	d003      	beq.n	800a02e <_fwalk_reent+0x3a>
 800a026:	4629      	mov	r1, r5
 800a028:	4630      	mov	r0, r6
 800a02a:	47c0      	blx	r8
 800a02c:	4307      	orrs	r7, r0
 800a02e:	3568      	adds	r5, #104	; 0x68
 800a030:	e7e9      	b.n	800a006 <_fwalk_reent+0x12>
	...

0800a034 <__libc_init_array>:
 800a034:	b570      	push	{r4, r5, r6, lr}
 800a036:	4d0d      	ldr	r5, [pc, #52]	; (800a06c <__libc_init_array+0x38>)
 800a038:	4c0d      	ldr	r4, [pc, #52]	; (800a070 <__libc_init_array+0x3c>)
 800a03a:	1b64      	subs	r4, r4, r5
 800a03c:	10a4      	asrs	r4, r4, #2
 800a03e:	2600      	movs	r6, #0
 800a040:	42a6      	cmp	r6, r4
 800a042:	d109      	bne.n	800a058 <__libc_init_array+0x24>
 800a044:	4d0b      	ldr	r5, [pc, #44]	; (800a074 <__libc_init_array+0x40>)
 800a046:	4c0c      	ldr	r4, [pc, #48]	; (800a078 <__libc_init_array+0x44>)
 800a048:	f005 fe8a 	bl	800fd60 <_init>
 800a04c:	1b64      	subs	r4, r4, r5
 800a04e:	10a4      	asrs	r4, r4, #2
 800a050:	2600      	movs	r6, #0
 800a052:	42a6      	cmp	r6, r4
 800a054:	d105      	bne.n	800a062 <__libc_init_array+0x2e>
 800a056:	bd70      	pop	{r4, r5, r6, pc}
 800a058:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05c:	4798      	blx	r3
 800a05e:	3601      	adds	r6, #1
 800a060:	e7ee      	b.n	800a040 <__libc_init_array+0xc>
 800a062:	f855 3b04 	ldr.w	r3, [r5], #4
 800a066:	4798      	blx	r3
 800a068:	3601      	adds	r6, #1
 800a06a:	e7f2      	b.n	800a052 <__libc_init_array+0x1e>
 800a06c:	08011704 	.word	0x08011704
 800a070:	08011704 	.word	0x08011704
 800a074:	08011704 	.word	0x08011704
 800a078:	08011708 	.word	0x08011708

0800a07c <__retarget_lock_init_recursive>:
 800a07c:	4770      	bx	lr

0800a07e <__retarget_lock_acquire_recursive>:
 800a07e:	4770      	bx	lr

0800a080 <__retarget_lock_release_recursive>:
 800a080:	4770      	bx	lr

0800a082 <memcpy>:
 800a082:	440a      	add	r2, r1
 800a084:	4291      	cmp	r1, r2
 800a086:	f100 33ff 	add.w	r3, r0, #4294967295
 800a08a:	d100      	bne.n	800a08e <memcpy+0xc>
 800a08c:	4770      	bx	lr
 800a08e:	b510      	push	{r4, lr}
 800a090:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a094:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a098:	4291      	cmp	r1, r2
 800a09a:	d1f9      	bne.n	800a090 <memcpy+0xe>
 800a09c:	bd10      	pop	{r4, pc}

0800a09e <memset>:
 800a09e:	4402      	add	r2, r0
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d100      	bne.n	800a0a8 <memset+0xa>
 800a0a6:	4770      	bx	lr
 800a0a8:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ac:	e7f9      	b.n	800a0a2 <memset+0x4>
	...

0800a0b0 <sbrk_aligned>:
 800a0b0:	b570      	push	{r4, r5, r6, lr}
 800a0b2:	4e0e      	ldr	r6, [pc, #56]	; (800a0ec <sbrk_aligned+0x3c>)
 800a0b4:	460c      	mov	r4, r1
 800a0b6:	6831      	ldr	r1, [r6, #0]
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	b911      	cbnz	r1, 800a0c2 <sbrk_aligned+0x12>
 800a0bc:	f000 ff70 	bl	800afa0 <_sbrk_r>
 800a0c0:	6030      	str	r0, [r6, #0]
 800a0c2:	4621      	mov	r1, r4
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	f000 ff6b 	bl	800afa0 <_sbrk_r>
 800a0ca:	1c43      	adds	r3, r0, #1
 800a0cc:	d00a      	beq.n	800a0e4 <sbrk_aligned+0x34>
 800a0ce:	1cc4      	adds	r4, r0, #3
 800a0d0:	f024 0403 	bic.w	r4, r4, #3
 800a0d4:	42a0      	cmp	r0, r4
 800a0d6:	d007      	beq.n	800a0e8 <sbrk_aligned+0x38>
 800a0d8:	1a21      	subs	r1, r4, r0
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f000 ff60 	bl	800afa0 <_sbrk_r>
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	d101      	bne.n	800a0e8 <sbrk_aligned+0x38>
 800a0e4:	f04f 34ff 	mov.w	r4, #4294967295
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	2000db60 	.word	0x2000db60

0800a0f0 <_malloc_r>:
 800a0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f4:	1ccd      	adds	r5, r1, #3
 800a0f6:	f025 0503 	bic.w	r5, r5, #3
 800a0fa:	3508      	adds	r5, #8
 800a0fc:	2d0c      	cmp	r5, #12
 800a0fe:	bf38      	it	cc
 800a100:	250c      	movcc	r5, #12
 800a102:	2d00      	cmp	r5, #0
 800a104:	4607      	mov	r7, r0
 800a106:	db01      	blt.n	800a10c <_malloc_r+0x1c>
 800a108:	42a9      	cmp	r1, r5
 800a10a:	d905      	bls.n	800a118 <_malloc_r+0x28>
 800a10c:	230c      	movs	r3, #12
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	2600      	movs	r6, #0
 800a112:	4630      	mov	r0, r6
 800a114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a118:	4e2e      	ldr	r6, [pc, #184]	; (800a1d4 <_malloc_r+0xe4>)
 800a11a:	f003 fa55 	bl	800d5c8 <__malloc_lock>
 800a11e:	6833      	ldr	r3, [r6, #0]
 800a120:	461c      	mov	r4, r3
 800a122:	bb34      	cbnz	r4, 800a172 <_malloc_r+0x82>
 800a124:	4629      	mov	r1, r5
 800a126:	4638      	mov	r0, r7
 800a128:	f7ff ffc2 	bl	800a0b0 <sbrk_aligned>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	4604      	mov	r4, r0
 800a130:	d14d      	bne.n	800a1ce <_malloc_r+0xde>
 800a132:	6834      	ldr	r4, [r6, #0]
 800a134:	4626      	mov	r6, r4
 800a136:	2e00      	cmp	r6, #0
 800a138:	d140      	bne.n	800a1bc <_malloc_r+0xcc>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	4631      	mov	r1, r6
 800a13e:	4638      	mov	r0, r7
 800a140:	eb04 0803 	add.w	r8, r4, r3
 800a144:	f000 ff2c 	bl	800afa0 <_sbrk_r>
 800a148:	4580      	cmp	r8, r0
 800a14a:	d13a      	bne.n	800a1c2 <_malloc_r+0xd2>
 800a14c:	6821      	ldr	r1, [r4, #0]
 800a14e:	3503      	adds	r5, #3
 800a150:	1a6d      	subs	r5, r5, r1
 800a152:	f025 0503 	bic.w	r5, r5, #3
 800a156:	3508      	adds	r5, #8
 800a158:	2d0c      	cmp	r5, #12
 800a15a:	bf38      	it	cc
 800a15c:	250c      	movcc	r5, #12
 800a15e:	4629      	mov	r1, r5
 800a160:	4638      	mov	r0, r7
 800a162:	f7ff ffa5 	bl	800a0b0 <sbrk_aligned>
 800a166:	3001      	adds	r0, #1
 800a168:	d02b      	beq.n	800a1c2 <_malloc_r+0xd2>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	442b      	add	r3, r5
 800a16e:	6023      	str	r3, [r4, #0]
 800a170:	e00e      	b.n	800a190 <_malloc_r+0xa0>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	1b52      	subs	r2, r2, r5
 800a176:	d41e      	bmi.n	800a1b6 <_malloc_r+0xc6>
 800a178:	2a0b      	cmp	r2, #11
 800a17a:	d916      	bls.n	800a1aa <_malloc_r+0xba>
 800a17c:	1961      	adds	r1, r4, r5
 800a17e:	42a3      	cmp	r3, r4
 800a180:	6025      	str	r5, [r4, #0]
 800a182:	bf18      	it	ne
 800a184:	6059      	strne	r1, [r3, #4]
 800a186:	6863      	ldr	r3, [r4, #4]
 800a188:	bf08      	it	eq
 800a18a:	6031      	streq	r1, [r6, #0]
 800a18c:	5162      	str	r2, [r4, r5]
 800a18e:	604b      	str	r3, [r1, #4]
 800a190:	4638      	mov	r0, r7
 800a192:	f104 060b 	add.w	r6, r4, #11
 800a196:	f003 fa1d 	bl	800d5d4 <__malloc_unlock>
 800a19a:	f026 0607 	bic.w	r6, r6, #7
 800a19e:	1d23      	adds	r3, r4, #4
 800a1a0:	1af2      	subs	r2, r6, r3
 800a1a2:	d0b6      	beq.n	800a112 <_malloc_r+0x22>
 800a1a4:	1b9b      	subs	r3, r3, r6
 800a1a6:	50a3      	str	r3, [r4, r2]
 800a1a8:	e7b3      	b.n	800a112 <_malloc_r+0x22>
 800a1aa:	6862      	ldr	r2, [r4, #4]
 800a1ac:	42a3      	cmp	r3, r4
 800a1ae:	bf0c      	ite	eq
 800a1b0:	6032      	streq	r2, [r6, #0]
 800a1b2:	605a      	strne	r2, [r3, #4]
 800a1b4:	e7ec      	b.n	800a190 <_malloc_r+0xa0>
 800a1b6:	4623      	mov	r3, r4
 800a1b8:	6864      	ldr	r4, [r4, #4]
 800a1ba:	e7b2      	b.n	800a122 <_malloc_r+0x32>
 800a1bc:	4634      	mov	r4, r6
 800a1be:	6876      	ldr	r6, [r6, #4]
 800a1c0:	e7b9      	b.n	800a136 <_malloc_r+0x46>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	603b      	str	r3, [r7, #0]
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f003 fa04 	bl	800d5d4 <__malloc_unlock>
 800a1cc:	e7a1      	b.n	800a112 <_malloc_r+0x22>
 800a1ce:	6025      	str	r5, [r4, #0]
 800a1d0:	e7de      	b.n	800a190 <_malloc_r+0xa0>
 800a1d2:	bf00      	nop
 800a1d4:	2000db5c 	.word	0x2000db5c

0800a1d8 <__cvt>:
 800a1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	ec55 4b10 	vmov	r4, r5, d0
 800a1e0:	2d00      	cmp	r5, #0
 800a1e2:	460e      	mov	r6, r1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	bfbb      	ittet	lt
 800a1ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1ee:	461d      	movlt	r5, r3
 800a1f0:	2300      	movge	r3, #0
 800a1f2:	232d      	movlt	r3, #45	; 0x2d
 800a1f4:	700b      	strb	r3, [r1, #0]
 800a1f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1fc:	4691      	mov	r9, r2
 800a1fe:	f023 0820 	bic.w	r8, r3, #32
 800a202:	bfbc      	itt	lt
 800a204:	4622      	movlt	r2, r4
 800a206:	4614      	movlt	r4, r2
 800a208:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a20c:	d005      	beq.n	800a21a <__cvt+0x42>
 800a20e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a212:	d100      	bne.n	800a216 <__cvt+0x3e>
 800a214:	3601      	adds	r6, #1
 800a216:	2102      	movs	r1, #2
 800a218:	e000      	b.n	800a21c <__cvt+0x44>
 800a21a:	2103      	movs	r1, #3
 800a21c:	ab03      	add	r3, sp, #12
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	ab02      	add	r3, sp, #8
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	ec45 4b10 	vmov	d0, r4, r5
 800a228:	4653      	mov	r3, sl
 800a22a:	4632      	mov	r2, r6
 800a22c:	f001 ff7c 	bl	800c128 <_dtoa_r>
 800a230:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a234:	4607      	mov	r7, r0
 800a236:	d102      	bne.n	800a23e <__cvt+0x66>
 800a238:	f019 0f01 	tst.w	r9, #1
 800a23c:	d022      	beq.n	800a284 <__cvt+0xac>
 800a23e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a242:	eb07 0906 	add.w	r9, r7, r6
 800a246:	d110      	bne.n	800a26a <__cvt+0x92>
 800a248:	783b      	ldrb	r3, [r7, #0]
 800a24a:	2b30      	cmp	r3, #48	; 0x30
 800a24c:	d10a      	bne.n	800a264 <__cvt+0x8c>
 800a24e:	2200      	movs	r2, #0
 800a250:	2300      	movs	r3, #0
 800a252:	4620      	mov	r0, r4
 800a254:	4629      	mov	r1, r5
 800a256:	f7f6 fc47 	bl	8000ae8 <__aeabi_dcmpeq>
 800a25a:	b918      	cbnz	r0, 800a264 <__cvt+0x8c>
 800a25c:	f1c6 0601 	rsb	r6, r6, #1
 800a260:	f8ca 6000 	str.w	r6, [sl]
 800a264:	f8da 3000 	ldr.w	r3, [sl]
 800a268:	4499      	add	r9, r3
 800a26a:	2200      	movs	r2, #0
 800a26c:	2300      	movs	r3, #0
 800a26e:	4620      	mov	r0, r4
 800a270:	4629      	mov	r1, r5
 800a272:	f7f6 fc39 	bl	8000ae8 <__aeabi_dcmpeq>
 800a276:	b108      	cbz	r0, 800a27c <__cvt+0xa4>
 800a278:	f8cd 900c 	str.w	r9, [sp, #12]
 800a27c:	2230      	movs	r2, #48	; 0x30
 800a27e:	9b03      	ldr	r3, [sp, #12]
 800a280:	454b      	cmp	r3, r9
 800a282:	d307      	bcc.n	800a294 <__cvt+0xbc>
 800a284:	9b03      	ldr	r3, [sp, #12]
 800a286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a288:	1bdb      	subs	r3, r3, r7
 800a28a:	4638      	mov	r0, r7
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	b004      	add	sp, #16
 800a290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a294:	1c59      	adds	r1, r3, #1
 800a296:	9103      	str	r1, [sp, #12]
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	e7f0      	b.n	800a27e <__cvt+0xa6>

0800a29c <__exponent>:
 800a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	bfb8      	it	lt
 800a2a4:	4249      	neglt	r1, r1
 800a2a6:	f803 2b02 	strb.w	r2, [r3], #2
 800a2aa:	bfb4      	ite	lt
 800a2ac:	222d      	movlt	r2, #45	; 0x2d
 800a2ae:	222b      	movge	r2, #43	; 0x2b
 800a2b0:	2909      	cmp	r1, #9
 800a2b2:	7042      	strb	r2, [r0, #1]
 800a2b4:	dd2a      	ble.n	800a30c <__exponent+0x70>
 800a2b6:	f10d 0407 	add.w	r4, sp, #7
 800a2ba:	46a4      	mov	ip, r4
 800a2bc:	270a      	movs	r7, #10
 800a2be:	46a6      	mov	lr, r4
 800a2c0:	460a      	mov	r2, r1
 800a2c2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a2c6:	fb07 1516 	mls	r5, r7, r6, r1
 800a2ca:	3530      	adds	r5, #48	; 0x30
 800a2cc:	2a63      	cmp	r2, #99	; 0x63
 800a2ce:	f104 34ff 	add.w	r4, r4, #4294967295
 800a2d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	dcf1      	bgt.n	800a2be <__exponent+0x22>
 800a2da:	3130      	adds	r1, #48	; 0x30
 800a2dc:	f1ae 0502 	sub.w	r5, lr, #2
 800a2e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a2e4:	1c44      	adds	r4, r0, #1
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4561      	cmp	r1, ip
 800a2ea:	d30a      	bcc.n	800a302 <__exponent+0x66>
 800a2ec:	f10d 0209 	add.w	r2, sp, #9
 800a2f0:	eba2 020e 	sub.w	r2, r2, lr
 800a2f4:	4565      	cmp	r5, ip
 800a2f6:	bf88      	it	hi
 800a2f8:	2200      	movhi	r2, #0
 800a2fa:	4413      	add	r3, r2
 800a2fc:	1a18      	subs	r0, r3, r0
 800a2fe:	b003      	add	sp, #12
 800a300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a306:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a30a:	e7ed      	b.n	800a2e8 <__exponent+0x4c>
 800a30c:	2330      	movs	r3, #48	; 0x30
 800a30e:	3130      	adds	r1, #48	; 0x30
 800a310:	7083      	strb	r3, [r0, #2]
 800a312:	70c1      	strb	r1, [r0, #3]
 800a314:	1d03      	adds	r3, r0, #4
 800a316:	e7f1      	b.n	800a2fc <__exponent+0x60>

0800a318 <_printf_float>:
 800a318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a31c:	ed2d 8b02 	vpush	{d8}
 800a320:	b08d      	sub	sp, #52	; 0x34
 800a322:	460c      	mov	r4, r1
 800a324:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a328:	4616      	mov	r6, r2
 800a32a:	461f      	mov	r7, r3
 800a32c:	4605      	mov	r5, r0
 800a32e:	f003 f91b 	bl	800d568 <_localeconv_r>
 800a332:	f8d0 a000 	ldr.w	sl, [r0]
 800a336:	4650      	mov	r0, sl
 800a338:	f7f5 ff54 	bl	80001e4 <strlen>
 800a33c:	2300      	movs	r3, #0
 800a33e:	930a      	str	r3, [sp, #40]	; 0x28
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	9305      	str	r3, [sp, #20]
 800a344:	f8d8 3000 	ldr.w	r3, [r8]
 800a348:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a34c:	3307      	adds	r3, #7
 800a34e:	f023 0307 	bic.w	r3, r3, #7
 800a352:	f103 0208 	add.w	r2, r3, #8
 800a356:	f8c8 2000 	str.w	r2, [r8]
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a362:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a366:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a36a:	9307      	str	r3, [sp, #28]
 800a36c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a370:	ee08 0a10 	vmov	s16, r0
 800a374:	4b9f      	ldr	r3, [pc, #636]	; (800a5f4 <_printf_float+0x2dc>)
 800a376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295
 800a37e:	f7f6 fbe5 	bl	8000b4c <__aeabi_dcmpun>
 800a382:	bb88      	cbnz	r0, 800a3e8 <_printf_float+0xd0>
 800a384:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a388:	4b9a      	ldr	r3, [pc, #616]	; (800a5f4 <_printf_float+0x2dc>)
 800a38a:	f04f 32ff 	mov.w	r2, #4294967295
 800a38e:	f7f6 fbbf 	bl	8000b10 <__aeabi_dcmple>
 800a392:	bb48      	cbnz	r0, 800a3e8 <_printf_float+0xd0>
 800a394:	2200      	movs	r2, #0
 800a396:	2300      	movs	r3, #0
 800a398:	4640      	mov	r0, r8
 800a39a:	4649      	mov	r1, r9
 800a39c:	f7f6 fbae 	bl	8000afc <__aeabi_dcmplt>
 800a3a0:	b110      	cbz	r0, 800a3a8 <_printf_float+0x90>
 800a3a2:	232d      	movs	r3, #45	; 0x2d
 800a3a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3a8:	4b93      	ldr	r3, [pc, #588]	; (800a5f8 <_printf_float+0x2e0>)
 800a3aa:	4894      	ldr	r0, [pc, #592]	; (800a5fc <_printf_float+0x2e4>)
 800a3ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a3b0:	bf94      	ite	ls
 800a3b2:	4698      	movls	r8, r3
 800a3b4:	4680      	movhi	r8, r0
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	9b05      	ldr	r3, [sp, #20]
 800a3bc:	f023 0204 	bic.w	r2, r3, #4
 800a3c0:	6022      	str	r2, [r4, #0]
 800a3c2:	f04f 0900 	mov.w	r9, #0
 800a3c6:	9700      	str	r7, [sp, #0]
 800a3c8:	4633      	mov	r3, r6
 800a3ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3cc:	4621      	mov	r1, r4
 800a3ce:	4628      	mov	r0, r5
 800a3d0:	f000 f9d8 	bl	800a784 <_printf_common>
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	f040 8090 	bne.w	800a4fa <_printf_float+0x1e2>
 800a3da:	f04f 30ff 	mov.w	r0, #4294967295
 800a3de:	b00d      	add	sp, #52	; 0x34
 800a3e0:	ecbd 8b02 	vpop	{d8}
 800a3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	f7f6 fbac 	bl	8000b4c <__aeabi_dcmpun>
 800a3f4:	b140      	cbz	r0, 800a408 <_printf_float+0xf0>
 800a3f6:	464b      	mov	r3, r9
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	bfbc      	itt	lt
 800a3fc:	232d      	movlt	r3, #45	; 0x2d
 800a3fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a402:	487f      	ldr	r0, [pc, #508]	; (800a600 <_printf_float+0x2e8>)
 800a404:	4b7f      	ldr	r3, [pc, #508]	; (800a604 <_printf_float+0x2ec>)
 800a406:	e7d1      	b.n	800a3ac <_printf_float+0x94>
 800a408:	6863      	ldr	r3, [r4, #4]
 800a40a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a40e:	9206      	str	r2, [sp, #24]
 800a410:	1c5a      	adds	r2, r3, #1
 800a412:	d13f      	bne.n	800a494 <_printf_float+0x17c>
 800a414:	2306      	movs	r3, #6
 800a416:	6063      	str	r3, [r4, #4]
 800a418:	9b05      	ldr	r3, [sp, #20]
 800a41a:	6861      	ldr	r1, [r4, #4]
 800a41c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a420:	2300      	movs	r3, #0
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	ab0a      	add	r3, sp, #40	; 0x28
 800a426:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a42a:	ab09      	add	r3, sp, #36	; 0x24
 800a42c:	ec49 8b10 	vmov	d0, r8, r9
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	6022      	str	r2, [r4, #0]
 800a434:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a438:	4628      	mov	r0, r5
 800a43a:	f7ff fecd 	bl	800a1d8 <__cvt>
 800a43e:	9b06      	ldr	r3, [sp, #24]
 800a440:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a442:	2b47      	cmp	r3, #71	; 0x47
 800a444:	4680      	mov	r8, r0
 800a446:	d108      	bne.n	800a45a <_printf_float+0x142>
 800a448:	1cc8      	adds	r0, r1, #3
 800a44a:	db02      	blt.n	800a452 <_printf_float+0x13a>
 800a44c:	6863      	ldr	r3, [r4, #4]
 800a44e:	4299      	cmp	r1, r3
 800a450:	dd41      	ble.n	800a4d6 <_printf_float+0x1be>
 800a452:	f1ab 0b02 	sub.w	fp, fp, #2
 800a456:	fa5f fb8b 	uxtb.w	fp, fp
 800a45a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a45e:	d820      	bhi.n	800a4a2 <_printf_float+0x18a>
 800a460:	3901      	subs	r1, #1
 800a462:	465a      	mov	r2, fp
 800a464:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a468:	9109      	str	r1, [sp, #36]	; 0x24
 800a46a:	f7ff ff17 	bl	800a29c <__exponent>
 800a46e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a470:	1813      	adds	r3, r2, r0
 800a472:	2a01      	cmp	r2, #1
 800a474:	4681      	mov	r9, r0
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	dc02      	bgt.n	800a480 <_printf_float+0x168>
 800a47a:	6822      	ldr	r2, [r4, #0]
 800a47c:	07d2      	lsls	r2, r2, #31
 800a47e:	d501      	bpl.n	800a484 <_printf_float+0x16c>
 800a480:	3301      	adds	r3, #1
 800a482:	6123      	str	r3, [r4, #16]
 800a484:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d09c      	beq.n	800a3c6 <_printf_float+0xae>
 800a48c:	232d      	movs	r3, #45	; 0x2d
 800a48e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a492:	e798      	b.n	800a3c6 <_printf_float+0xae>
 800a494:	9a06      	ldr	r2, [sp, #24]
 800a496:	2a47      	cmp	r2, #71	; 0x47
 800a498:	d1be      	bne.n	800a418 <_printf_float+0x100>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1bc      	bne.n	800a418 <_printf_float+0x100>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e7b9      	b.n	800a416 <_printf_float+0xfe>
 800a4a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a4a6:	d118      	bne.n	800a4da <_printf_float+0x1c2>
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	6863      	ldr	r3, [r4, #4]
 800a4ac:	dd0b      	ble.n	800a4c6 <_printf_float+0x1ae>
 800a4ae:	6121      	str	r1, [r4, #16]
 800a4b0:	b913      	cbnz	r3, 800a4b8 <_printf_float+0x1a0>
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	07d0      	lsls	r0, r2, #31
 800a4b6:	d502      	bpl.n	800a4be <_printf_float+0x1a6>
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	440b      	add	r3, r1
 800a4bc:	6123      	str	r3, [r4, #16]
 800a4be:	65a1      	str	r1, [r4, #88]	; 0x58
 800a4c0:	f04f 0900 	mov.w	r9, #0
 800a4c4:	e7de      	b.n	800a484 <_printf_float+0x16c>
 800a4c6:	b913      	cbnz	r3, 800a4ce <_printf_float+0x1b6>
 800a4c8:	6822      	ldr	r2, [r4, #0]
 800a4ca:	07d2      	lsls	r2, r2, #31
 800a4cc:	d501      	bpl.n	800a4d2 <_printf_float+0x1ba>
 800a4ce:	3302      	adds	r3, #2
 800a4d0:	e7f4      	b.n	800a4bc <_printf_float+0x1a4>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e7f2      	b.n	800a4bc <_printf_float+0x1a4>
 800a4d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a4da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	db05      	blt.n	800a4ec <_printf_float+0x1d4>
 800a4e0:	6823      	ldr	r3, [r4, #0]
 800a4e2:	6121      	str	r1, [r4, #16]
 800a4e4:	07d8      	lsls	r0, r3, #31
 800a4e6:	d5ea      	bpl.n	800a4be <_printf_float+0x1a6>
 800a4e8:	1c4b      	adds	r3, r1, #1
 800a4ea:	e7e7      	b.n	800a4bc <_printf_float+0x1a4>
 800a4ec:	2900      	cmp	r1, #0
 800a4ee:	bfd4      	ite	le
 800a4f0:	f1c1 0202 	rsble	r2, r1, #2
 800a4f4:	2201      	movgt	r2, #1
 800a4f6:	4413      	add	r3, r2
 800a4f8:	e7e0      	b.n	800a4bc <_printf_float+0x1a4>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	055a      	lsls	r2, r3, #21
 800a4fe:	d407      	bmi.n	800a510 <_printf_float+0x1f8>
 800a500:	6923      	ldr	r3, [r4, #16]
 800a502:	4642      	mov	r2, r8
 800a504:	4631      	mov	r1, r6
 800a506:	4628      	mov	r0, r5
 800a508:	47b8      	blx	r7
 800a50a:	3001      	adds	r0, #1
 800a50c:	d12c      	bne.n	800a568 <_printf_float+0x250>
 800a50e:	e764      	b.n	800a3da <_printf_float+0xc2>
 800a510:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a514:	f240 80e0 	bls.w	800a6d8 <_printf_float+0x3c0>
 800a518:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a51c:	2200      	movs	r2, #0
 800a51e:	2300      	movs	r3, #0
 800a520:	f7f6 fae2 	bl	8000ae8 <__aeabi_dcmpeq>
 800a524:	2800      	cmp	r0, #0
 800a526:	d034      	beq.n	800a592 <_printf_float+0x27a>
 800a528:	4a37      	ldr	r2, [pc, #220]	; (800a608 <_printf_float+0x2f0>)
 800a52a:	2301      	movs	r3, #1
 800a52c:	4631      	mov	r1, r6
 800a52e:	4628      	mov	r0, r5
 800a530:	47b8      	blx	r7
 800a532:	3001      	adds	r0, #1
 800a534:	f43f af51 	beq.w	800a3da <_printf_float+0xc2>
 800a538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a53c:	429a      	cmp	r2, r3
 800a53e:	db02      	blt.n	800a546 <_printf_float+0x22e>
 800a540:	6823      	ldr	r3, [r4, #0]
 800a542:	07d8      	lsls	r0, r3, #31
 800a544:	d510      	bpl.n	800a568 <_printf_float+0x250>
 800a546:	ee18 3a10 	vmov	r3, s16
 800a54a:	4652      	mov	r2, sl
 800a54c:	4631      	mov	r1, r6
 800a54e:	4628      	mov	r0, r5
 800a550:	47b8      	blx	r7
 800a552:	3001      	adds	r0, #1
 800a554:	f43f af41 	beq.w	800a3da <_printf_float+0xc2>
 800a558:	f04f 0800 	mov.w	r8, #0
 800a55c:	f104 091a 	add.w	r9, r4, #26
 800a560:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a562:	3b01      	subs	r3, #1
 800a564:	4543      	cmp	r3, r8
 800a566:	dc09      	bgt.n	800a57c <_printf_float+0x264>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	079b      	lsls	r3, r3, #30
 800a56c:	f100 8105 	bmi.w	800a77a <_printf_float+0x462>
 800a570:	68e0      	ldr	r0, [r4, #12]
 800a572:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a574:	4298      	cmp	r0, r3
 800a576:	bfb8      	it	lt
 800a578:	4618      	movlt	r0, r3
 800a57a:	e730      	b.n	800a3de <_printf_float+0xc6>
 800a57c:	2301      	movs	r3, #1
 800a57e:	464a      	mov	r2, r9
 800a580:	4631      	mov	r1, r6
 800a582:	4628      	mov	r0, r5
 800a584:	47b8      	blx	r7
 800a586:	3001      	adds	r0, #1
 800a588:	f43f af27 	beq.w	800a3da <_printf_float+0xc2>
 800a58c:	f108 0801 	add.w	r8, r8, #1
 800a590:	e7e6      	b.n	800a560 <_printf_float+0x248>
 800a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a594:	2b00      	cmp	r3, #0
 800a596:	dc39      	bgt.n	800a60c <_printf_float+0x2f4>
 800a598:	4a1b      	ldr	r2, [pc, #108]	; (800a608 <_printf_float+0x2f0>)
 800a59a:	2301      	movs	r3, #1
 800a59c:	4631      	mov	r1, r6
 800a59e:	4628      	mov	r0, r5
 800a5a0:	47b8      	blx	r7
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	f43f af19 	beq.w	800a3da <_printf_float+0xc2>
 800a5a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	d102      	bne.n	800a5b6 <_printf_float+0x29e>
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	07d9      	lsls	r1, r3, #31
 800a5b4:	d5d8      	bpl.n	800a568 <_printf_float+0x250>
 800a5b6:	ee18 3a10 	vmov	r3, s16
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	4631      	mov	r1, r6
 800a5be:	4628      	mov	r0, r5
 800a5c0:	47b8      	blx	r7
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	f43f af09 	beq.w	800a3da <_printf_float+0xc2>
 800a5c8:	f04f 0900 	mov.w	r9, #0
 800a5cc:	f104 0a1a 	add.w	sl, r4, #26
 800a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d2:	425b      	negs	r3, r3
 800a5d4:	454b      	cmp	r3, r9
 800a5d6:	dc01      	bgt.n	800a5dc <_printf_float+0x2c4>
 800a5d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5da:	e792      	b.n	800a502 <_printf_float+0x1ea>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	4652      	mov	r2, sl
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	47b8      	blx	r7
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	f43f aef7 	beq.w	800a3da <_printf_float+0xc2>
 800a5ec:	f109 0901 	add.w	r9, r9, #1
 800a5f0:	e7ee      	b.n	800a5d0 <_printf_float+0x2b8>
 800a5f2:	bf00      	nop
 800a5f4:	7fefffff 	.word	0x7fefffff
 800a5f8:	08010ed8 	.word	0x08010ed8
 800a5fc:	08010edc 	.word	0x08010edc
 800a600:	08010ee4 	.word	0x08010ee4
 800a604:	08010ee0 	.word	0x08010ee0
 800a608:	080112d9 	.word	0x080112d9
 800a60c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a60e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a610:	429a      	cmp	r2, r3
 800a612:	bfa8      	it	ge
 800a614:	461a      	movge	r2, r3
 800a616:	2a00      	cmp	r2, #0
 800a618:	4691      	mov	r9, r2
 800a61a:	dc37      	bgt.n	800a68c <_printf_float+0x374>
 800a61c:	f04f 0b00 	mov.w	fp, #0
 800a620:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a624:	f104 021a 	add.w	r2, r4, #26
 800a628:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a62a:	9305      	str	r3, [sp, #20]
 800a62c:	eba3 0309 	sub.w	r3, r3, r9
 800a630:	455b      	cmp	r3, fp
 800a632:	dc33      	bgt.n	800a69c <_printf_float+0x384>
 800a634:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a638:	429a      	cmp	r2, r3
 800a63a:	db3b      	blt.n	800a6b4 <_printf_float+0x39c>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	07da      	lsls	r2, r3, #31
 800a640:	d438      	bmi.n	800a6b4 <_printf_float+0x39c>
 800a642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a644:	9a05      	ldr	r2, [sp, #20]
 800a646:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a648:	1a9a      	subs	r2, r3, r2
 800a64a:	eba3 0901 	sub.w	r9, r3, r1
 800a64e:	4591      	cmp	r9, r2
 800a650:	bfa8      	it	ge
 800a652:	4691      	movge	r9, r2
 800a654:	f1b9 0f00 	cmp.w	r9, #0
 800a658:	dc35      	bgt.n	800a6c6 <_printf_float+0x3ae>
 800a65a:	f04f 0800 	mov.w	r8, #0
 800a65e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a662:	f104 0a1a 	add.w	sl, r4, #26
 800a666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a66a:	1a9b      	subs	r3, r3, r2
 800a66c:	eba3 0309 	sub.w	r3, r3, r9
 800a670:	4543      	cmp	r3, r8
 800a672:	f77f af79 	ble.w	800a568 <_printf_float+0x250>
 800a676:	2301      	movs	r3, #1
 800a678:	4652      	mov	r2, sl
 800a67a:	4631      	mov	r1, r6
 800a67c:	4628      	mov	r0, r5
 800a67e:	47b8      	blx	r7
 800a680:	3001      	adds	r0, #1
 800a682:	f43f aeaa 	beq.w	800a3da <_printf_float+0xc2>
 800a686:	f108 0801 	add.w	r8, r8, #1
 800a68a:	e7ec      	b.n	800a666 <_printf_float+0x34e>
 800a68c:	4613      	mov	r3, r2
 800a68e:	4631      	mov	r1, r6
 800a690:	4642      	mov	r2, r8
 800a692:	4628      	mov	r0, r5
 800a694:	47b8      	blx	r7
 800a696:	3001      	adds	r0, #1
 800a698:	d1c0      	bne.n	800a61c <_printf_float+0x304>
 800a69a:	e69e      	b.n	800a3da <_printf_float+0xc2>
 800a69c:	2301      	movs	r3, #1
 800a69e:	4631      	mov	r1, r6
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	9205      	str	r2, [sp, #20]
 800a6a4:	47b8      	blx	r7
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	f43f ae97 	beq.w	800a3da <_printf_float+0xc2>
 800a6ac:	9a05      	ldr	r2, [sp, #20]
 800a6ae:	f10b 0b01 	add.w	fp, fp, #1
 800a6b2:	e7b9      	b.n	800a628 <_printf_float+0x310>
 800a6b4:	ee18 3a10 	vmov	r3, s16
 800a6b8:	4652      	mov	r2, sl
 800a6ba:	4631      	mov	r1, r6
 800a6bc:	4628      	mov	r0, r5
 800a6be:	47b8      	blx	r7
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d1be      	bne.n	800a642 <_printf_float+0x32a>
 800a6c4:	e689      	b.n	800a3da <_printf_float+0xc2>
 800a6c6:	9a05      	ldr	r2, [sp, #20]
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	4442      	add	r2, r8
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	47b8      	blx	r7
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	d1c1      	bne.n	800a65a <_printf_float+0x342>
 800a6d6:	e680      	b.n	800a3da <_printf_float+0xc2>
 800a6d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6da:	2a01      	cmp	r2, #1
 800a6dc:	dc01      	bgt.n	800a6e2 <_printf_float+0x3ca>
 800a6de:	07db      	lsls	r3, r3, #31
 800a6e0:	d538      	bpl.n	800a754 <_printf_float+0x43c>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	4642      	mov	r2, r8
 800a6e6:	4631      	mov	r1, r6
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	47b8      	blx	r7
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	f43f ae74 	beq.w	800a3da <_printf_float+0xc2>
 800a6f2:	ee18 3a10 	vmov	r3, s16
 800a6f6:	4652      	mov	r2, sl
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b8      	blx	r7
 800a6fe:	3001      	adds	r0, #1
 800a700:	f43f ae6b 	beq.w	800a3da <_printf_float+0xc2>
 800a704:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a708:	2200      	movs	r2, #0
 800a70a:	2300      	movs	r3, #0
 800a70c:	f7f6 f9ec 	bl	8000ae8 <__aeabi_dcmpeq>
 800a710:	b9d8      	cbnz	r0, 800a74a <_printf_float+0x432>
 800a712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a714:	f108 0201 	add.w	r2, r8, #1
 800a718:	3b01      	subs	r3, #1
 800a71a:	4631      	mov	r1, r6
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	d10e      	bne.n	800a742 <_printf_float+0x42a>
 800a724:	e659      	b.n	800a3da <_printf_float+0xc2>
 800a726:	2301      	movs	r3, #1
 800a728:	4652      	mov	r2, sl
 800a72a:	4631      	mov	r1, r6
 800a72c:	4628      	mov	r0, r5
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	f43f ae52 	beq.w	800a3da <_printf_float+0xc2>
 800a736:	f108 0801 	add.w	r8, r8, #1
 800a73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a73c:	3b01      	subs	r3, #1
 800a73e:	4543      	cmp	r3, r8
 800a740:	dcf1      	bgt.n	800a726 <_printf_float+0x40e>
 800a742:	464b      	mov	r3, r9
 800a744:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a748:	e6dc      	b.n	800a504 <_printf_float+0x1ec>
 800a74a:	f04f 0800 	mov.w	r8, #0
 800a74e:	f104 0a1a 	add.w	sl, r4, #26
 800a752:	e7f2      	b.n	800a73a <_printf_float+0x422>
 800a754:	2301      	movs	r3, #1
 800a756:	4642      	mov	r2, r8
 800a758:	e7df      	b.n	800a71a <_printf_float+0x402>
 800a75a:	2301      	movs	r3, #1
 800a75c:	464a      	mov	r2, r9
 800a75e:	4631      	mov	r1, r6
 800a760:	4628      	mov	r0, r5
 800a762:	47b8      	blx	r7
 800a764:	3001      	adds	r0, #1
 800a766:	f43f ae38 	beq.w	800a3da <_printf_float+0xc2>
 800a76a:	f108 0801 	add.w	r8, r8, #1
 800a76e:	68e3      	ldr	r3, [r4, #12]
 800a770:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a772:	1a5b      	subs	r3, r3, r1
 800a774:	4543      	cmp	r3, r8
 800a776:	dcf0      	bgt.n	800a75a <_printf_float+0x442>
 800a778:	e6fa      	b.n	800a570 <_printf_float+0x258>
 800a77a:	f04f 0800 	mov.w	r8, #0
 800a77e:	f104 0919 	add.w	r9, r4, #25
 800a782:	e7f4      	b.n	800a76e <_printf_float+0x456>

0800a784 <_printf_common>:
 800a784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a788:	4616      	mov	r6, r2
 800a78a:	4699      	mov	r9, r3
 800a78c:	688a      	ldr	r2, [r1, #8]
 800a78e:	690b      	ldr	r3, [r1, #16]
 800a790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a794:	4293      	cmp	r3, r2
 800a796:	bfb8      	it	lt
 800a798:	4613      	movlt	r3, r2
 800a79a:	6033      	str	r3, [r6, #0]
 800a79c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	b10a      	cbz	r2, 800a7aa <_printf_common+0x26>
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	6033      	str	r3, [r6, #0]
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	0699      	lsls	r1, r3, #26
 800a7ae:	bf42      	ittt	mi
 800a7b0:	6833      	ldrmi	r3, [r6, #0]
 800a7b2:	3302      	addmi	r3, #2
 800a7b4:	6033      	strmi	r3, [r6, #0]
 800a7b6:	6825      	ldr	r5, [r4, #0]
 800a7b8:	f015 0506 	ands.w	r5, r5, #6
 800a7bc:	d106      	bne.n	800a7cc <_printf_common+0x48>
 800a7be:	f104 0a19 	add.w	sl, r4, #25
 800a7c2:	68e3      	ldr	r3, [r4, #12]
 800a7c4:	6832      	ldr	r2, [r6, #0]
 800a7c6:	1a9b      	subs	r3, r3, r2
 800a7c8:	42ab      	cmp	r3, r5
 800a7ca:	dc26      	bgt.n	800a81a <_printf_common+0x96>
 800a7cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7d0:	1e13      	subs	r3, r2, #0
 800a7d2:	6822      	ldr	r2, [r4, #0]
 800a7d4:	bf18      	it	ne
 800a7d6:	2301      	movne	r3, #1
 800a7d8:	0692      	lsls	r2, r2, #26
 800a7da:	d42b      	bmi.n	800a834 <_printf_common+0xb0>
 800a7dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c0      	blx	r8
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d01e      	beq.n	800a828 <_printf_common+0xa4>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	68e5      	ldr	r5, [r4, #12]
 800a7ee:	6832      	ldr	r2, [r6, #0]
 800a7f0:	f003 0306 	and.w	r3, r3, #6
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	bf08      	it	eq
 800a7f8:	1aad      	subeq	r5, r5, r2
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	6922      	ldr	r2, [r4, #16]
 800a7fe:	bf0c      	ite	eq
 800a800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a804:	2500      	movne	r5, #0
 800a806:	4293      	cmp	r3, r2
 800a808:	bfc4      	itt	gt
 800a80a:	1a9b      	subgt	r3, r3, r2
 800a80c:	18ed      	addgt	r5, r5, r3
 800a80e:	2600      	movs	r6, #0
 800a810:	341a      	adds	r4, #26
 800a812:	42b5      	cmp	r5, r6
 800a814:	d11a      	bne.n	800a84c <_printf_common+0xc8>
 800a816:	2000      	movs	r0, #0
 800a818:	e008      	b.n	800a82c <_printf_common+0xa8>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4652      	mov	r2, sl
 800a81e:	4649      	mov	r1, r9
 800a820:	4638      	mov	r0, r7
 800a822:	47c0      	blx	r8
 800a824:	3001      	adds	r0, #1
 800a826:	d103      	bne.n	800a830 <_printf_common+0xac>
 800a828:	f04f 30ff 	mov.w	r0, #4294967295
 800a82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a830:	3501      	adds	r5, #1
 800a832:	e7c6      	b.n	800a7c2 <_printf_common+0x3e>
 800a834:	18e1      	adds	r1, r4, r3
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	2030      	movs	r0, #48	; 0x30
 800a83a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a83e:	4422      	add	r2, r4
 800a840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a848:	3302      	adds	r3, #2
 800a84a:	e7c7      	b.n	800a7dc <_printf_common+0x58>
 800a84c:	2301      	movs	r3, #1
 800a84e:	4622      	mov	r2, r4
 800a850:	4649      	mov	r1, r9
 800a852:	4638      	mov	r0, r7
 800a854:	47c0      	blx	r8
 800a856:	3001      	adds	r0, #1
 800a858:	d0e6      	beq.n	800a828 <_printf_common+0xa4>
 800a85a:	3601      	adds	r6, #1
 800a85c:	e7d9      	b.n	800a812 <_printf_common+0x8e>
	...

0800a860 <_printf_i>:
 800a860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a864:	7e0f      	ldrb	r7, [r1, #24]
 800a866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a868:	2f78      	cmp	r7, #120	; 0x78
 800a86a:	4691      	mov	r9, r2
 800a86c:	4680      	mov	r8, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	469a      	mov	sl, r3
 800a872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a876:	d807      	bhi.n	800a888 <_printf_i+0x28>
 800a878:	2f62      	cmp	r7, #98	; 0x62
 800a87a:	d80a      	bhi.n	800a892 <_printf_i+0x32>
 800a87c:	2f00      	cmp	r7, #0
 800a87e:	f000 80d8 	beq.w	800aa32 <_printf_i+0x1d2>
 800a882:	2f58      	cmp	r7, #88	; 0x58
 800a884:	f000 80a3 	beq.w	800a9ce <_printf_i+0x16e>
 800a888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a88c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a890:	e03a      	b.n	800a908 <_printf_i+0xa8>
 800a892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a896:	2b15      	cmp	r3, #21
 800a898:	d8f6      	bhi.n	800a888 <_printf_i+0x28>
 800a89a:	a101      	add	r1, pc, #4	; (adr r1, 800a8a0 <_printf_i+0x40>)
 800a89c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8a0:	0800a8f9 	.word	0x0800a8f9
 800a8a4:	0800a90d 	.word	0x0800a90d
 800a8a8:	0800a889 	.word	0x0800a889
 800a8ac:	0800a889 	.word	0x0800a889
 800a8b0:	0800a889 	.word	0x0800a889
 800a8b4:	0800a889 	.word	0x0800a889
 800a8b8:	0800a90d 	.word	0x0800a90d
 800a8bc:	0800a889 	.word	0x0800a889
 800a8c0:	0800a889 	.word	0x0800a889
 800a8c4:	0800a889 	.word	0x0800a889
 800a8c8:	0800a889 	.word	0x0800a889
 800a8cc:	0800aa19 	.word	0x0800aa19
 800a8d0:	0800a93d 	.word	0x0800a93d
 800a8d4:	0800a9fb 	.word	0x0800a9fb
 800a8d8:	0800a889 	.word	0x0800a889
 800a8dc:	0800a889 	.word	0x0800a889
 800a8e0:	0800aa3b 	.word	0x0800aa3b
 800a8e4:	0800a889 	.word	0x0800a889
 800a8e8:	0800a93d 	.word	0x0800a93d
 800a8ec:	0800a889 	.word	0x0800a889
 800a8f0:	0800a889 	.word	0x0800a889
 800a8f4:	0800aa03 	.word	0x0800aa03
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	1d1a      	adds	r2, r3, #4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	602a      	str	r2, [r5, #0]
 800a900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a908:	2301      	movs	r3, #1
 800a90a:	e0a3      	b.n	800aa54 <_printf_i+0x1f4>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	6829      	ldr	r1, [r5, #0]
 800a910:	0606      	lsls	r6, r0, #24
 800a912:	f101 0304 	add.w	r3, r1, #4
 800a916:	d50a      	bpl.n	800a92e <_printf_i+0xce>
 800a918:	680e      	ldr	r6, [r1, #0]
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	da03      	bge.n	800a928 <_printf_i+0xc8>
 800a920:	232d      	movs	r3, #45	; 0x2d
 800a922:	4276      	negs	r6, r6
 800a924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a928:	485e      	ldr	r0, [pc, #376]	; (800aaa4 <_printf_i+0x244>)
 800a92a:	230a      	movs	r3, #10
 800a92c:	e019      	b.n	800a962 <_printf_i+0x102>
 800a92e:	680e      	ldr	r6, [r1, #0]
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a936:	bf18      	it	ne
 800a938:	b236      	sxthne	r6, r6
 800a93a:	e7ef      	b.n	800a91c <_printf_i+0xbc>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	6820      	ldr	r0, [r4, #0]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	6029      	str	r1, [r5, #0]
 800a944:	0601      	lsls	r1, r0, #24
 800a946:	d501      	bpl.n	800a94c <_printf_i+0xec>
 800a948:	681e      	ldr	r6, [r3, #0]
 800a94a:	e002      	b.n	800a952 <_printf_i+0xf2>
 800a94c:	0646      	lsls	r6, r0, #25
 800a94e:	d5fb      	bpl.n	800a948 <_printf_i+0xe8>
 800a950:	881e      	ldrh	r6, [r3, #0]
 800a952:	4854      	ldr	r0, [pc, #336]	; (800aaa4 <_printf_i+0x244>)
 800a954:	2f6f      	cmp	r7, #111	; 0x6f
 800a956:	bf0c      	ite	eq
 800a958:	2308      	moveq	r3, #8
 800a95a:	230a      	movne	r3, #10
 800a95c:	2100      	movs	r1, #0
 800a95e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a962:	6865      	ldr	r5, [r4, #4]
 800a964:	60a5      	str	r5, [r4, #8]
 800a966:	2d00      	cmp	r5, #0
 800a968:	bfa2      	ittt	ge
 800a96a:	6821      	ldrge	r1, [r4, #0]
 800a96c:	f021 0104 	bicge.w	r1, r1, #4
 800a970:	6021      	strge	r1, [r4, #0]
 800a972:	b90e      	cbnz	r6, 800a978 <_printf_i+0x118>
 800a974:	2d00      	cmp	r5, #0
 800a976:	d04d      	beq.n	800aa14 <_printf_i+0x1b4>
 800a978:	4615      	mov	r5, r2
 800a97a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a97e:	fb03 6711 	mls	r7, r3, r1, r6
 800a982:	5dc7      	ldrb	r7, [r0, r7]
 800a984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a988:	4637      	mov	r7, r6
 800a98a:	42bb      	cmp	r3, r7
 800a98c:	460e      	mov	r6, r1
 800a98e:	d9f4      	bls.n	800a97a <_printf_i+0x11a>
 800a990:	2b08      	cmp	r3, #8
 800a992:	d10b      	bne.n	800a9ac <_printf_i+0x14c>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	07de      	lsls	r6, r3, #31
 800a998:	d508      	bpl.n	800a9ac <_printf_i+0x14c>
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	6861      	ldr	r1, [r4, #4]
 800a99e:	4299      	cmp	r1, r3
 800a9a0:	bfde      	ittt	le
 800a9a2:	2330      	movle	r3, #48	; 0x30
 800a9a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9ac:	1b52      	subs	r2, r2, r5
 800a9ae:	6122      	str	r2, [r4, #16]
 800a9b0:	f8cd a000 	str.w	sl, [sp]
 800a9b4:	464b      	mov	r3, r9
 800a9b6:	aa03      	add	r2, sp, #12
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	f7ff fee2 	bl	800a784 <_printf_common>
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d14c      	bne.n	800aa5e <_printf_i+0x1fe>
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c8:	b004      	add	sp, #16
 800a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ce:	4835      	ldr	r0, [pc, #212]	; (800aaa4 <_printf_i+0x244>)
 800a9d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9d4:	6829      	ldr	r1, [r5, #0]
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9dc:	6029      	str	r1, [r5, #0]
 800a9de:	061d      	lsls	r5, r3, #24
 800a9e0:	d514      	bpl.n	800aa0c <_printf_i+0x1ac>
 800a9e2:	07df      	lsls	r7, r3, #31
 800a9e4:	bf44      	itt	mi
 800a9e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a9ea:	6023      	strmi	r3, [r4, #0]
 800a9ec:	b91e      	cbnz	r6, 800a9f6 <_printf_i+0x196>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	f023 0320 	bic.w	r3, r3, #32
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	2310      	movs	r3, #16
 800a9f8:	e7b0      	b.n	800a95c <_printf_i+0xfc>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	f043 0320 	orr.w	r3, r3, #32
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	2378      	movs	r3, #120	; 0x78
 800aa04:	4828      	ldr	r0, [pc, #160]	; (800aaa8 <_printf_i+0x248>)
 800aa06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa0a:	e7e3      	b.n	800a9d4 <_printf_i+0x174>
 800aa0c:	0659      	lsls	r1, r3, #25
 800aa0e:	bf48      	it	mi
 800aa10:	b2b6      	uxthmi	r6, r6
 800aa12:	e7e6      	b.n	800a9e2 <_printf_i+0x182>
 800aa14:	4615      	mov	r5, r2
 800aa16:	e7bb      	b.n	800a990 <_printf_i+0x130>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	6826      	ldr	r6, [r4, #0]
 800aa1c:	6961      	ldr	r1, [r4, #20]
 800aa1e:	1d18      	adds	r0, r3, #4
 800aa20:	6028      	str	r0, [r5, #0]
 800aa22:	0635      	lsls	r5, r6, #24
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	d501      	bpl.n	800aa2c <_printf_i+0x1cc>
 800aa28:	6019      	str	r1, [r3, #0]
 800aa2a:	e002      	b.n	800aa32 <_printf_i+0x1d2>
 800aa2c:	0670      	lsls	r0, r6, #25
 800aa2e:	d5fb      	bpl.n	800aa28 <_printf_i+0x1c8>
 800aa30:	8019      	strh	r1, [r3, #0]
 800aa32:	2300      	movs	r3, #0
 800aa34:	6123      	str	r3, [r4, #16]
 800aa36:	4615      	mov	r5, r2
 800aa38:	e7ba      	b.n	800a9b0 <_printf_i+0x150>
 800aa3a:	682b      	ldr	r3, [r5, #0]
 800aa3c:	1d1a      	adds	r2, r3, #4
 800aa3e:	602a      	str	r2, [r5, #0]
 800aa40:	681d      	ldr	r5, [r3, #0]
 800aa42:	6862      	ldr	r2, [r4, #4]
 800aa44:	2100      	movs	r1, #0
 800aa46:	4628      	mov	r0, r5
 800aa48:	f7f5 fbda 	bl	8000200 <memchr>
 800aa4c:	b108      	cbz	r0, 800aa52 <_printf_i+0x1f2>
 800aa4e:	1b40      	subs	r0, r0, r5
 800aa50:	6060      	str	r0, [r4, #4]
 800aa52:	6863      	ldr	r3, [r4, #4]
 800aa54:	6123      	str	r3, [r4, #16]
 800aa56:	2300      	movs	r3, #0
 800aa58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa5c:	e7a8      	b.n	800a9b0 <_printf_i+0x150>
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	462a      	mov	r2, r5
 800aa62:	4649      	mov	r1, r9
 800aa64:	4640      	mov	r0, r8
 800aa66:	47d0      	blx	sl
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d0ab      	beq.n	800a9c4 <_printf_i+0x164>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	079b      	lsls	r3, r3, #30
 800aa70:	d413      	bmi.n	800aa9a <_printf_i+0x23a>
 800aa72:	68e0      	ldr	r0, [r4, #12]
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	4298      	cmp	r0, r3
 800aa78:	bfb8      	it	lt
 800aa7a:	4618      	movlt	r0, r3
 800aa7c:	e7a4      	b.n	800a9c8 <_printf_i+0x168>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4632      	mov	r2, r6
 800aa82:	4649      	mov	r1, r9
 800aa84:	4640      	mov	r0, r8
 800aa86:	47d0      	blx	sl
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d09b      	beq.n	800a9c4 <_printf_i+0x164>
 800aa8c:	3501      	adds	r5, #1
 800aa8e:	68e3      	ldr	r3, [r4, #12]
 800aa90:	9903      	ldr	r1, [sp, #12]
 800aa92:	1a5b      	subs	r3, r3, r1
 800aa94:	42ab      	cmp	r3, r5
 800aa96:	dcf2      	bgt.n	800aa7e <_printf_i+0x21e>
 800aa98:	e7eb      	b.n	800aa72 <_printf_i+0x212>
 800aa9a:	2500      	movs	r5, #0
 800aa9c:	f104 0619 	add.w	r6, r4, #25
 800aaa0:	e7f5      	b.n	800aa8e <_printf_i+0x22e>
 800aaa2:	bf00      	nop
 800aaa4:	08010ee8 	.word	0x08010ee8
 800aaa8:	08010ef9 	.word	0x08010ef9

0800aaac <_scanf_float>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	b087      	sub	sp, #28
 800aab2:	4617      	mov	r7, r2
 800aab4:	9303      	str	r3, [sp, #12]
 800aab6:	688b      	ldr	r3, [r1, #8]
 800aab8:	1e5a      	subs	r2, r3, #1
 800aaba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aabe:	bf83      	ittte	hi
 800aac0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aac4:	195b      	addhi	r3, r3, r5
 800aac6:	9302      	strhi	r3, [sp, #8]
 800aac8:	2300      	movls	r3, #0
 800aaca:	bf86      	itte	hi
 800aacc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aad0:	608b      	strhi	r3, [r1, #8]
 800aad2:	9302      	strls	r3, [sp, #8]
 800aad4:	680b      	ldr	r3, [r1, #0]
 800aad6:	468b      	mov	fp, r1
 800aad8:	2500      	movs	r5, #0
 800aada:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aade:	f84b 3b1c 	str.w	r3, [fp], #28
 800aae2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aae6:	4680      	mov	r8, r0
 800aae8:	460c      	mov	r4, r1
 800aaea:	465e      	mov	r6, fp
 800aaec:	46aa      	mov	sl, r5
 800aaee:	46a9      	mov	r9, r5
 800aaf0:	9501      	str	r5, [sp, #4]
 800aaf2:	68a2      	ldr	r2, [r4, #8]
 800aaf4:	b152      	cbz	r2, 800ab0c <_scanf_float+0x60>
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	2b4e      	cmp	r3, #78	; 0x4e
 800aafc:	d864      	bhi.n	800abc8 <_scanf_float+0x11c>
 800aafe:	2b40      	cmp	r3, #64	; 0x40
 800ab00:	d83c      	bhi.n	800ab7c <_scanf_float+0xd0>
 800ab02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ab06:	b2c8      	uxtb	r0, r1
 800ab08:	280e      	cmp	r0, #14
 800ab0a:	d93a      	bls.n	800ab82 <_scanf_float+0xd6>
 800ab0c:	f1b9 0f00 	cmp.w	r9, #0
 800ab10:	d003      	beq.n	800ab1a <_scanf_float+0x6e>
 800ab12:	6823      	ldr	r3, [r4, #0]
 800ab14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab1e:	f1ba 0f01 	cmp.w	sl, #1
 800ab22:	f200 8113 	bhi.w	800ad4c <_scanf_float+0x2a0>
 800ab26:	455e      	cmp	r6, fp
 800ab28:	f200 8105 	bhi.w	800ad36 <_scanf_float+0x28a>
 800ab2c:	2501      	movs	r5, #1
 800ab2e:	4628      	mov	r0, r5
 800ab30:	b007      	add	sp, #28
 800ab32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ab3a:	2a0d      	cmp	r2, #13
 800ab3c:	d8e6      	bhi.n	800ab0c <_scanf_float+0x60>
 800ab3e:	a101      	add	r1, pc, #4	; (adr r1, 800ab44 <_scanf_float+0x98>)
 800ab40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab44:	0800ac83 	.word	0x0800ac83
 800ab48:	0800ab0d 	.word	0x0800ab0d
 800ab4c:	0800ab0d 	.word	0x0800ab0d
 800ab50:	0800ab0d 	.word	0x0800ab0d
 800ab54:	0800ace3 	.word	0x0800ace3
 800ab58:	0800acbb 	.word	0x0800acbb
 800ab5c:	0800ab0d 	.word	0x0800ab0d
 800ab60:	0800ab0d 	.word	0x0800ab0d
 800ab64:	0800ac91 	.word	0x0800ac91
 800ab68:	0800ab0d 	.word	0x0800ab0d
 800ab6c:	0800ab0d 	.word	0x0800ab0d
 800ab70:	0800ab0d 	.word	0x0800ab0d
 800ab74:	0800ab0d 	.word	0x0800ab0d
 800ab78:	0800ac49 	.word	0x0800ac49
 800ab7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ab80:	e7db      	b.n	800ab3a <_scanf_float+0x8e>
 800ab82:	290e      	cmp	r1, #14
 800ab84:	d8c2      	bhi.n	800ab0c <_scanf_float+0x60>
 800ab86:	a001      	add	r0, pc, #4	; (adr r0, 800ab8c <_scanf_float+0xe0>)
 800ab88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ab8c:	0800ac3b 	.word	0x0800ac3b
 800ab90:	0800ab0d 	.word	0x0800ab0d
 800ab94:	0800ac3b 	.word	0x0800ac3b
 800ab98:	0800accf 	.word	0x0800accf
 800ab9c:	0800ab0d 	.word	0x0800ab0d
 800aba0:	0800abe9 	.word	0x0800abe9
 800aba4:	0800ac25 	.word	0x0800ac25
 800aba8:	0800ac25 	.word	0x0800ac25
 800abac:	0800ac25 	.word	0x0800ac25
 800abb0:	0800ac25 	.word	0x0800ac25
 800abb4:	0800ac25 	.word	0x0800ac25
 800abb8:	0800ac25 	.word	0x0800ac25
 800abbc:	0800ac25 	.word	0x0800ac25
 800abc0:	0800ac25 	.word	0x0800ac25
 800abc4:	0800ac25 	.word	0x0800ac25
 800abc8:	2b6e      	cmp	r3, #110	; 0x6e
 800abca:	d809      	bhi.n	800abe0 <_scanf_float+0x134>
 800abcc:	2b60      	cmp	r3, #96	; 0x60
 800abce:	d8b2      	bhi.n	800ab36 <_scanf_float+0x8a>
 800abd0:	2b54      	cmp	r3, #84	; 0x54
 800abd2:	d077      	beq.n	800acc4 <_scanf_float+0x218>
 800abd4:	2b59      	cmp	r3, #89	; 0x59
 800abd6:	d199      	bne.n	800ab0c <_scanf_float+0x60>
 800abd8:	2d07      	cmp	r5, #7
 800abda:	d197      	bne.n	800ab0c <_scanf_float+0x60>
 800abdc:	2508      	movs	r5, #8
 800abde:	e029      	b.n	800ac34 <_scanf_float+0x188>
 800abe0:	2b74      	cmp	r3, #116	; 0x74
 800abe2:	d06f      	beq.n	800acc4 <_scanf_float+0x218>
 800abe4:	2b79      	cmp	r3, #121	; 0x79
 800abe6:	e7f6      	b.n	800abd6 <_scanf_float+0x12a>
 800abe8:	6821      	ldr	r1, [r4, #0]
 800abea:	05c8      	lsls	r0, r1, #23
 800abec:	d51a      	bpl.n	800ac24 <_scanf_float+0x178>
 800abee:	9b02      	ldr	r3, [sp, #8]
 800abf0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800abf4:	6021      	str	r1, [r4, #0]
 800abf6:	f109 0901 	add.w	r9, r9, #1
 800abfa:	b11b      	cbz	r3, 800ac04 <_scanf_float+0x158>
 800abfc:	3b01      	subs	r3, #1
 800abfe:	3201      	adds	r2, #1
 800ac00:	9302      	str	r3, [sp, #8]
 800ac02:	60a2      	str	r2, [r4, #8]
 800ac04:	68a3      	ldr	r3, [r4, #8]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	60a3      	str	r3, [r4, #8]
 800ac0a:	6923      	ldr	r3, [r4, #16]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	6123      	str	r3, [r4, #16]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3b01      	subs	r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	607b      	str	r3, [r7, #4]
 800ac18:	f340 8084 	ble.w	800ad24 <_scanf_float+0x278>
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	603b      	str	r3, [r7, #0]
 800ac22:	e766      	b.n	800aaf2 <_scanf_float+0x46>
 800ac24:	eb1a 0f05 	cmn.w	sl, r5
 800ac28:	f47f af70 	bne.w	800ab0c <_scanf_float+0x60>
 800ac2c:	6822      	ldr	r2, [r4, #0]
 800ac2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ac32:	6022      	str	r2, [r4, #0]
 800ac34:	f806 3b01 	strb.w	r3, [r6], #1
 800ac38:	e7e4      	b.n	800ac04 <_scanf_float+0x158>
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	0610      	lsls	r0, r2, #24
 800ac3e:	f57f af65 	bpl.w	800ab0c <_scanf_float+0x60>
 800ac42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac46:	e7f4      	b.n	800ac32 <_scanf_float+0x186>
 800ac48:	f1ba 0f00 	cmp.w	sl, #0
 800ac4c:	d10e      	bne.n	800ac6c <_scanf_float+0x1c0>
 800ac4e:	f1b9 0f00 	cmp.w	r9, #0
 800ac52:	d10e      	bne.n	800ac72 <_scanf_float+0x1c6>
 800ac54:	6822      	ldr	r2, [r4, #0]
 800ac56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ac5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ac5e:	d108      	bne.n	800ac72 <_scanf_float+0x1c6>
 800ac60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ac64:	6022      	str	r2, [r4, #0]
 800ac66:	f04f 0a01 	mov.w	sl, #1
 800ac6a:	e7e3      	b.n	800ac34 <_scanf_float+0x188>
 800ac6c:	f1ba 0f02 	cmp.w	sl, #2
 800ac70:	d055      	beq.n	800ad1e <_scanf_float+0x272>
 800ac72:	2d01      	cmp	r5, #1
 800ac74:	d002      	beq.n	800ac7c <_scanf_float+0x1d0>
 800ac76:	2d04      	cmp	r5, #4
 800ac78:	f47f af48 	bne.w	800ab0c <_scanf_float+0x60>
 800ac7c:	3501      	adds	r5, #1
 800ac7e:	b2ed      	uxtb	r5, r5
 800ac80:	e7d8      	b.n	800ac34 <_scanf_float+0x188>
 800ac82:	f1ba 0f01 	cmp.w	sl, #1
 800ac86:	f47f af41 	bne.w	800ab0c <_scanf_float+0x60>
 800ac8a:	f04f 0a02 	mov.w	sl, #2
 800ac8e:	e7d1      	b.n	800ac34 <_scanf_float+0x188>
 800ac90:	b97d      	cbnz	r5, 800acb2 <_scanf_float+0x206>
 800ac92:	f1b9 0f00 	cmp.w	r9, #0
 800ac96:	f47f af3c 	bne.w	800ab12 <_scanf_float+0x66>
 800ac9a:	6822      	ldr	r2, [r4, #0]
 800ac9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aca0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aca4:	f47f af39 	bne.w	800ab1a <_scanf_float+0x6e>
 800aca8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800acac:	6022      	str	r2, [r4, #0]
 800acae:	2501      	movs	r5, #1
 800acb0:	e7c0      	b.n	800ac34 <_scanf_float+0x188>
 800acb2:	2d03      	cmp	r5, #3
 800acb4:	d0e2      	beq.n	800ac7c <_scanf_float+0x1d0>
 800acb6:	2d05      	cmp	r5, #5
 800acb8:	e7de      	b.n	800ac78 <_scanf_float+0x1cc>
 800acba:	2d02      	cmp	r5, #2
 800acbc:	f47f af26 	bne.w	800ab0c <_scanf_float+0x60>
 800acc0:	2503      	movs	r5, #3
 800acc2:	e7b7      	b.n	800ac34 <_scanf_float+0x188>
 800acc4:	2d06      	cmp	r5, #6
 800acc6:	f47f af21 	bne.w	800ab0c <_scanf_float+0x60>
 800acca:	2507      	movs	r5, #7
 800accc:	e7b2      	b.n	800ac34 <_scanf_float+0x188>
 800acce:	6822      	ldr	r2, [r4, #0]
 800acd0:	0591      	lsls	r1, r2, #22
 800acd2:	f57f af1b 	bpl.w	800ab0c <_scanf_float+0x60>
 800acd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800acda:	6022      	str	r2, [r4, #0]
 800acdc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ace0:	e7a8      	b.n	800ac34 <_scanf_float+0x188>
 800ace2:	6822      	ldr	r2, [r4, #0]
 800ace4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ace8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800acec:	d006      	beq.n	800acfc <_scanf_float+0x250>
 800acee:	0550      	lsls	r0, r2, #21
 800acf0:	f57f af0c 	bpl.w	800ab0c <_scanf_float+0x60>
 800acf4:	f1b9 0f00 	cmp.w	r9, #0
 800acf8:	f43f af0f 	beq.w	800ab1a <_scanf_float+0x6e>
 800acfc:	0591      	lsls	r1, r2, #22
 800acfe:	bf58      	it	pl
 800ad00:	9901      	ldrpl	r1, [sp, #4]
 800ad02:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad06:	bf58      	it	pl
 800ad08:	eba9 0101 	subpl.w	r1, r9, r1
 800ad0c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ad10:	bf58      	it	pl
 800ad12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ad16:	6022      	str	r2, [r4, #0]
 800ad18:	f04f 0900 	mov.w	r9, #0
 800ad1c:	e78a      	b.n	800ac34 <_scanf_float+0x188>
 800ad1e:	f04f 0a03 	mov.w	sl, #3
 800ad22:	e787      	b.n	800ac34 <_scanf_float+0x188>
 800ad24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ad28:	4639      	mov	r1, r7
 800ad2a:	4640      	mov	r0, r8
 800ad2c:	4798      	blx	r3
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	f43f aedf 	beq.w	800aaf2 <_scanf_float+0x46>
 800ad34:	e6ea      	b.n	800ab0c <_scanf_float+0x60>
 800ad36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad3e:	463a      	mov	r2, r7
 800ad40:	4640      	mov	r0, r8
 800ad42:	4798      	blx	r3
 800ad44:	6923      	ldr	r3, [r4, #16]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	6123      	str	r3, [r4, #16]
 800ad4a:	e6ec      	b.n	800ab26 <_scanf_float+0x7a>
 800ad4c:	1e6b      	subs	r3, r5, #1
 800ad4e:	2b06      	cmp	r3, #6
 800ad50:	d825      	bhi.n	800ad9e <_scanf_float+0x2f2>
 800ad52:	2d02      	cmp	r5, #2
 800ad54:	d836      	bhi.n	800adc4 <_scanf_float+0x318>
 800ad56:	455e      	cmp	r6, fp
 800ad58:	f67f aee8 	bls.w	800ab2c <_scanf_float+0x80>
 800ad5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad60:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ad64:	463a      	mov	r2, r7
 800ad66:	4640      	mov	r0, r8
 800ad68:	4798      	blx	r3
 800ad6a:	6923      	ldr	r3, [r4, #16]
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	6123      	str	r3, [r4, #16]
 800ad70:	e7f1      	b.n	800ad56 <_scanf_float+0x2aa>
 800ad72:	9802      	ldr	r0, [sp, #8]
 800ad74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad78:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ad7c:	9002      	str	r0, [sp, #8]
 800ad7e:	463a      	mov	r2, r7
 800ad80:	4640      	mov	r0, r8
 800ad82:	4798      	blx	r3
 800ad84:	6923      	ldr	r3, [r4, #16]
 800ad86:	3b01      	subs	r3, #1
 800ad88:	6123      	str	r3, [r4, #16]
 800ad8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad8e:	fa5f fa8a 	uxtb.w	sl, sl
 800ad92:	f1ba 0f02 	cmp.w	sl, #2
 800ad96:	d1ec      	bne.n	800ad72 <_scanf_float+0x2c6>
 800ad98:	3d03      	subs	r5, #3
 800ad9a:	b2ed      	uxtb	r5, r5
 800ad9c:	1b76      	subs	r6, r6, r5
 800ad9e:	6823      	ldr	r3, [r4, #0]
 800ada0:	05da      	lsls	r2, r3, #23
 800ada2:	d52f      	bpl.n	800ae04 <_scanf_float+0x358>
 800ada4:	055b      	lsls	r3, r3, #21
 800ada6:	d510      	bpl.n	800adca <_scanf_float+0x31e>
 800ada8:	455e      	cmp	r6, fp
 800adaa:	f67f aebf 	bls.w	800ab2c <_scanf_float+0x80>
 800adae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adb6:	463a      	mov	r2, r7
 800adb8:	4640      	mov	r0, r8
 800adba:	4798      	blx	r3
 800adbc:	6923      	ldr	r3, [r4, #16]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	6123      	str	r3, [r4, #16]
 800adc2:	e7f1      	b.n	800ada8 <_scanf_float+0x2fc>
 800adc4:	46aa      	mov	sl, r5
 800adc6:	9602      	str	r6, [sp, #8]
 800adc8:	e7df      	b.n	800ad8a <_scanf_float+0x2de>
 800adca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800adce:	6923      	ldr	r3, [r4, #16]
 800add0:	2965      	cmp	r1, #101	; 0x65
 800add2:	f103 33ff 	add.w	r3, r3, #4294967295
 800add6:	f106 35ff 	add.w	r5, r6, #4294967295
 800adda:	6123      	str	r3, [r4, #16]
 800addc:	d00c      	beq.n	800adf8 <_scanf_float+0x34c>
 800adde:	2945      	cmp	r1, #69	; 0x45
 800ade0:	d00a      	beq.n	800adf8 <_scanf_float+0x34c>
 800ade2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ade6:	463a      	mov	r2, r7
 800ade8:	4640      	mov	r0, r8
 800adea:	4798      	blx	r3
 800adec:	6923      	ldr	r3, [r4, #16]
 800adee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800adf2:	3b01      	subs	r3, #1
 800adf4:	1eb5      	subs	r5, r6, #2
 800adf6:	6123      	str	r3, [r4, #16]
 800adf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adfc:	463a      	mov	r2, r7
 800adfe:	4640      	mov	r0, r8
 800ae00:	4798      	blx	r3
 800ae02:	462e      	mov	r6, r5
 800ae04:	6825      	ldr	r5, [r4, #0]
 800ae06:	f015 0510 	ands.w	r5, r5, #16
 800ae0a:	d159      	bne.n	800aec0 <_scanf_float+0x414>
 800ae0c:	7035      	strb	r5, [r6, #0]
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ae14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae18:	d11b      	bne.n	800ae52 <_scanf_float+0x3a6>
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	454b      	cmp	r3, r9
 800ae1e:	eba3 0209 	sub.w	r2, r3, r9
 800ae22:	d123      	bne.n	800ae6c <_scanf_float+0x3c0>
 800ae24:	2200      	movs	r2, #0
 800ae26:	4659      	mov	r1, fp
 800ae28:	4640      	mov	r0, r8
 800ae2a:	f000 ffbf 	bl	800bdac <_strtod_r>
 800ae2e:	6822      	ldr	r2, [r4, #0]
 800ae30:	9b03      	ldr	r3, [sp, #12]
 800ae32:	f012 0f02 	tst.w	r2, #2
 800ae36:	ec57 6b10 	vmov	r6, r7, d0
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	d021      	beq.n	800ae82 <_scanf_float+0x3d6>
 800ae3e:	9903      	ldr	r1, [sp, #12]
 800ae40:	1d1a      	adds	r2, r3, #4
 800ae42:	600a      	str	r2, [r1, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	e9c3 6700 	strd	r6, r7, [r3]
 800ae4a:	68e3      	ldr	r3, [r4, #12]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	60e3      	str	r3, [r4, #12]
 800ae50:	e66d      	b.n	800ab2e <_scanf_float+0x82>
 800ae52:	9b04      	ldr	r3, [sp, #16]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0e5      	beq.n	800ae24 <_scanf_float+0x378>
 800ae58:	9905      	ldr	r1, [sp, #20]
 800ae5a:	230a      	movs	r3, #10
 800ae5c:	462a      	mov	r2, r5
 800ae5e:	3101      	adds	r1, #1
 800ae60:	4640      	mov	r0, r8
 800ae62:	f001 f857 	bl	800bf14 <_strtol_r>
 800ae66:	9b04      	ldr	r3, [sp, #16]
 800ae68:	9e05      	ldr	r6, [sp, #20]
 800ae6a:	1ac2      	subs	r2, r0, r3
 800ae6c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ae70:	429e      	cmp	r6, r3
 800ae72:	bf28      	it	cs
 800ae74:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ae78:	4912      	ldr	r1, [pc, #72]	; (800aec4 <_scanf_float+0x418>)
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f000 f8a6 	bl	800afcc <siprintf>
 800ae80:	e7d0      	b.n	800ae24 <_scanf_float+0x378>
 800ae82:	9903      	ldr	r1, [sp, #12]
 800ae84:	f012 0f04 	tst.w	r2, #4
 800ae88:	f103 0204 	add.w	r2, r3, #4
 800ae8c:	600a      	str	r2, [r1, #0]
 800ae8e:	d1d9      	bne.n	800ae44 <_scanf_float+0x398>
 800ae90:	f8d3 8000 	ldr.w	r8, [r3]
 800ae94:	ee10 2a10 	vmov	r2, s0
 800ae98:	ee10 0a10 	vmov	r0, s0
 800ae9c:	463b      	mov	r3, r7
 800ae9e:	4639      	mov	r1, r7
 800aea0:	f7f5 fe54 	bl	8000b4c <__aeabi_dcmpun>
 800aea4:	b128      	cbz	r0, 800aeb2 <_scanf_float+0x406>
 800aea6:	4808      	ldr	r0, [pc, #32]	; (800aec8 <_scanf_float+0x41c>)
 800aea8:	f000 f88a 	bl	800afc0 <nanf>
 800aeac:	ed88 0a00 	vstr	s0, [r8]
 800aeb0:	e7cb      	b.n	800ae4a <_scanf_float+0x39e>
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	f7f5 fea7 	bl	8000c08 <__aeabi_d2f>
 800aeba:	f8c8 0000 	str.w	r0, [r8]
 800aebe:	e7c4      	b.n	800ae4a <_scanf_float+0x39e>
 800aec0:	2500      	movs	r5, #0
 800aec2:	e634      	b.n	800ab2e <_scanf_float+0x82>
 800aec4:	08010f0a 	.word	0x08010f0a
 800aec8:	0801132b 	.word	0x0801132b

0800aecc <cleanup_glue>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	460c      	mov	r4, r1
 800aed0:	6809      	ldr	r1, [r1, #0]
 800aed2:	4605      	mov	r5, r0
 800aed4:	b109      	cbz	r1, 800aeda <cleanup_glue+0xe>
 800aed6:	f7ff fff9 	bl	800aecc <cleanup_glue>
 800aeda:	4621      	mov	r1, r4
 800aedc:	4628      	mov	r0, r5
 800aede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aee2:	f003 b855 	b.w	800df90 <_free_r>
	...

0800aee8 <_reclaim_reent>:
 800aee8:	4b2c      	ldr	r3, [pc, #176]	; (800af9c <_reclaim_reent+0xb4>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4283      	cmp	r3, r0
 800aeee:	b570      	push	{r4, r5, r6, lr}
 800aef0:	4604      	mov	r4, r0
 800aef2:	d051      	beq.n	800af98 <_reclaim_reent+0xb0>
 800aef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800aef6:	b143      	cbz	r3, 800af0a <_reclaim_reent+0x22>
 800aef8:	68db      	ldr	r3, [r3, #12]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d14a      	bne.n	800af94 <_reclaim_reent+0xac>
 800aefe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af00:	6819      	ldr	r1, [r3, #0]
 800af02:	b111      	cbz	r1, 800af0a <_reclaim_reent+0x22>
 800af04:	4620      	mov	r0, r4
 800af06:	f003 f843 	bl	800df90 <_free_r>
 800af0a:	6961      	ldr	r1, [r4, #20]
 800af0c:	b111      	cbz	r1, 800af14 <_reclaim_reent+0x2c>
 800af0e:	4620      	mov	r0, r4
 800af10:	f003 f83e 	bl	800df90 <_free_r>
 800af14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800af16:	b111      	cbz	r1, 800af1e <_reclaim_reent+0x36>
 800af18:	4620      	mov	r0, r4
 800af1a:	f003 f839 	bl	800df90 <_free_r>
 800af1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800af20:	b111      	cbz	r1, 800af28 <_reclaim_reent+0x40>
 800af22:	4620      	mov	r0, r4
 800af24:	f003 f834 	bl	800df90 <_free_r>
 800af28:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800af2a:	b111      	cbz	r1, 800af32 <_reclaim_reent+0x4a>
 800af2c:	4620      	mov	r0, r4
 800af2e:	f003 f82f 	bl	800df90 <_free_r>
 800af32:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800af34:	b111      	cbz	r1, 800af3c <_reclaim_reent+0x54>
 800af36:	4620      	mov	r0, r4
 800af38:	f003 f82a 	bl	800df90 <_free_r>
 800af3c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800af3e:	b111      	cbz	r1, 800af46 <_reclaim_reent+0x5e>
 800af40:	4620      	mov	r0, r4
 800af42:	f003 f825 	bl	800df90 <_free_r>
 800af46:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800af48:	b111      	cbz	r1, 800af50 <_reclaim_reent+0x68>
 800af4a:	4620      	mov	r0, r4
 800af4c:	f003 f820 	bl	800df90 <_free_r>
 800af50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af52:	b111      	cbz	r1, 800af5a <_reclaim_reent+0x72>
 800af54:	4620      	mov	r0, r4
 800af56:	f003 f81b 	bl	800df90 <_free_r>
 800af5a:	69a3      	ldr	r3, [r4, #24]
 800af5c:	b1e3      	cbz	r3, 800af98 <_reclaim_reent+0xb0>
 800af5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af60:	4620      	mov	r0, r4
 800af62:	4798      	blx	r3
 800af64:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800af66:	b1b9      	cbz	r1, 800af98 <_reclaim_reent+0xb0>
 800af68:	4620      	mov	r0, r4
 800af6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af6e:	f7ff bfad 	b.w	800aecc <cleanup_glue>
 800af72:	5949      	ldr	r1, [r1, r5]
 800af74:	b941      	cbnz	r1, 800af88 <_reclaim_reent+0xa0>
 800af76:	3504      	adds	r5, #4
 800af78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af7a:	2d80      	cmp	r5, #128	; 0x80
 800af7c:	68d9      	ldr	r1, [r3, #12]
 800af7e:	d1f8      	bne.n	800af72 <_reclaim_reent+0x8a>
 800af80:	4620      	mov	r0, r4
 800af82:	f003 f805 	bl	800df90 <_free_r>
 800af86:	e7ba      	b.n	800aefe <_reclaim_reent+0x16>
 800af88:	680e      	ldr	r6, [r1, #0]
 800af8a:	4620      	mov	r0, r4
 800af8c:	f003 f800 	bl	800df90 <_free_r>
 800af90:	4631      	mov	r1, r6
 800af92:	e7ef      	b.n	800af74 <_reclaim_reent+0x8c>
 800af94:	2500      	movs	r5, #0
 800af96:	e7ef      	b.n	800af78 <_reclaim_reent+0x90>
 800af98:	bd70      	pop	{r4, r5, r6, pc}
 800af9a:	bf00      	nop
 800af9c:	200000bc 	.word	0x200000bc

0800afa0 <_sbrk_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d06      	ldr	r5, [pc, #24]	; (800afbc <_sbrk_r+0x1c>)
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	602b      	str	r3, [r5, #0]
 800afac:	f7f9 fdf8 	bl	8004ba0 <_sbrk>
 800afb0:	1c43      	adds	r3, r0, #1
 800afb2:	d102      	bne.n	800afba <_sbrk_r+0x1a>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	b103      	cbz	r3, 800afba <_sbrk_r+0x1a>
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	bd38      	pop	{r3, r4, r5, pc}
 800afbc:	2000db64 	.word	0x2000db64

0800afc0 <nanf>:
 800afc0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800afc8 <nanf+0x8>
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	7fc00000 	.word	0x7fc00000

0800afcc <siprintf>:
 800afcc:	b40e      	push	{r1, r2, r3}
 800afce:	b500      	push	{lr}
 800afd0:	b09c      	sub	sp, #112	; 0x70
 800afd2:	ab1d      	add	r3, sp, #116	; 0x74
 800afd4:	9002      	str	r0, [sp, #8]
 800afd6:	9006      	str	r0, [sp, #24]
 800afd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afdc:	4809      	ldr	r0, [pc, #36]	; (800b004 <siprintf+0x38>)
 800afde:	9107      	str	r1, [sp, #28]
 800afe0:	9104      	str	r1, [sp, #16]
 800afe2:	4909      	ldr	r1, [pc, #36]	; (800b008 <siprintf+0x3c>)
 800afe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe8:	9105      	str	r1, [sp, #20]
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	a902      	add	r1, sp, #8
 800aff0:	f003 f876 	bl	800e0e0 <_svfiprintf_r>
 800aff4:	9b02      	ldr	r3, [sp, #8]
 800aff6:	2200      	movs	r2, #0
 800aff8:	701a      	strb	r2, [r3, #0]
 800affa:	b01c      	add	sp, #112	; 0x70
 800affc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b000:	b003      	add	sp, #12
 800b002:	4770      	bx	lr
 800b004:	200000bc 	.word	0x200000bc
 800b008:	ffff0208 	.word	0xffff0208

0800b00c <siscanf>:
 800b00c:	b40e      	push	{r1, r2, r3}
 800b00e:	b510      	push	{r4, lr}
 800b010:	b09f      	sub	sp, #124	; 0x7c
 800b012:	ac21      	add	r4, sp, #132	; 0x84
 800b014:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b018:	f854 2b04 	ldr.w	r2, [r4], #4
 800b01c:	9201      	str	r2, [sp, #4]
 800b01e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b022:	9004      	str	r0, [sp, #16]
 800b024:	9008      	str	r0, [sp, #32]
 800b026:	f7f5 f8dd 	bl	80001e4 <strlen>
 800b02a:	4b0c      	ldr	r3, [pc, #48]	; (800b05c <siscanf+0x50>)
 800b02c:	9005      	str	r0, [sp, #20]
 800b02e:	9009      	str	r0, [sp, #36]	; 0x24
 800b030:	930d      	str	r3, [sp, #52]	; 0x34
 800b032:	480b      	ldr	r0, [pc, #44]	; (800b060 <siscanf+0x54>)
 800b034:	9a01      	ldr	r2, [sp, #4]
 800b036:	6800      	ldr	r0, [r0, #0]
 800b038:	9403      	str	r4, [sp, #12]
 800b03a:	2300      	movs	r3, #0
 800b03c:	9311      	str	r3, [sp, #68]	; 0x44
 800b03e:	9316      	str	r3, [sp, #88]	; 0x58
 800b040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b044:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b048:	a904      	add	r1, sp, #16
 800b04a:	4623      	mov	r3, r4
 800b04c:	f003 f9a2 	bl	800e394 <__ssvfiscanf_r>
 800b050:	b01f      	add	sp, #124	; 0x7c
 800b052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b056:	b003      	add	sp, #12
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	0800b087 	.word	0x0800b087
 800b060:	200000bc 	.word	0x200000bc

0800b064 <__sread>:
 800b064:	b510      	push	{r4, lr}
 800b066:	460c      	mov	r4, r1
 800b068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b06c:	f003 fc5c 	bl	800e928 <_read_r>
 800b070:	2800      	cmp	r0, #0
 800b072:	bfab      	itete	ge
 800b074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b076:	89a3      	ldrhlt	r3, [r4, #12]
 800b078:	181b      	addge	r3, r3, r0
 800b07a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b07e:	bfac      	ite	ge
 800b080:	6563      	strge	r3, [r4, #84]	; 0x54
 800b082:	81a3      	strhlt	r3, [r4, #12]
 800b084:	bd10      	pop	{r4, pc}

0800b086 <__seofread>:
 800b086:	2000      	movs	r0, #0
 800b088:	4770      	bx	lr

0800b08a <__swrite>:
 800b08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b08e:	461f      	mov	r7, r3
 800b090:	898b      	ldrh	r3, [r1, #12]
 800b092:	05db      	lsls	r3, r3, #23
 800b094:	4605      	mov	r5, r0
 800b096:	460c      	mov	r4, r1
 800b098:	4616      	mov	r6, r2
 800b09a:	d505      	bpl.n	800b0a8 <__swrite+0x1e>
 800b09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f002 fa64 	bl	800d570 <_lseek_r>
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0b2:	81a3      	strh	r3, [r4, #12]
 800b0b4:	4632      	mov	r2, r6
 800b0b6:	463b      	mov	r3, r7
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0be:	f000 bf85 	b.w	800bfcc <_write_r>

0800b0c2 <__sseek>:
 800b0c2:	b510      	push	{r4, lr}
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ca:	f002 fa51 	bl	800d570 <_lseek_r>
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	bf15      	itete	ne
 800b0d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b0da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b0de:	81a3      	strheq	r3, [r4, #12]
 800b0e0:	bf18      	it	ne
 800b0e2:	81a3      	strhne	r3, [r4, #12]
 800b0e4:	bd10      	pop	{r4, pc}

0800b0e6 <__sclose>:
 800b0e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ea:	f000 bf81 	b.w	800bff0 <_close_r>

0800b0ee <strncmp>:
 800b0ee:	b510      	push	{r4, lr}
 800b0f0:	b17a      	cbz	r2, 800b112 <strncmp+0x24>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	3901      	subs	r1, #1
 800b0f6:	1884      	adds	r4, r0, r2
 800b0f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b0fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b100:	4290      	cmp	r0, r2
 800b102:	d101      	bne.n	800b108 <strncmp+0x1a>
 800b104:	42a3      	cmp	r3, r4
 800b106:	d101      	bne.n	800b10c <strncmp+0x1e>
 800b108:	1a80      	subs	r0, r0, r2
 800b10a:	bd10      	pop	{r4, pc}
 800b10c:	2800      	cmp	r0, #0
 800b10e:	d1f3      	bne.n	800b0f8 <strncmp+0xa>
 800b110:	e7fa      	b.n	800b108 <strncmp+0x1a>
 800b112:	4610      	mov	r0, r2
 800b114:	e7f9      	b.n	800b10a <strncmp+0x1c>

0800b116 <strncpy>:
 800b116:	b510      	push	{r4, lr}
 800b118:	3901      	subs	r1, #1
 800b11a:	4603      	mov	r3, r0
 800b11c:	b132      	cbz	r2, 800b12c <strncpy+0x16>
 800b11e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b122:	f803 4b01 	strb.w	r4, [r3], #1
 800b126:	3a01      	subs	r2, #1
 800b128:	2c00      	cmp	r4, #0
 800b12a:	d1f7      	bne.n	800b11c <strncpy+0x6>
 800b12c:	441a      	add	r2, r3
 800b12e:	2100      	movs	r1, #0
 800b130:	4293      	cmp	r3, r2
 800b132:	d100      	bne.n	800b136 <strncpy+0x20>
 800b134:	bd10      	pop	{r4, pc}
 800b136:	f803 1b01 	strb.w	r1, [r3], #1
 800b13a:	e7f9      	b.n	800b130 <strncpy+0x1a>

0800b13c <strstr>:
 800b13c:	780a      	ldrb	r2, [r1, #0]
 800b13e:	b570      	push	{r4, r5, r6, lr}
 800b140:	b96a      	cbnz	r2, 800b15e <strstr+0x22>
 800b142:	bd70      	pop	{r4, r5, r6, pc}
 800b144:	429a      	cmp	r2, r3
 800b146:	d109      	bne.n	800b15c <strstr+0x20>
 800b148:	460c      	mov	r4, r1
 800b14a:	4605      	mov	r5, r0
 800b14c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b150:	2b00      	cmp	r3, #0
 800b152:	d0f6      	beq.n	800b142 <strstr+0x6>
 800b154:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b158:	429e      	cmp	r6, r3
 800b15a:	d0f7      	beq.n	800b14c <strstr+0x10>
 800b15c:	3001      	adds	r0, #1
 800b15e:	7803      	ldrb	r3, [r0, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1ef      	bne.n	800b144 <strstr+0x8>
 800b164:	4618      	mov	r0, r3
 800b166:	e7ec      	b.n	800b142 <strstr+0x6>

0800b168 <sulp>:
 800b168:	b570      	push	{r4, r5, r6, lr}
 800b16a:	4604      	mov	r4, r0
 800b16c:	460d      	mov	r5, r1
 800b16e:	ec45 4b10 	vmov	d0, r4, r5
 800b172:	4616      	mov	r6, r2
 800b174:	f002 fda6 	bl	800dcc4 <__ulp>
 800b178:	ec51 0b10 	vmov	r0, r1, d0
 800b17c:	b17e      	cbz	r6, 800b19e <sulp+0x36>
 800b17e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b182:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b186:	2b00      	cmp	r3, #0
 800b188:	dd09      	ble.n	800b19e <sulp+0x36>
 800b18a:	051b      	lsls	r3, r3, #20
 800b18c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b190:	2400      	movs	r4, #0
 800b192:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b196:	4622      	mov	r2, r4
 800b198:	462b      	mov	r3, r5
 800b19a:	f7f5 fa3d 	bl	8000618 <__aeabi_dmul>
 800b19e:	bd70      	pop	{r4, r5, r6, pc}

0800b1a0 <_strtod_l>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	ed2d 8b02 	vpush	{d8}
 800b1a8:	b09d      	sub	sp, #116	; 0x74
 800b1aa:	461f      	mov	r7, r3
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	9318      	str	r3, [sp, #96]	; 0x60
 800b1b0:	4ba2      	ldr	r3, [pc, #648]	; (800b43c <_strtod_l+0x29c>)
 800b1b2:	9213      	str	r2, [sp, #76]	; 0x4c
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	9305      	str	r3, [sp, #20]
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	4688      	mov	r8, r1
 800b1be:	f7f5 f811 	bl	80001e4 <strlen>
 800b1c2:	f04f 0a00 	mov.w	sl, #0
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	f04f 0b00 	mov.w	fp, #0
 800b1cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1d2:	781a      	ldrb	r2, [r3, #0]
 800b1d4:	2a2b      	cmp	r2, #43	; 0x2b
 800b1d6:	d04e      	beq.n	800b276 <_strtod_l+0xd6>
 800b1d8:	d83b      	bhi.n	800b252 <_strtod_l+0xb2>
 800b1da:	2a0d      	cmp	r2, #13
 800b1dc:	d834      	bhi.n	800b248 <_strtod_l+0xa8>
 800b1de:	2a08      	cmp	r2, #8
 800b1e0:	d834      	bhi.n	800b24c <_strtod_l+0xac>
 800b1e2:	2a00      	cmp	r2, #0
 800b1e4:	d03e      	beq.n	800b264 <_strtod_l+0xc4>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	930a      	str	r3, [sp, #40]	; 0x28
 800b1ea:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b1ec:	7833      	ldrb	r3, [r6, #0]
 800b1ee:	2b30      	cmp	r3, #48	; 0x30
 800b1f0:	f040 80b0 	bne.w	800b354 <_strtod_l+0x1b4>
 800b1f4:	7873      	ldrb	r3, [r6, #1]
 800b1f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b1fa:	2b58      	cmp	r3, #88	; 0x58
 800b1fc:	d168      	bne.n	800b2d0 <_strtod_l+0x130>
 800b1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	ab18      	add	r3, sp, #96	; 0x60
 800b204:	9702      	str	r7, [sp, #8]
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	4a8d      	ldr	r2, [pc, #564]	; (800b440 <_strtod_l+0x2a0>)
 800b20a:	ab19      	add	r3, sp, #100	; 0x64
 800b20c:	a917      	add	r1, sp, #92	; 0x5c
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 fea2 	bl	800cf58 <__gethex>
 800b214:	f010 0707 	ands.w	r7, r0, #7
 800b218:	4605      	mov	r5, r0
 800b21a:	d005      	beq.n	800b228 <_strtod_l+0x88>
 800b21c:	2f06      	cmp	r7, #6
 800b21e:	d12c      	bne.n	800b27a <_strtod_l+0xda>
 800b220:	3601      	adds	r6, #1
 800b222:	2300      	movs	r3, #0
 800b224:	9617      	str	r6, [sp, #92]	; 0x5c
 800b226:	930a      	str	r3, [sp, #40]	; 0x28
 800b228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f040 8590 	bne.w	800bd50 <_strtod_l+0xbb0>
 800b230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b232:	b1eb      	cbz	r3, 800b270 <_strtod_l+0xd0>
 800b234:	4652      	mov	r2, sl
 800b236:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b23a:	ec43 2b10 	vmov	d0, r2, r3
 800b23e:	b01d      	add	sp, #116	; 0x74
 800b240:	ecbd 8b02 	vpop	{d8}
 800b244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b248:	2a20      	cmp	r2, #32
 800b24a:	d1cc      	bne.n	800b1e6 <_strtod_l+0x46>
 800b24c:	3301      	adds	r3, #1
 800b24e:	9317      	str	r3, [sp, #92]	; 0x5c
 800b250:	e7be      	b.n	800b1d0 <_strtod_l+0x30>
 800b252:	2a2d      	cmp	r2, #45	; 0x2d
 800b254:	d1c7      	bne.n	800b1e6 <_strtod_l+0x46>
 800b256:	2201      	movs	r2, #1
 800b258:	920a      	str	r2, [sp, #40]	; 0x28
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b25e:	785b      	ldrb	r3, [r3, #1]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1c2      	bne.n	800b1ea <_strtod_l+0x4a>
 800b264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b266:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f040 856e 	bne.w	800bd4c <_strtod_l+0xbac>
 800b270:	4652      	mov	r2, sl
 800b272:	465b      	mov	r3, fp
 800b274:	e7e1      	b.n	800b23a <_strtod_l+0x9a>
 800b276:	2200      	movs	r2, #0
 800b278:	e7ee      	b.n	800b258 <_strtod_l+0xb8>
 800b27a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b27c:	b13a      	cbz	r2, 800b28e <_strtod_l+0xee>
 800b27e:	2135      	movs	r1, #53	; 0x35
 800b280:	a81a      	add	r0, sp, #104	; 0x68
 800b282:	f002 fe2a 	bl	800deda <__copybits>
 800b286:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b288:	4620      	mov	r0, r4
 800b28a:	f002 f9e9 	bl	800d660 <_Bfree>
 800b28e:	3f01      	subs	r7, #1
 800b290:	2f04      	cmp	r7, #4
 800b292:	d806      	bhi.n	800b2a2 <_strtod_l+0x102>
 800b294:	e8df f007 	tbb	[pc, r7]
 800b298:	1714030a 	.word	0x1714030a
 800b29c:	0a          	.byte	0x0a
 800b29d:	00          	.byte	0x00
 800b29e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b2a2:	0728      	lsls	r0, r5, #28
 800b2a4:	d5c0      	bpl.n	800b228 <_strtod_l+0x88>
 800b2a6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b2aa:	e7bd      	b.n	800b228 <_strtod_l+0x88>
 800b2ac:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b2b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b2b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b2b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b2ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b2be:	e7f0      	b.n	800b2a2 <_strtod_l+0x102>
 800b2c0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b444 <_strtod_l+0x2a4>
 800b2c4:	e7ed      	b.n	800b2a2 <_strtod_l+0x102>
 800b2c6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b2ca:	f04f 3aff 	mov.w	sl, #4294967295
 800b2ce:	e7e8      	b.n	800b2a2 <_strtod_l+0x102>
 800b2d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2d2:	1c5a      	adds	r2, r3, #1
 800b2d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b2d6:	785b      	ldrb	r3, [r3, #1]
 800b2d8:	2b30      	cmp	r3, #48	; 0x30
 800b2da:	d0f9      	beq.n	800b2d0 <_strtod_l+0x130>
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d0a3      	beq.n	800b228 <_strtod_l+0x88>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	f04f 0900 	mov.w	r9, #0
 800b2e6:	9304      	str	r3, [sp, #16]
 800b2e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2ea:	9308      	str	r3, [sp, #32]
 800b2ec:	f8cd 901c 	str.w	r9, [sp, #28]
 800b2f0:	464f      	mov	r7, r9
 800b2f2:	220a      	movs	r2, #10
 800b2f4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b2f6:	7806      	ldrb	r6, [r0, #0]
 800b2f8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b2fc:	b2d9      	uxtb	r1, r3
 800b2fe:	2909      	cmp	r1, #9
 800b300:	d92a      	bls.n	800b358 <_strtod_l+0x1b8>
 800b302:	9905      	ldr	r1, [sp, #20]
 800b304:	462a      	mov	r2, r5
 800b306:	f7ff fef2 	bl	800b0ee <strncmp>
 800b30a:	b398      	cbz	r0, 800b374 <_strtod_l+0x1d4>
 800b30c:	2000      	movs	r0, #0
 800b30e:	4632      	mov	r2, r6
 800b310:	463d      	mov	r5, r7
 800b312:	9005      	str	r0, [sp, #20]
 800b314:	4603      	mov	r3, r0
 800b316:	2a65      	cmp	r2, #101	; 0x65
 800b318:	d001      	beq.n	800b31e <_strtod_l+0x17e>
 800b31a:	2a45      	cmp	r2, #69	; 0x45
 800b31c:	d118      	bne.n	800b350 <_strtod_l+0x1b0>
 800b31e:	b91d      	cbnz	r5, 800b328 <_strtod_l+0x188>
 800b320:	9a04      	ldr	r2, [sp, #16]
 800b322:	4302      	orrs	r2, r0
 800b324:	d09e      	beq.n	800b264 <_strtod_l+0xc4>
 800b326:	2500      	movs	r5, #0
 800b328:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b32c:	f108 0201 	add.w	r2, r8, #1
 800b330:	9217      	str	r2, [sp, #92]	; 0x5c
 800b332:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b336:	2a2b      	cmp	r2, #43	; 0x2b
 800b338:	d075      	beq.n	800b426 <_strtod_l+0x286>
 800b33a:	2a2d      	cmp	r2, #45	; 0x2d
 800b33c:	d07b      	beq.n	800b436 <_strtod_l+0x296>
 800b33e:	f04f 0c00 	mov.w	ip, #0
 800b342:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b346:	2909      	cmp	r1, #9
 800b348:	f240 8082 	bls.w	800b450 <_strtod_l+0x2b0>
 800b34c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b350:	2600      	movs	r6, #0
 800b352:	e09d      	b.n	800b490 <_strtod_l+0x2f0>
 800b354:	2300      	movs	r3, #0
 800b356:	e7c4      	b.n	800b2e2 <_strtod_l+0x142>
 800b358:	2f08      	cmp	r7, #8
 800b35a:	bfd8      	it	le
 800b35c:	9907      	ldrle	r1, [sp, #28]
 800b35e:	f100 0001 	add.w	r0, r0, #1
 800b362:	bfda      	itte	le
 800b364:	fb02 3301 	mlale	r3, r2, r1, r3
 800b368:	9307      	strle	r3, [sp, #28]
 800b36a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b36e:	3701      	adds	r7, #1
 800b370:	9017      	str	r0, [sp, #92]	; 0x5c
 800b372:	e7bf      	b.n	800b2f4 <_strtod_l+0x154>
 800b374:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b376:	195a      	adds	r2, r3, r5
 800b378:	9217      	str	r2, [sp, #92]	; 0x5c
 800b37a:	5d5a      	ldrb	r2, [r3, r5]
 800b37c:	2f00      	cmp	r7, #0
 800b37e:	d037      	beq.n	800b3f0 <_strtod_l+0x250>
 800b380:	9005      	str	r0, [sp, #20]
 800b382:	463d      	mov	r5, r7
 800b384:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b388:	2b09      	cmp	r3, #9
 800b38a:	d912      	bls.n	800b3b2 <_strtod_l+0x212>
 800b38c:	2301      	movs	r3, #1
 800b38e:	e7c2      	b.n	800b316 <_strtod_l+0x176>
 800b390:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b392:	1c5a      	adds	r2, r3, #1
 800b394:	9217      	str	r2, [sp, #92]	; 0x5c
 800b396:	785a      	ldrb	r2, [r3, #1]
 800b398:	3001      	adds	r0, #1
 800b39a:	2a30      	cmp	r2, #48	; 0x30
 800b39c:	d0f8      	beq.n	800b390 <_strtod_l+0x1f0>
 800b39e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b3a2:	2b08      	cmp	r3, #8
 800b3a4:	f200 84d9 	bhi.w	800bd5a <_strtod_l+0xbba>
 800b3a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b3aa:	9005      	str	r0, [sp, #20]
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	9308      	str	r3, [sp, #32]
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	3a30      	subs	r2, #48	; 0x30
 800b3b4:	f100 0301 	add.w	r3, r0, #1
 800b3b8:	d014      	beq.n	800b3e4 <_strtod_l+0x244>
 800b3ba:	9905      	ldr	r1, [sp, #20]
 800b3bc:	4419      	add	r1, r3
 800b3be:	9105      	str	r1, [sp, #20]
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	eb00 0e05 	add.w	lr, r0, r5
 800b3c6:	210a      	movs	r1, #10
 800b3c8:	4573      	cmp	r3, lr
 800b3ca:	d113      	bne.n	800b3f4 <_strtod_l+0x254>
 800b3cc:	182b      	adds	r3, r5, r0
 800b3ce:	2b08      	cmp	r3, #8
 800b3d0:	f105 0501 	add.w	r5, r5, #1
 800b3d4:	4405      	add	r5, r0
 800b3d6:	dc1c      	bgt.n	800b412 <_strtod_l+0x272>
 800b3d8:	9907      	ldr	r1, [sp, #28]
 800b3da:	230a      	movs	r3, #10
 800b3dc:	fb03 2301 	mla	r3, r3, r1, r2
 800b3e0:	9307      	str	r3, [sp, #28]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b3e6:	1c51      	adds	r1, r2, #1
 800b3e8:	9117      	str	r1, [sp, #92]	; 0x5c
 800b3ea:	7852      	ldrb	r2, [r2, #1]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	e7c9      	b.n	800b384 <_strtod_l+0x1e4>
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	e7d2      	b.n	800b39a <_strtod_l+0x1fa>
 800b3f4:	2b08      	cmp	r3, #8
 800b3f6:	dc04      	bgt.n	800b402 <_strtod_l+0x262>
 800b3f8:	9e07      	ldr	r6, [sp, #28]
 800b3fa:	434e      	muls	r6, r1
 800b3fc:	9607      	str	r6, [sp, #28]
 800b3fe:	3301      	adds	r3, #1
 800b400:	e7e2      	b.n	800b3c8 <_strtod_l+0x228>
 800b402:	f103 0c01 	add.w	ip, r3, #1
 800b406:	f1bc 0f10 	cmp.w	ip, #16
 800b40a:	bfd8      	it	le
 800b40c:	fb01 f909 	mulle.w	r9, r1, r9
 800b410:	e7f5      	b.n	800b3fe <_strtod_l+0x25e>
 800b412:	2d10      	cmp	r5, #16
 800b414:	bfdc      	itt	le
 800b416:	230a      	movle	r3, #10
 800b418:	fb03 2909 	mlale	r9, r3, r9, r2
 800b41c:	e7e1      	b.n	800b3e2 <_strtod_l+0x242>
 800b41e:	2300      	movs	r3, #0
 800b420:	9305      	str	r3, [sp, #20]
 800b422:	2301      	movs	r3, #1
 800b424:	e77c      	b.n	800b320 <_strtod_l+0x180>
 800b426:	f04f 0c00 	mov.w	ip, #0
 800b42a:	f108 0202 	add.w	r2, r8, #2
 800b42e:	9217      	str	r2, [sp, #92]	; 0x5c
 800b430:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b434:	e785      	b.n	800b342 <_strtod_l+0x1a2>
 800b436:	f04f 0c01 	mov.w	ip, #1
 800b43a:	e7f6      	b.n	800b42a <_strtod_l+0x28a>
 800b43c:	08011158 	.word	0x08011158
 800b440:	08010f10 	.word	0x08010f10
 800b444:	7ff00000 	.word	0x7ff00000
 800b448:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b44a:	1c51      	adds	r1, r2, #1
 800b44c:	9117      	str	r1, [sp, #92]	; 0x5c
 800b44e:	7852      	ldrb	r2, [r2, #1]
 800b450:	2a30      	cmp	r2, #48	; 0x30
 800b452:	d0f9      	beq.n	800b448 <_strtod_l+0x2a8>
 800b454:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b458:	2908      	cmp	r1, #8
 800b45a:	f63f af79 	bhi.w	800b350 <_strtod_l+0x1b0>
 800b45e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b462:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b464:	9206      	str	r2, [sp, #24]
 800b466:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b468:	1c51      	adds	r1, r2, #1
 800b46a:	9117      	str	r1, [sp, #92]	; 0x5c
 800b46c:	7852      	ldrb	r2, [r2, #1]
 800b46e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b472:	2e09      	cmp	r6, #9
 800b474:	d937      	bls.n	800b4e6 <_strtod_l+0x346>
 800b476:	9e06      	ldr	r6, [sp, #24]
 800b478:	1b89      	subs	r1, r1, r6
 800b47a:	2908      	cmp	r1, #8
 800b47c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b480:	dc02      	bgt.n	800b488 <_strtod_l+0x2e8>
 800b482:	4576      	cmp	r6, lr
 800b484:	bfa8      	it	ge
 800b486:	4676      	movge	r6, lr
 800b488:	f1bc 0f00 	cmp.w	ip, #0
 800b48c:	d000      	beq.n	800b490 <_strtod_l+0x2f0>
 800b48e:	4276      	negs	r6, r6
 800b490:	2d00      	cmp	r5, #0
 800b492:	d14d      	bne.n	800b530 <_strtod_l+0x390>
 800b494:	9904      	ldr	r1, [sp, #16]
 800b496:	4301      	orrs	r1, r0
 800b498:	f47f aec6 	bne.w	800b228 <_strtod_l+0x88>
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f47f aee1 	bne.w	800b264 <_strtod_l+0xc4>
 800b4a2:	2a69      	cmp	r2, #105	; 0x69
 800b4a4:	d027      	beq.n	800b4f6 <_strtod_l+0x356>
 800b4a6:	dc24      	bgt.n	800b4f2 <_strtod_l+0x352>
 800b4a8:	2a49      	cmp	r2, #73	; 0x49
 800b4aa:	d024      	beq.n	800b4f6 <_strtod_l+0x356>
 800b4ac:	2a4e      	cmp	r2, #78	; 0x4e
 800b4ae:	f47f aed9 	bne.w	800b264 <_strtod_l+0xc4>
 800b4b2:	499f      	ldr	r1, [pc, #636]	; (800b730 <_strtod_l+0x590>)
 800b4b4:	a817      	add	r0, sp, #92	; 0x5c
 800b4b6:	f001 ffa7 	bl	800d408 <__match>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f43f aed2 	beq.w	800b264 <_strtod_l+0xc4>
 800b4c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b28      	cmp	r3, #40	; 0x28
 800b4c6:	d12d      	bne.n	800b524 <_strtod_l+0x384>
 800b4c8:	499a      	ldr	r1, [pc, #616]	; (800b734 <_strtod_l+0x594>)
 800b4ca:	aa1a      	add	r2, sp, #104	; 0x68
 800b4cc:	a817      	add	r0, sp, #92	; 0x5c
 800b4ce:	f001 ffaf 	bl	800d430 <__hexnan>
 800b4d2:	2805      	cmp	r0, #5
 800b4d4:	d126      	bne.n	800b524 <_strtod_l+0x384>
 800b4d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b4d8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b4dc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b4e0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b4e4:	e6a0      	b.n	800b228 <_strtod_l+0x88>
 800b4e6:	210a      	movs	r1, #10
 800b4e8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b4ec:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b4f0:	e7b9      	b.n	800b466 <_strtod_l+0x2c6>
 800b4f2:	2a6e      	cmp	r2, #110	; 0x6e
 800b4f4:	e7db      	b.n	800b4ae <_strtod_l+0x30e>
 800b4f6:	4990      	ldr	r1, [pc, #576]	; (800b738 <_strtod_l+0x598>)
 800b4f8:	a817      	add	r0, sp, #92	; 0x5c
 800b4fa:	f001 ff85 	bl	800d408 <__match>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f aeb0 	beq.w	800b264 <_strtod_l+0xc4>
 800b504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b506:	498d      	ldr	r1, [pc, #564]	; (800b73c <_strtod_l+0x59c>)
 800b508:	3b01      	subs	r3, #1
 800b50a:	a817      	add	r0, sp, #92	; 0x5c
 800b50c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b50e:	f001 ff7b 	bl	800d408 <__match>
 800b512:	b910      	cbnz	r0, 800b51a <_strtod_l+0x37a>
 800b514:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b516:	3301      	adds	r3, #1
 800b518:	9317      	str	r3, [sp, #92]	; 0x5c
 800b51a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b74c <_strtod_l+0x5ac>
 800b51e:	f04f 0a00 	mov.w	sl, #0
 800b522:	e681      	b.n	800b228 <_strtod_l+0x88>
 800b524:	4886      	ldr	r0, [pc, #536]	; (800b740 <_strtod_l+0x5a0>)
 800b526:	f003 fa13 	bl	800e950 <nan>
 800b52a:	ec5b ab10 	vmov	sl, fp, d0
 800b52e:	e67b      	b.n	800b228 <_strtod_l+0x88>
 800b530:	9b05      	ldr	r3, [sp, #20]
 800b532:	9807      	ldr	r0, [sp, #28]
 800b534:	1af3      	subs	r3, r6, r3
 800b536:	2f00      	cmp	r7, #0
 800b538:	bf08      	it	eq
 800b53a:	462f      	moveq	r7, r5
 800b53c:	2d10      	cmp	r5, #16
 800b53e:	9306      	str	r3, [sp, #24]
 800b540:	46a8      	mov	r8, r5
 800b542:	bfa8      	it	ge
 800b544:	f04f 0810 	movge.w	r8, #16
 800b548:	f7f4 ffec 	bl	8000524 <__aeabi_ui2d>
 800b54c:	2d09      	cmp	r5, #9
 800b54e:	4682      	mov	sl, r0
 800b550:	468b      	mov	fp, r1
 800b552:	dd13      	ble.n	800b57c <_strtod_l+0x3dc>
 800b554:	4b7b      	ldr	r3, [pc, #492]	; (800b744 <_strtod_l+0x5a4>)
 800b556:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b55a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b55e:	f7f5 f85b 	bl	8000618 <__aeabi_dmul>
 800b562:	4682      	mov	sl, r0
 800b564:	4648      	mov	r0, r9
 800b566:	468b      	mov	fp, r1
 800b568:	f7f4 ffdc 	bl	8000524 <__aeabi_ui2d>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4650      	mov	r0, sl
 800b572:	4659      	mov	r1, fp
 800b574:	f7f4 fe9a 	bl	80002ac <__adddf3>
 800b578:	4682      	mov	sl, r0
 800b57a:	468b      	mov	fp, r1
 800b57c:	2d0f      	cmp	r5, #15
 800b57e:	dc38      	bgt.n	800b5f2 <_strtod_l+0x452>
 800b580:	9b06      	ldr	r3, [sp, #24]
 800b582:	2b00      	cmp	r3, #0
 800b584:	f43f ae50 	beq.w	800b228 <_strtod_l+0x88>
 800b588:	dd24      	ble.n	800b5d4 <_strtod_l+0x434>
 800b58a:	2b16      	cmp	r3, #22
 800b58c:	dc0b      	bgt.n	800b5a6 <_strtod_l+0x406>
 800b58e:	496d      	ldr	r1, [pc, #436]	; (800b744 <_strtod_l+0x5a4>)
 800b590:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b594:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b598:	4652      	mov	r2, sl
 800b59a:	465b      	mov	r3, fp
 800b59c:	f7f5 f83c 	bl	8000618 <__aeabi_dmul>
 800b5a0:	4682      	mov	sl, r0
 800b5a2:	468b      	mov	fp, r1
 800b5a4:	e640      	b.n	800b228 <_strtod_l+0x88>
 800b5a6:	9a06      	ldr	r2, [sp, #24]
 800b5a8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	db20      	blt.n	800b5f2 <_strtod_l+0x452>
 800b5b0:	4c64      	ldr	r4, [pc, #400]	; (800b744 <_strtod_l+0x5a4>)
 800b5b2:	f1c5 050f 	rsb	r5, r5, #15
 800b5b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b5ba:	4652      	mov	r2, sl
 800b5bc:	465b      	mov	r3, fp
 800b5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5c2:	f7f5 f829 	bl	8000618 <__aeabi_dmul>
 800b5c6:	9b06      	ldr	r3, [sp, #24]
 800b5c8:	1b5d      	subs	r5, r3, r5
 800b5ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b5ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b5d2:	e7e3      	b.n	800b59c <_strtod_l+0x3fc>
 800b5d4:	9b06      	ldr	r3, [sp, #24]
 800b5d6:	3316      	adds	r3, #22
 800b5d8:	db0b      	blt.n	800b5f2 <_strtod_l+0x452>
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	1b9e      	subs	r6, r3, r6
 800b5de:	4b59      	ldr	r3, [pc, #356]	; (800b744 <_strtod_l+0x5a4>)
 800b5e0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b5e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b5e8:	4650      	mov	r0, sl
 800b5ea:	4659      	mov	r1, fp
 800b5ec:	f7f5 f93e 	bl	800086c <__aeabi_ddiv>
 800b5f0:	e7d6      	b.n	800b5a0 <_strtod_l+0x400>
 800b5f2:	9b06      	ldr	r3, [sp, #24]
 800b5f4:	eba5 0808 	sub.w	r8, r5, r8
 800b5f8:	4498      	add	r8, r3
 800b5fa:	f1b8 0f00 	cmp.w	r8, #0
 800b5fe:	dd74      	ble.n	800b6ea <_strtod_l+0x54a>
 800b600:	f018 030f 	ands.w	r3, r8, #15
 800b604:	d00a      	beq.n	800b61c <_strtod_l+0x47c>
 800b606:	494f      	ldr	r1, [pc, #316]	; (800b744 <_strtod_l+0x5a4>)
 800b608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b60c:	4652      	mov	r2, sl
 800b60e:	465b      	mov	r3, fp
 800b610:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b614:	f7f5 f800 	bl	8000618 <__aeabi_dmul>
 800b618:	4682      	mov	sl, r0
 800b61a:	468b      	mov	fp, r1
 800b61c:	f038 080f 	bics.w	r8, r8, #15
 800b620:	d04f      	beq.n	800b6c2 <_strtod_l+0x522>
 800b622:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b626:	dd22      	ble.n	800b66e <_strtod_l+0x4ce>
 800b628:	2500      	movs	r5, #0
 800b62a:	462e      	mov	r6, r5
 800b62c:	9507      	str	r5, [sp, #28]
 800b62e:	9505      	str	r5, [sp, #20]
 800b630:	2322      	movs	r3, #34	; 0x22
 800b632:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b74c <_strtod_l+0x5ac>
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	f04f 0a00 	mov.w	sl, #0
 800b63c:	9b07      	ldr	r3, [sp, #28]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f43f adf2 	beq.w	800b228 <_strtod_l+0x88>
 800b644:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b646:	4620      	mov	r0, r4
 800b648:	f002 f80a 	bl	800d660 <_Bfree>
 800b64c:	9905      	ldr	r1, [sp, #20]
 800b64e:	4620      	mov	r0, r4
 800b650:	f002 f806 	bl	800d660 <_Bfree>
 800b654:	4631      	mov	r1, r6
 800b656:	4620      	mov	r0, r4
 800b658:	f002 f802 	bl	800d660 <_Bfree>
 800b65c:	9907      	ldr	r1, [sp, #28]
 800b65e:	4620      	mov	r0, r4
 800b660:	f001 fffe 	bl	800d660 <_Bfree>
 800b664:	4629      	mov	r1, r5
 800b666:	4620      	mov	r0, r4
 800b668:	f001 fffa 	bl	800d660 <_Bfree>
 800b66c:	e5dc      	b.n	800b228 <_strtod_l+0x88>
 800b66e:	4b36      	ldr	r3, [pc, #216]	; (800b748 <_strtod_l+0x5a8>)
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	2300      	movs	r3, #0
 800b674:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b678:	4650      	mov	r0, sl
 800b67a:	4659      	mov	r1, fp
 800b67c:	4699      	mov	r9, r3
 800b67e:	f1b8 0f01 	cmp.w	r8, #1
 800b682:	dc21      	bgt.n	800b6c8 <_strtod_l+0x528>
 800b684:	b10b      	cbz	r3, 800b68a <_strtod_l+0x4ea>
 800b686:	4682      	mov	sl, r0
 800b688:	468b      	mov	fp, r1
 800b68a:	4b2f      	ldr	r3, [pc, #188]	; (800b748 <_strtod_l+0x5a8>)
 800b68c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b690:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b694:	4652      	mov	r2, sl
 800b696:	465b      	mov	r3, fp
 800b698:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b69c:	f7f4 ffbc 	bl	8000618 <__aeabi_dmul>
 800b6a0:	4b2a      	ldr	r3, [pc, #168]	; (800b74c <_strtod_l+0x5ac>)
 800b6a2:	460a      	mov	r2, r1
 800b6a4:	400b      	ands	r3, r1
 800b6a6:	492a      	ldr	r1, [pc, #168]	; (800b750 <_strtod_l+0x5b0>)
 800b6a8:	428b      	cmp	r3, r1
 800b6aa:	4682      	mov	sl, r0
 800b6ac:	d8bc      	bhi.n	800b628 <_strtod_l+0x488>
 800b6ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b6b2:	428b      	cmp	r3, r1
 800b6b4:	bf86      	itte	hi
 800b6b6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b754 <_strtod_l+0x5b4>
 800b6ba:	f04f 3aff 	movhi.w	sl, #4294967295
 800b6be:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	e084      	b.n	800b7d2 <_strtod_l+0x632>
 800b6c8:	f018 0f01 	tst.w	r8, #1
 800b6cc:	d005      	beq.n	800b6da <_strtod_l+0x53a>
 800b6ce:	9b04      	ldr	r3, [sp, #16]
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f7f4 ffa0 	bl	8000618 <__aeabi_dmul>
 800b6d8:	2301      	movs	r3, #1
 800b6da:	9a04      	ldr	r2, [sp, #16]
 800b6dc:	3208      	adds	r2, #8
 800b6de:	f109 0901 	add.w	r9, r9, #1
 800b6e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b6e6:	9204      	str	r2, [sp, #16]
 800b6e8:	e7c9      	b.n	800b67e <_strtod_l+0x4de>
 800b6ea:	d0ea      	beq.n	800b6c2 <_strtod_l+0x522>
 800b6ec:	f1c8 0800 	rsb	r8, r8, #0
 800b6f0:	f018 020f 	ands.w	r2, r8, #15
 800b6f4:	d00a      	beq.n	800b70c <_strtod_l+0x56c>
 800b6f6:	4b13      	ldr	r3, [pc, #76]	; (800b744 <_strtod_l+0x5a4>)
 800b6f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6fc:	4650      	mov	r0, sl
 800b6fe:	4659      	mov	r1, fp
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	f7f5 f8b2 	bl	800086c <__aeabi_ddiv>
 800b708:	4682      	mov	sl, r0
 800b70a:	468b      	mov	fp, r1
 800b70c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b710:	d0d7      	beq.n	800b6c2 <_strtod_l+0x522>
 800b712:	f1b8 0f1f 	cmp.w	r8, #31
 800b716:	dd1f      	ble.n	800b758 <_strtod_l+0x5b8>
 800b718:	2500      	movs	r5, #0
 800b71a:	462e      	mov	r6, r5
 800b71c:	9507      	str	r5, [sp, #28]
 800b71e:	9505      	str	r5, [sp, #20]
 800b720:	2322      	movs	r3, #34	; 0x22
 800b722:	f04f 0a00 	mov.w	sl, #0
 800b726:	f04f 0b00 	mov.w	fp, #0
 800b72a:	6023      	str	r3, [r4, #0]
 800b72c:	e786      	b.n	800b63c <_strtod_l+0x49c>
 800b72e:	bf00      	nop
 800b730:	08010ee5 	.word	0x08010ee5
 800b734:	08010f24 	.word	0x08010f24
 800b738:	08010edd 	.word	0x08010edd
 800b73c:	08011064 	.word	0x08011064
 800b740:	0801132b 	.word	0x0801132b
 800b744:	080111f0 	.word	0x080111f0
 800b748:	080111c8 	.word	0x080111c8
 800b74c:	7ff00000 	.word	0x7ff00000
 800b750:	7ca00000 	.word	0x7ca00000
 800b754:	7fefffff 	.word	0x7fefffff
 800b758:	f018 0310 	ands.w	r3, r8, #16
 800b75c:	bf18      	it	ne
 800b75e:	236a      	movne	r3, #106	; 0x6a
 800b760:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800bb10 <_strtod_l+0x970>
 800b764:	9304      	str	r3, [sp, #16]
 800b766:	4650      	mov	r0, sl
 800b768:	4659      	mov	r1, fp
 800b76a:	2300      	movs	r3, #0
 800b76c:	f018 0f01 	tst.w	r8, #1
 800b770:	d004      	beq.n	800b77c <_strtod_l+0x5dc>
 800b772:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b776:	f7f4 ff4f 	bl	8000618 <__aeabi_dmul>
 800b77a:	2301      	movs	r3, #1
 800b77c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b780:	f109 0908 	add.w	r9, r9, #8
 800b784:	d1f2      	bne.n	800b76c <_strtod_l+0x5cc>
 800b786:	b10b      	cbz	r3, 800b78c <_strtod_l+0x5ec>
 800b788:	4682      	mov	sl, r0
 800b78a:	468b      	mov	fp, r1
 800b78c:	9b04      	ldr	r3, [sp, #16]
 800b78e:	b1c3      	cbz	r3, 800b7c2 <_strtod_l+0x622>
 800b790:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b794:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b798:	2b00      	cmp	r3, #0
 800b79a:	4659      	mov	r1, fp
 800b79c:	dd11      	ble.n	800b7c2 <_strtod_l+0x622>
 800b79e:	2b1f      	cmp	r3, #31
 800b7a0:	f340 8124 	ble.w	800b9ec <_strtod_l+0x84c>
 800b7a4:	2b34      	cmp	r3, #52	; 0x34
 800b7a6:	bfde      	ittt	le
 800b7a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b7ac:	f04f 33ff 	movle.w	r3, #4294967295
 800b7b0:	fa03 f202 	lslle.w	r2, r3, r2
 800b7b4:	f04f 0a00 	mov.w	sl, #0
 800b7b8:	bfcc      	ite	gt
 800b7ba:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b7be:	ea02 0b01 	andle.w	fp, r2, r1
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	4659      	mov	r1, fp
 800b7ca:	f7f5 f98d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d1a2      	bne.n	800b718 <_strtod_l+0x578>
 800b7d2:	9b07      	ldr	r3, [sp, #28]
 800b7d4:	9300      	str	r3, [sp, #0]
 800b7d6:	9908      	ldr	r1, [sp, #32]
 800b7d8:	462b      	mov	r3, r5
 800b7da:	463a      	mov	r2, r7
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f001 ffa7 	bl	800d730 <__s2b>
 800b7e2:	9007      	str	r0, [sp, #28]
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	f43f af1f 	beq.w	800b628 <_strtod_l+0x488>
 800b7ea:	9b05      	ldr	r3, [sp, #20]
 800b7ec:	1b9e      	subs	r6, r3, r6
 800b7ee:	9b06      	ldr	r3, [sp, #24]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	bfb4      	ite	lt
 800b7f4:	4633      	movlt	r3, r6
 800b7f6:	2300      	movge	r3, #0
 800b7f8:	930c      	str	r3, [sp, #48]	; 0x30
 800b7fa:	9b06      	ldr	r3, [sp, #24]
 800b7fc:	2500      	movs	r5, #0
 800b7fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b802:	9312      	str	r3, [sp, #72]	; 0x48
 800b804:	462e      	mov	r6, r5
 800b806:	9b07      	ldr	r3, [sp, #28]
 800b808:	4620      	mov	r0, r4
 800b80a:	6859      	ldr	r1, [r3, #4]
 800b80c:	f001 fee8 	bl	800d5e0 <_Balloc>
 800b810:	9005      	str	r0, [sp, #20]
 800b812:	2800      	cmp	r0, #0
 800b814:	f43f af0c 	beq.w	800b630 <_strtod_l+0x490>
 800b818:	9b07      	ldr	r3, [sp, #28]
 800b81a:	691a      	ldr	r2, [r3, #16]
 800b81c:	3202      	adds	r2, #2
 800b81e:	f103 010c 	add.w	r1, r3, #12
 800b822:	0092      	lsls	r2, r2, #2
 800b824:	300c      	adds	r0, #12
 800b826:	f7fe fc2c 	bl	800a082 <memcpy>
 800b82a:	ec4b ab10 	vmov	d0, sl, fp
 800b82e:	aa1a      	add	r2, sp, #104	; 0x68
 800b830:	a919      	add	r1, sp, #100	; 0x64
 800b832:	4620      	mov	r0, r4
 800b834:	f002 fac2 	bl	800ddbc <__d2b>
 800b838:	ec4b ab18 	vmov	d8, sl, fp
 800b83c:	9018      	str	r0, [sp, #96]	; 0x60
 800b83e:	2800      	cmp	r0, #0
 800b840:	f43f aef6 	beq.w	800b630 <_strtod_l+0x490>
 800b844:	2101      	movs	r1, #1
 800b846:	4620      	mov	r0, r4
 800b848:	f002 f80c 	bl	800d864 <__i2b>
 800b84c:	4606      	mov	r6, r0
 800b84e:	2800      	cmp	r0, #0
 800b850:	f43f aeee 	beq.w	800b630 <_strtod_l+0x490>
 800b854:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b856:	9904      	ldr	r1, [sp, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	bfab      	itete	ge
 800b85c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b85e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b860:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b862:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b866:	bfac      	ite	ge
 800b868:	eb03 0902 	addge.w	r9, r3, r2
 800b86c:	1ad7      	sublt	r7, r2, r3
 800b86e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b870:	eba3 0801 	sub.w	r8, r3, r1
 800b874:	4490      	add	r8, r2
 800b876:	4ba1      	ldr	r3, [pc, #644]	; (800bafc <_strtod_l+0x95c>)
 800b878:	f108 38ff 	add.w	r8, r8, #4294967295
 800b87c:	4598      	cmp	r8, r3
 800b87e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b882:	f280 80c7 	bge.w	800ba14 <_strtod_l+0x874>
 800b886:	eba3 0308 	sub.w	r3, r3, r8
 800b88a:	2b1f      	cmp	r3, #31
 800b88c:	eba2 0203 	sub.w	r2, r2, r3
 800b890:	f04f 0101 	mov.w	r1, #1
 800b894:	f300 80b1 	bgt.w	800b9fa <_strtod_l+0x85a>
 800b898:	fa01 f303 	lsl.w	r3, r1, r3
 800b89c:	930d      	str	r3, [sp, #52]	; 0x34
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9308      	str	r3, [sp, #32]
 800b8a2:	eb09 0802 	add.w	r8, r9, r2
 800b8a6:	9b04      	ldr	r3, [sp, #16]
 800b8a8:	45c1      	cmp	r9, r8
 800b8aa:	4417      	add	r7, r2
 800b8ac:	441f      	add	r7, r3
 800b8ae:	464b      	mov	r3, r9
 800b8b0:	bfa8      	it	ge
 800b8b2:	4643      	movge	r3, r8
 800b8b4:	42bb      	cmp	r3, r7
 800b8b6:	bfa8      	it	ge
 800b8b8:	463b      	movge	r3, r7
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	bfc2      	ittt	gt
 800b8be:	eba8 0803 	subgt.w	r8, r8, r3
 800b8c2:	1aff      	subgt	r7, r7, r3
 800b8c4:	eba9 0903 	subgt.w	r9, r9, r3
 800b8c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	dd17      	ble.n	800b8fe <_strtod_l+0x75e>
 800b8ce:	4631      	mov	r1, r6
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f002 f886 	bl	800d9e4 <__pow5mult>
 800b8d8:	4606      	mov	r6, r0
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	f43f aea8 	beq.w	800b630 <_strtod_l+0x490>
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f001 ffd3 	bl	800d890 <__multiply>
 800b8ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	f43f ae9f 	beq.w	800b630 <_strtod_l+0x490>
 800b8f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f001 feb3 	bl	800d660 <_Bfree>
 800b8fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8fc:	9318      	str	r3, [sp, #96]	; 0x60
 800b8fe:	f1b8 0f00 	cmp.w	r8, #0
 800b902:	f300 808c 	bgt.w	800ba1e <_strtod_l+0x87e>
 800b906:	9b06      	ldr	r3, [sp, #24]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dd08      	ble.n	800b91e <_strtod_l+0x77e>
 800b90c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b90e:	9905      	ldr	r1, [sp, #20]
 800b910:	4620      	mov	r0, r4
 800b912:	f002 f867 	bl	800d9e4 <__pow5mult>
 800b916:	9005      	str	r0, [sp, #20]
 800b918:	2800      	cmp	r0, #0
 800b91a:	f43f ae89 	beq.w	800b630 <_strtod_l+0x490>
 800b91e:	2f00      	cmp	r7, #0
 800b920:	dd08      	ble.n	800b934 <_strtod_l+0x794>
 800b922:	9905      	ldr	r1, [sp, #20]
 800b924:	463a      	mov	r2, r7
 800b926:	4620      	mov	r0, r4
 800b928:	f002 f8b6 	bl	800da98 <__lshift>
 800b92c:	9005      	str	r0, [sp, #20]
 800b92e:	2800      	cmp	r0, #0
 800b930:	f43f ae7e 	beq.w	800b630 <_strtod_l+0x490>
 800b934:	f1b9 0f00 	cmp.w	r9, #0
 800b938:	dd08      	ble.n	800b94c <_strtod_l+0x7ac>
 800b93a:	4631      	mov	r1, r6
 800b93c:	464a      	mov	r2, r9
 800b93e:	4620      	mov	r0, r4
 800b940:	f002 f8aa 	bl	800da98 <__lshift>
 800b944:	4606      	mov	r6, r0
 800b946:	2800      	cmp	r0, #0
 800b948:	f43f ae72 	beq.w	800b630 <_strtod_l+0x490>
 800b94c:	9a05      	ldr	r2, [sp, #20]
 800b94e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b950:	4620      	mov	r0, r4
 800b952:	f002 f92d 	bl	800dbb0 <__mdiff>
 800b956:	4605      	mov	r5, r0
 800b958:	2800      	cmp	r0, #0
 800b95a:	f43f ae69 	beq.w	800b630 <_strtod_l+0x490>
 800b95e:	68c3      	ldr	r3, [r0, #12]
 800b960:	930b      	str	r3, [sp, #44]	; 0x2c
 800b962:	2300      	movs	r3, #0
 800b964:	60c3      	str	r3, [r0, #12]
 800b966:	4631      	mov	r1, r6
 800b968:	f002 f906 	bl	800db78 <__mcmp>
 800b96c:	2800      	cmp	r0, #0
 800b96e:	da60      	bge.n	800ba32 <_strtod_l+0x892>
 800b970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b972:	ea53 030a 	orrs.w	r3, r3, sl
 800b976:	f040 8082 	bne.w	800ba7e <_strtod_l+0x8de>
 800b97a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d17d      	bne.n	800ba7e <_strtod_l+0x8de>
 800b982:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b986:	0d1b      	lsrs	r3, r3, #20
 800b988:	051b      	lsls	r3, r3, #20
 800b98a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b98e:	d976      	bls.n	800ba7e <_strtod_l+0x8de>
 800b990:	696b      	ldr	r3, [r5, #20]
 800b992:	b913      	cbnz	r3, 800b99a <_strtod_l+0x7fa>
 800b994:	692b      	ldr	r3, [r5, #16]
 800b996:	2b01      	cmp	r3, #1
 800b998:	dd71      	ble.n	800ba7e <_strtod_l+0x8de>
 800b99a:	4629      	mov	r1, r5
 800b99c:	2201      	movs	r2, #1
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f002 f87a 	bl	800da98 <__lshift>
 800b9a4:	4631      	mov	r1, r6
 800b9a6:	4605      	mov	r5, r0
 800b9a8:	f002 f8e6 	bl	800db78 <__mcmp>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	dd66      	ble.n	800ba7e <_strtod_l+0x8de>
 800b9b0:	9904      	ldr	r1, [sp, #16]
 800b9b2:	4a53      	ldr	r2, [pc, #332]	; (800bb00 <_strtod_l+0x960>)
 800b9b4:	465b      	mov	r3, fp
 800b9b6:	2900      	cmp	r1, #0
 800b9b8:	f000 8081 	beq.w	800babe <_strtod_l+0x91e>
 800b9bc:	ea02 010b 	and.w	r1, r2, fp
 800b9c0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b9c4:	dc7b      	bgt.n	800babe <_strtod_l+0x91e>
 800b9c6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b9ca:	f77f aea9 	ble.w	800b720 <_strtod_l+0x580>
 800b9ce:	4b4d      	ldr	r3, [pc, #308]	; (800bb04 <_strtod_l+0x964>)
 800b9d0:	4650      	mov	r0, sl
 800b9d2:	4659      	mov	r1, fp
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f7f4 fe1f 	bl	8000618 <__aeabi_dmul>
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4303      	orrs	r3, r0
 800b9de:	bf08      	it	eq
 800b9e0:	2322      	moveq	r3, #34	; 0x22
 800b9e2:	4682      	mov	sl, r0
 800b9e4:	468b      	mov	fp, r1
 800b9e6:	bf08      	it	eq
 800b9e8:	6023      	streq	r3, [r4, #0]
 800b9ea:	e62b      	b.n	800b644 <_strtod_l+0x4a4>
 800b9ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f4:	ea03 0a0a 	and.w	sl, r3, sl
 800b9f8:	e6e3      	b.n	800b7c2 <_strtod_l+0x622>
 800b9fa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b9fe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ba02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ba06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ba0a:	fa01 f308 	lsl.w	r3, r1, r8
 800ba0e:	9308      	str	r3, [sp, #32]
 800ba10:	910d      	str	r1, [sp, #52]	; 0x34
 800ba12:	e746      	b.n	800b8a2 <_strtod_l+0x702>
 800ba14:	2300      	movs	r3, #0
 800ba16:	9308      	str	r3, [sp, #32]
 800ba18:	2301      	movs	r3, #1
 800ba1a:	930d      	str	r3, [sp, #52]	; 0x34
 800ba1c:	e741      	b.n	800b8a2 <_strtod_l+0x702>
 800ba1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba20:	4642      	mov	r2, r8
 800ba22:	4620      	mov	r0, r4
 800ba24:	f002 f838 	bl	800da98 <__lshift>
 800ba28:	9018      	str	r0, [sp, #96]	; 0x60
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f47f af6b 	bne.w	800b906 <_strtod_l+0x766>
 800ba30:	e5fe      	b.n	800b630 <_strtod_l+0x490>
 800ba32:	465f      	mov	r7, fp
 800ba34:	d16e      	bne.n	800bb14 <_strtod_l+0x974>
 800ba36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba3c:	b342      	cbz	r2, 800ba90 <_strtod_l+0x8f0>
 800ba3e:	4a32      	ldr	r2, [pc, #200]	; (800bb08 <_strtod_l+0x968>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d128      	bne.n	800ba96 <_strtod_l+0x8f6>
 800ba44:	9b04      	ldr	r3, [sp, #16]
 800ba46:	4651      	mov	r1, sl
 800ba48:	b1eb      	cbz	r3, 800ba86 <_strtod_l+0x8e6>
 800ba4a:	4b2d      	ldr	r3, [pc, #180]	; (800bb00 <_strtod_l+0x960>)
 800ba4c:	403b      	ands	r3, r7
 800ba4e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba52:	f04f 32ff 	mov.w	r2, #4294967295
 800ba56:	d819      	bhi.n	800ba8c <_strtod_l+0x8ec>
 800ba58:	0d1b      	lsrs	r3, r3, #20
 800ba5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba62:	4299      	cmp	r1, r3
 800ba64:	d117      	bne.n	800ba96 <_strtod_l+0x8f6>
 800ba66:	4b29      	ldr	r3, [pc, #164]	; (800bb0c <_strtod_l+0x96c>)
 800ba68:	429f      	cmp	r7, r3
 800ba6a:	d102      	bne.n	800ba72 <_strtod_l+0x8d2>
 800ba6c:	3101      	adds	r1, #1
 800ba6e:	f43f addf 	beq.w	800b630 <_strtod_l+0x490>
 800ba72:	4b23      	ldr	r3, [pc, #140]	; (800bb00 <_strtod_l+0x960>)
 800ba74:	403b      	ands	r3, r7
 800ba76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ba7a:	f04f 0a00 	mov.w	sl, #0
 800ba7e:	9b04      	ldr	r3, [sp, #16]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1a4      	bne.n	800b9ce <_strtod_l+0x82e>
 800ba84:	e5de      	b.n	800b644 <_strtod_l+0x4a4>
 800ba86:	f04f 33ff 	mov.w	r3, #4294967295
 800ba8a:	e7ea      	b.n	800ba62 <_strtod_l+0x8c2>
 800ba8c:	4613      	mov	r3, r2
 800ba8e:	e7e8      	b.n	800ba62 <_strtod_l+0x8c2>
 800ba90:	ea53 030a 	orrs.w	r3, r3, sl
 800ba94:	d08c      	beq.n	800b9b0 <_strtod_l+0x810>
 800ba96:	9b08      	ldr	r3, [sp, #32]
 800ba98:	b1db      	cbz	r3, 800bad2 <_strtod_l+0x932>
 800ba9a:	423b      	tst	r3, r7
 800ba9c:	d0ef      	beq.n	800ba7e <_strtod_l+0x8de>
 800ba9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa0:	9a04      	ldr	r2, [sp, #16]
 800baa2:	4650      	mov	r0, sl
 800baa4:	4659      	mov	r1, fp
 800baa6:	b1c3      	cbz	r3, 800bada <_strtod_l+0x93a>
 800baa8:	f7ff fb5e 	bl	800b168 <sulp>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	ec51 0b18 	vmov	r0, r1, d8
 800bab4:	f7f4 fbfa 	bl	80002ac <__adddf3>
 800bab8:	4682      	mov	sl, r0
 800baba:	468b      	mov	fp, r1
 800babc:	e7df      	b.n	800ba7e <_strtod_l+0x8de>
 800babe:	4013      	ands	r3, r2
 800bac0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bac4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bac8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bacc:	f04f 3aff 	mov.w	sl, #4294967295
 800bad0:	e7d5      	b.n	800ba7e <_strtod_l+0x8de>
 800bad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bad4:	ea13 0f0a 	tst.w	r3, sl
 800bad8:	e7e0      	b.n	800ba9c <_strtod_l+0x8fc>
 800bada:	f7ff fb45 	bl	800b168 <sulp>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	ec51 0b18 	vmov	r0, r1, d8
 800bae6:	f7f4 fbdf 	bl	80002a8 <__aeabi_dsub>
 800baea:	2200      	movs	r2, #0
 800baec:	2300      	movs	r3, #0
 800baee:	4682      	mov	sl, r0
 800baf0:	468b      	mov	fp, r1
 800baf2:	f7f4 fff9 	bl	8000ae8 <__aeabi_dcmpeq>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d0c1      	beq.n	800ba7e <_strtod_l+0x8de>
 800bafa:	e611      	b.n	800b720 <_strtod_l+0x580>
 800bafc:	fffffc02 	.word	0xfffffc02
 800bb00:	7ff00000 	.word	0x7ff00000
 800bb04:	39500000 	.word	0x39500000
 800bb08:	000fffff 	.word	0x000fffff
 800bb0c:	7fefffff 	.word	0x7fefffff
 800bb10:	08010f38 	.word	0x08010f38
 800bb14:	4631      	mov	r1, r6
 800bb16:	4628      	mov	r0, r5
 800bb18:	f002 f9ac 	bl	800de74 <__ratio>
 800bb1c:	ec59 8b10 	vmov	r8, r9, d0
 800bb20:	ee10 0a10 	vmov	r0, s0
 800bb24:	2200      	movs	r2, #0
 800bb26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	f7f4 fff0 	bl	8000b10 <__aeabi_dcmple>
 800bb30:	2800      	cmp	r0, #0
 800bb32:	d07a      	beq.n	800bc2a <_strtod_l+0xa8a>
 800bb34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d04a      	beq.n	800bbd0 <_strtod_l+0xa30>
 800bb3a:	4b95      	ldr	r3, [pc, #596]	; (800bd90 <_strtod_l+0xbf0>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb42:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bd90 <_strtod_l+0xbf0>
 800bb46:	f04f 0800 	mov.w	r8, #0
 800bb4a:	4b92      	ldr	r3, [pc, #584]	; (800bd94 <_strtod_l+0xbf4>)
 800bb4c:	403b      	ands	r3, r7
 800bb4e:	930d      	str	r3, [sp, #52]	; 0x34
 800bb50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb52:	4b91      	ldr	r3, [pc, #580]	; (800bd98 <_strtod_l+0xbf8>)
 800bb54:	429a      	cmp	r2, r3
 800bb56:	f040 80b0 	bne.w	800bcba <_strtod_l+0xb1a>
 800bb5a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb5e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bb62:	ec4b ab10 	vmov	d0, sl, fp
 800bb66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb6a:	f002 f8ab 	bl	800dcc4 <__ulp>
 800bb6e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb72:	ec53 2b10 	vmov	r2, r3, d0
 800bb76:	f7f4 fd4f 	bl	8000618 <__aeabi_dmul>
 800bb7a:	4652      	mov	r2, sl
 800bb7c:	465b      	mov	r3, fp
 800bb7e:	f7f4 fb95 	bl	80002ac <__adddf3>
 800bb82:	460b      	mov	r3, r1
 800bb84:	4983      	ldr	r1, [pc, #524]	; (800bd94 <_strtod_l+0xbf4>)
 800bb86:	4a85      	ldr	r2, [pc, #532]	; (800bd9c <_strtod_l+0xbfc>)
 800bb88:	4019      	ands	r1, r3
 800bb8a:	4291      	cmp	r1, r2
 800bb8c:	4682      	mov	sl, r0
 800bb8e:	d960      	bls.n	800bc52 <_strtod_l+0xab2>
 800bb90:	ee18 3a90 	vmov	r3, s17
 800bb94:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d104      	bne.n	800bba6 <_strtod_l+0xa06>
 800bb9c:	ee18 3a10 	vmov	r3, s16
 800bba0:	3301      	adds	r3, #1
 800bba2:	f43f ad45 	beq.w	800b630 <_strtod_l+0x490>
 800bba6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bda8 <_strtod_l+0xc08>
 800bbaa:	f04f 3aff 	mov.w	sl, #4294967295
 800bbae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f001 fd55 	bl	800d660 <_Bfree>
 800bbb6:	9905      	ldr	r1, [sp, #20]
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f001 fd51 	bl	800d660 <_Bfree>
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f001 fd4d 	bl	800d660 <_Bfree>
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f001 fd49 	bl	800d660 <_Bfree>
 800bbce:	e61a      	b.n	800b806 <_strtod_l+0x666>
 800bbd0:	f1ba 0f00 	cmp.w	sl, #0
 800bbd4:	d11b      	bne.n	800bc0e <_strtod_l+0xa6e>
 800bbd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbda:	b9f3      	cbnz	r3, 800bc1a <_strtod_l+0xa7a>
 800bbdc:	4b6c      	ldr	r3, [pc, #432]	; (800bd90 <_strtod_l+0xbf0>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	4640      	mov	r0, r8
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	f7f4 ff8a 	bl	8000afc <__aeabi_dcmplt>
 800bbe8:	b9d0      	cbnz	r0, 800bc20 <_strtod_l+0xa80>
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	4b6c      	ldr	r3, [pc, #432]	; (800bda0 <_strtod_l+0xc00>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f7f4 fd11 	bl	8000618 <__aeabi_dmul>
 800bbf6:	4680      	mov	r8, r0
 800bbf8:	4689      	mov	r9, r1
 800bbfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bbfe:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800bc02:	9315      	str	r3, [sp, #84]	; 0x54
 800bc04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bc08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bc0c:	e79d      	b.n	800bb4a <_strtod_l+0x9aa>
 800bc0e:	f1ba 0f01 	cmp.w	sl, #1
 800bc12:	d102      	bne.n	800bc1a <_strtod_l+0xa7a>
 800bc14:	2f00      	cmp	r7, #0
 800bc16:	f43f ad83 	beq.w	800b720 <_strtod_l+0x580>
 800bc1a:	4b62      	ldr	r3, [pc, #392]	; (800bda4 <_strtod_l+0xc04>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	e78e      	b.n	800bb3e <_strtod_l+0x99e>
 800bc20:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bda0 <_strtod_l+0xc00>
 800bc24:	f04f 0800 	mov.w	r8, #0
 800bc28:	e7e7      	b.n	800bbfa <_strtod_l+0xa5a>
 800bc2a:	4b5d      	ldr	r3, [pc, #372]	; (800bda0 <_strtod_l+0xc00>)
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4649      	mov	r1, r9
 800bc30:	2200      	movs	r2, #0
 800bc32:	f7f4 fcf1 	bl	8000618 <__aeabi_dmul>
 800bc36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc38:	4680      	mov	r8, r0
 800bc3a:	4689      	mov	r9, r1
 800bc3c:	b933      	cbnz	r3, 800bc4c <_strtod_l+0xaac>
 800bc3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc42:	900e      	str	r0, [sp, #56]	; 0x38
 800bc44:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc46:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bc4a:	e7dd      	b.n	800bc08 <_strtod_l+0xa68>
 800bc4c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bc50:	e7f9      	b.n	800bc46 <_strtod_l+0xaa6>
 800bc52:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bc56:	9b04      	ldr	r3, [sp, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1a8      	bne.n	800bbae <_strtod_l+0xa0e>
 800bc5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bc60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc62:	0d1b      	lsrs	r3, r3, #20
 800bc64:	051b      	lsls	r3, r3, #20
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d1a1      	bne.n	800bbae <_strtod_l+0xa0e>
 800bc6a:	4640      	mov	r0, r8
 800bc6c:	4649      	mov	r1, r9
 800bc6e:	f7f5 f833 	bl	8000cd8 <__aeabi_d2lz>
 800bc72:	f7f4 fca3 	bl	80005bc <__aeabi_l2d>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	f7f4 fb13 	bl	80002a8 <__aeabi_dsub>
 800bc82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc88:	ea43 030a 	orr.w	r3, r3, sl
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	4680      	mov	r8, r0
 800bc90:	4689      	mov	r9, r1
 800bc92:	d055      	beq.n	800bd40 <_strtod_l+0xba0>
 800bc94:	a336      	add	r3, pc, #216	; (adr r3, 800bd70 <_strtod_l+0xbd0>)
 800bc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9a:	f7f4 ff2f 	bl	8000afc <__aeabi_dcmplt>
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f47f acd0 	bne.w	800b644 <_strtod_l+0x4a4>
 800bca4:	a334      	add	r3, pc, #208	; (adr r3, 800bd78 <_strtod_l+0xbd8>)
 800bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcaa:	4640      	mov	r0, r8
 800bcac:	4649      	mov	r1, r9
 800bcae:	f7f4 ff43 	bl	8000b38 <__aeabi_dcmpgt>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	f43f af7b 	beq.w	800bbae <_strtod_l+0xa0e>
 800bcb8:	e4c4      	b.n	800b644 <_strtod_l+0x4a4>
 800bcba:	9b04      	ldr	r3, [sp, #16]
 800bcbc:	b333      	cbz	r3, 800bd0c <_strtod_l+0xb6c>
 800bcbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bcc4:	d822      	bhi.n	800bd0c <_strtod_l+0xb6c>
 800bcc6:	a32e      	add	r3, pc, #184	; (adr r3, 800bd80 <_strtod_l+0xbe0>)
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	4640      	mov	r0, r8
 800bcce:	4649      	mov	r1, r9
 800bcd0:	f7f4 ff1e 	bl	8000b10 <__aeabi_dcmple>
 800bcd4:	b1a0      	cbz	r0, 800bd00 <_strtod_l+0xb60>
 800bcd6:	4649      	mov	r1, r9
 800bcd8:	4640      	mov	r0, r8
 800bcda:	f7f4 ff75 	bl	8000bc8 <__aeabi_d2uiz>
 800bcde:	2801      	cmp	r0, #1
 800bce0:	bf38      	it	cc
 800bce2:	2001      	movcc	r0, #1
 800bce4:	f7f4 fc1e 	bl	8000524 <__aeabi_ui2d>
 800bce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcea:	4680      	mov	r8, r0
 800bcec:	4689      	mov	r9, r1
 800bcee:	bb23      	cbnz	r3, 800bd3a <_strtod_l+0xb9a>
 800bcf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcf4:	9010      	str	r0, [sp, #64]	; 0x40
 800bcf6:	9311      	str	r3, [sp, #68]	; 0x44
 800bcf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bcfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd04:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bd08:	1a9b      	subs	r3, r3, r2
 800bd0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd10:	eeb0 0a48 	vmov.f32	s0, s16
 800bd14:	eef0 0a68 	vmov.f32	s1, s17
 800bd18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd1c:	f001 ffd2 	bl	800dcc4 <__ulp>
 800bd20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd24:	ec53 2b10 	vmov	r2, r3, d0
 800bd28:	f7f4 fc76 	bl	8000618 <__aeabi_dmul>
 800bd2c:	ec53 2b18 	vmov	r2, r3, d8
 800bd30:	f7f4 fabc 	bl	80002ac <__adddf3>
 800bd34:	4682      	mov	sl, r0
 800bd36:	468b      	mov	fp, r1
 800bd38:	e78d      	b.n	800bc56 <_strtod_l+0xab6>
 800bd3a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bd3e:	e7db      	b.n	800bcf8 <_strtod_l+0xb58>
 800bd40:	a311      	add	r3, pc, #68	; (adr r3, 800bd88 <_strtod_l+0xbe8>)
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	f7f4 fed9 	bl	8000afc <__aeabi_dcmplt>
 800bd4a:	e7b2      	b.n	800bcb2 <_strtod_l+0xb12>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd54:	6013      	str	r3, [r2, #0]
 800bd56:	f7ff ba6b 	b.w	800b230 <_strtod_l+0x90>
 800bd5a:	2a65      	cmp	r2, #101	; 0x65
 800bd5c:	f43f ab5f 	beq.w	800b41e <_strtod_l+0x27e>
 800bd60:	2a45      	cmp	r2, #69	; 0x45
 800bd62:	f43f ab5c 	beq.w	800b41e <_strtod_l+0x27e>
 800bd66:	2301      	movs	r3, #1
 800bd68:	f7ff bb94 	b.w	800b494 <_strtod_l+0x2f4>
 800bd6c:	f3af 8000 	nop.w
 800bd70:	94a03595 	.word	0x94a03595
 800bd74:	3fdfffff 	.word	0x3fdfffff
 800bd78:	35afe535 	.word	0x35afe535
 800bd7c:	3fe00000 	.word	0x3fe00000
 800bd80:	ffc00000 	.word	0xffc00000
 800bd84:	41dfffff 	.word	0x41dfffff
 800bd88:	94a03595 	.word	0x94a03595
 800bd8c:	3fcfffff 	.word	0x3fcfffff
 800bd90:	3ff00000 	.word	0x3ff00000
 800bd94:	7ff00000 	.word	0x7ff00000
 800bd98:	7fe00000 	.word	0x7fe00000
 800bd9c:	7c9fffff 	.word	0x7c9fffff
 800bda0:	3fe00000 	.word	0x3fe00000
 800bda4:	bff00000 	.word	0xbff00000
 800bda8:	7fefffff 	.word	0x7fefffff

0800bdac <_strtod_r>:
 800bdac:	4b01      	ldr	r3, [pc, #4]	; (800bdb4 <_strtod_r+0x8>)
 800bdae:	f7ff b9f7 	b.w	800b1a0 <_strtod_l>
 800bdb2:	bf00      	nop
 800bdb4:	20000124 	.word	0x20000124

0800bdb8 <__strtok_r>:
 800bdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdba:	b908      	cbnz	r0, 800bdc0 <__strtok_r+0x8>
 800bdbc:	6810      	ldr	r0, [r2, #0]
 800bdbe:	b188      	cbz	r0, 800bde4 <__strtok_r+0x2c>
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bdc8:	460f      	mov	r7, r1
 800bdca:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bdce:	b91e      	cbnz	r6, 800bdd8 <__strtok_r+0x20>
 800bdd0:	b965      	cbnz	r5, 800bdec <__strtok_r+0x34>
 800bdd2:	6015      	str	r5, [r2, #0]
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	e005      	b.n	800bde4 <__strtok_r+0x2c>
 800bdd8:	42b5      	cmp	r5, r6
 800bdda:	d1f6      	bne.n	800bdca <__strtok_r+0x12>
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1f0      	bne.n	800bdc2 <__strtok_r+0xa>
 800bde0:	6014      	str	r4, [r2, #0]
 800bde2:	7003      	strb	r3, [r0, #0]
 800bde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde6:	461c      	mov	r4, r3
 800bde8:	e00c      	b.n	800be04 <__strtok_r+0x4c>
 800bdea:	b915      	cbnz	r5, 800bdf2 <__strtok_r+0x3a>
 800bdec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bdf0:	460e      	mov	r6, r1
 800bdf2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bdf6:	42ab      	cmp	r3, r5
 800bdf8:	d1f7      	bne.n	800bdea <__strtok_r+0x32>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0f3      	beq.n	800bde6 <__strtok_r+0x2e>
 800bdfe:	2300      	movs	r3, #0
 800be00:	f804 3c01 	strb.w	r3, [r4, #-1]
 800be04:	6014      	str	r4, [r2, #0]
 800be06:	e7ed      	b.n	800bde4 <__strtok_r+0x2c>

0800be08 <strtok_r>:
 800be08:	2301      	movs	r3, #1
 800be0a:	f7ff bfd5 	b.w	800bdb8 <__strtok_r>
	...

0800be10 <_strtol_l.constprop.0>:
 800be10:	2b01      	cmp	r3, #1
 800be12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be16:	d001      	beq.n	800be1c <_strtol_l.constprop.0+0xc>
 800be18:	2b24      	cmp	r3, #36	; 0x24
 800be1a:	d906      	bls.n	800be2a <_strtol_l.constprop.0+0x1a>
 800be1c:	f7fe f80e 	bl	8009e3c <__errno>
 800be20:	2316      	movs	r3, #22
 800be22:	6003      	str	r3, [r0, #0]
 800be24:	2000      	movs	r0, #0
 800be26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bf10 <_strtol_l.constprop.0+0x100>
 800be2e:	460d      	mov	r5, r1
 800be30:	462e      	mov	r6, r5
 800be32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be36:	f814 700c 	ldrb.w	r7, [r4, ip]
 800be3a:	f017 0708 	ands.w	r7, r7, #8
 800be3e:	d1f7      	bne.n	800be30 <_strtol_l.constprop.0+0x20>
 800be40:	2c2d      	cmp	r4, #45	; 0x2d
 800be42:	d132      	bne.n	800beaa <_strtol_l.constprop.0+0x9a>
 800be44:	782c      	ldrb	r4, [r5, #0]
 800be46:	2701      	movs	r7, #1
 800be48:	1cb5      	adds	r5, r6, #2
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d05b      	beq.n	800bf06 <_strtol_l.constprop.0+0xf6>
 800be4e:	2b10      	cmp	r3, #16
 800be50:	d109      	bne.n	800be66 <_strtol_l.constprop.0+0x56>
 800be52:	2c30      	cmp	r4, #48	; 0x30
 800be54:	d107      	bne.n	800be66 <_strtol_l.constprop.0+0x56>
 800be56:	782c      	ldrb	r4, [r5, #0]
 800be58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800be5c:	2c58      	cmp	r4, #88	; 0x58
 800be5e:	d14d      	bne.n	800befc <_strtol_l.constprop.0+0xec>
 800be60:	786c      	ldrb	r4, [r5, #1]
 800be62:	2310      	movs	r3, #16
 800be64:	3502      	adds	r5, #2
 800be66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800be6a:	f108 38ff 	add.w	r8, r8, #4294967295
 800be6e:	f04f 0c00 	mov.w	ip, #0
 800be72:	fbb8 f9f3 	udiv	r9, r8, r3
 800be76:	4666      	mov	r6, ip
 800be78:	fb03 8a19 	mls	sl, r3, r9, r8
 800be7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800be80:	f1be 0f09 	cmp.w	lr, #9
 800be84:	d816      	bhi.n	800beb4 <_strtol_l.constprop.0+0xa4>
 800be86:	4674      	mov	r4, lr
 800be88:	42a3      	cmp	r3, r4
 800be8a:	dd24      	ble.n	800bed6 <_strtol_l.constprop.0+0xc6>
 800be8c:	f1bc 0f00 	cmp.w	ip, #0
 800be90:	db1e      	blt.n	800bed0 <_strtol_l.constprop.0+0xc0>
 800be92:	45b1      	cmp	r9, r6
 800be94:	d31c      	bcc.n	800bed0 <_strtol_l.constprop.0+0xc0>
 800be96:	d101      	bne.n	800be9c <_strtol_l.constprop.0+0x8c>
 800be98:	45a2      	cmp	sl, r4
 800be9a:	db19      	blt.n	800bed0 <_strtol_l.constprop.0+0xc0>
 800be9c:	fb06 4603 	mla	r6, r6, r3, r4
 800bea0:	f04f 0c01 	mov.w	ip, #1
 800bea4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bea8:	e7e8      	b.n	800be7c <_strtol_l.constprop.0+0x6c>
 800beaa:	2c2b      	cmp	r4, #43	; 0x2b
 800beac:	bf04      	itt	eq
 800beae:	782c      	ldrbeq	r4, [r5, #0]
 800beb0:	1cb5      	addeq	r5, r6, #2
 800beb2:	e7ca      	b.n	800be4a <_strtol_l.constprop.0+0x3a>
 800beb4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800beb8:	f1be 0f19 	cmp.w	lr, #25
 800bebc:	d801      	bhi.n	800bec2 <_strtol_l.constprop.0+0xb2>
 800bebe:	3c37      	subs	r4, #55	; 0x37
 800bec0:	e7e2      	b.n	800be88 <_strtol_l.constprop.0+0x78>
 800bec2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bec6:	f1be 0f19 	cmp.w	lr, #25
 800beca:	d804      	bhi.n	800bed6 <_strtol_l.constprop.0+0xc6>
 800becc:	3c57      	subs	r4, #87	; 0x57
 800bece:	e7db      	b.n	800be88 <_strtol_l.constprop.0+0x78>
 800bed0:	f04f 3cff 	mov.w	ip, #4294967295
 800bed4:	e7e6      	b.n	800bea4 <_strtol_l.constprop.0+0x94>
 800bed6:	f1bc 0f00 	cmp.w	ip, #0
 800beda:	da05      	bge.n	800bee8 <_strtol_l.constprop.0+0xd8>
 800bedc:	2322      	movs	r3, #34	; 0x22
 800bede:	6003      	str	r3, [r0, #0]
 800bee0:	4646      	mov	r6, r8
 800bee2:	b942      	cbnz	r2, 800bef6 <_strtol_l.constprop.0+0xe6>
 800bee4:	4630      	mov	r0, r6
 800bee6:	e79e      	b.n	800be26 <_strtol_l.constprop.0+0x16>
 800bee8:	b107      	cbz	r7, 800beec <_strtol_l.constprop.0+0xdc>
 800beea:	4276      	negs	r6, r6
 800beec:	2a00      	cmp	r2, #0
 800beee:	d0f9      	beq.n	800bee4 <_strtol_l.constprop.0+0xd4>
 800bef0:	f1bc 0f00 	cmp.w	ip, #0
 800bef4:	d000      	beq.n	800bef8 <_strtol_l.constprop.0+0xe8>
 800bef6:	1e69      	subs	r1, r5, #1
 800bef8:	6011      	str	r1, [r2, #0]
 800befa:	e7f3      	b.n	800bee4 <_strtol_l.constprop.0+0xd4>
 800befc:	2430      	movs	r4, #48	; 0x30
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1b1      	bne.n	800be66 <_strtol_l.constprop.0+0x56>
 800bf02:	2308      	movs	r3, #8
 800bf04:	e7af      	b.n	800be66 <_strtol_l.constprop.0+0x56>
 800bf06:	2c30      	cmp	r4, #48	; 0x30
 800bf08:	d0a5      	beq.n	800be56 <_strtol_l.constprop.0+0x46>
 800bf0a:	230a      	movs	r3, #10
 800bf0c:	e7ab      	b.n	800be66 <_strtol_l.constprop.0+0x56>
 800bf0e:	bf00      	nop
 800bf10:	08010f61 	.word	0x08010f61

0800bf14 <_strtol_r>:
 800bf14:	f7ff bf7c 	b.w	800be10 <_strtol_l.constprop.0>

0800bf18 <_vsniprintf_r>:
 800bf18:	b530      	push	{r4, r5, lr}
 800bf1a:	4614      	mov	r4, r2
 800bf1c:	2c00      	cmp	r4, #0
 800bf1e:	b09b      	sub	sp, #108	; 0x6c
 800bf20:	4605      	mov	r5, r0
 800bf22:	461a      	mov	r2, r3
 800bf24:	da05      	bge.n	800bf32 <_vsniprintf_r+0x1a>
 800bf26:	238b      	movs	r3, #139	; 0x8b
 800bf28:	6003      	str	r3, [r0, #0]
 800bf2a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2e:	b01b      	add	sp, #108	; 0x6c
 800bf30:	bd30      	pop	{r4, r5, pc}
 800bf32:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bf36:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bf3a:	bf14      	ite	ne
 800bf3c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bf40:	4623      	moveq	r3, r4
 800bf42:	9302      	str	r3, [sp, #8]
 800bf44:	9305      	str	r3, [sp, #20]
 800bf46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf4a:	9100      	str	r1, [sp, #0]
 800bf4c:	9104      	str	r1, [sp, #16]
 800bf4e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bf52:	4669      	mov	r1, sp
 800bf54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bf56:	f002 f8c3 	bl	800e0e0 <_svfiprintf_r>
 800bf5a:	1c43      	adds	r3, r0, #1
 800bf5c:	bfbc      	itt	lt
 800bf5e:	238b      	movlt	r3, #139	; 0x8b
 800bf60:	602b      	strlt	r3, [r5, #0]
 800bf62:	2c00      	cmp	r4, #0
 800bf64:	d0e3      	beq.n	800bf2e <_vsniprintf_r+0x16>
 800bf66:	9b00      	ldr	r3, [sp, #0]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	701a      	strb	r2, [r3, #0]
 800bf6c:	e7df      	b.n	800bf2e <_vsniprintf_r+0x16>
	...

0800bf70 <vsniprintf>:
 800bf70:	b507      	push	{r0, r1, r2, lr}
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	4613      	mov	r3, r2
 800bf76:	460a      	mov	r2, r1
 800bf78:	4601      	mov	r1, r0
 800bf7a:	4803      	ldr	r0, [pc, #12]	; (800bf88 <vsniprintf+0x18>)
 800bf7c:	6800      	ldr	r0, [r0, #0]
 800bf7e:	f7ff ffcb 	bl	800bf18 <_vsniprintf_r>
 800bf82:	b003      	add	sp, #12
 800bf84:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf88:	200000bc 	.word	0x200000bc

0800bf8c <_vsiprintf_r>:
 800bf8c:	b500      	push	{lr}
 800bf8e:	b09b      	sub	sp, #108	; 0x6c
 800bf90:	9100      	str	r1, [sp, #0]
 800bf92:	9104      	str	r1, [sp, #16]
 800bf94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf98:	9105      	str	r1, [sp, #20]
 800bf9a:	9102      	str	r1, [sp, #8]
 800bf9c:	4905      	ldr	r1, [pc, #20]	; (800bfb4 <_vsiprintf_r+0x28>)
 800bf9e:	9103      	str	r1, [sp, #12]
 800bfa0:	4669      	mov	r1, sp
 800bfa2:	f002 f89d 	bl	800e0e0 <_svfiprintf_r>
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	701a      	strb	r2, [r3, #0]
 800bfac:	b01b      	add	sp, #108	; 0x6c
 800bfae:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfb2:	bf00      	nop
 800bfb4:	ffff0208 	.word	0xffff0208

0800bfb8 <vsiprintf>:
 800bfb8:	4613      	mov	r3, r2
 800bfba:	460a      	mov	r2, r1
 800bfbc:	4601      	mov	r1, r0
 800bfbe:	4802      	ldr	r0, [pc, #8]	; (800bfc8 <vsiprintf+0x10>)
 800bfc0:	6800      	ldr	r0, [r0, #0]
 800bfc2:	f7ff bfe3 	b.w	800bf8c <_vsiprintf_r>
 800bfc6:	bf00      	nop
 800bfc8:	200000bc 	.word	0x200000bc

0800bfcc <_write_r>:
 800bfcc:	b538      	push	{r3, r4, r5, lr}
 800bfce:	4d07      	ldr	r5, [pc, #28]	; (800bfec <_write_r+0x20>)
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	4608      	mov	r0, r1
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	602a      	str	r2, [r5, #0]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f7f8 fd8f 	bl	8004afe <_write>
 800bfe0:	1c43      	adds	r3, r0, #1
 800bfe2:	d102      	bne.n	800bfea <_write_r+0x1e>
 800bfe4:	682b      	ldr	r3, [r5, #0]
 800bfe6:	b103      	cbz	r3, 800bfea <_write_r+0x1e>
 800bfe8:	6023      	str	r3, [r4, #0]
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	2000db64 	.word	0x2000db64

0800bff0 <_close_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4d06      	ldr	r5, [pc, #24]	; (800c00c <_close_r+0x1c>)
 800bff4:	2300      	movs	r3, #0
 800bff6:	4604      	mov	r4, r0
 800bff8:	4608      	mov	r0, r1
 800bffa:	602b      	str	r3, [r5, #0]
 800bffc:	f7f8 fd9b 	bl	8004b36 <_close>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	d102      	bne.n	800c00a <_close_r+0x1a>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	b103      	cbz	r3, 800c00a <_close_r+0x1a>
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	2000db64 	.word	0x2000db64

0800c010 <quorem>:
 800c010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c014:	6903      	ldr	r3, [r0, #16]
 800c016:	690c      	ldr	r4, [r1, #16]
 800c018:	42a3      	cmp	r3, r4
 800c01a:	4607      	mov	r7, r0
 800c01c:	f2c0 8081 	blt.w	800c122 <quorem+0x112>
 800c020:	3c01      	subs	r4, #1
 800c022:	f101 0814 	add.w	r8, r1, #20
 800c026:	f100 0514 	add.w	r5, r0, #20
 800c02a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c02e:	9301      	str	r3, [sp, #4]
 800c030:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c034:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c038:	3301      	adds	r3, #1
 800c03a:	429a      	cmp	r2, r3
 800c03c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c040:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c044:	fbb2 f6f3 	udiv	r6, r2, r3
 800c048:	d331      	bcc.n	800c0ae <quorem+0x9e>
 800c04a:	f04f 0e00 	mov.w	lr, #0
 800c04e:	4640      	mov	r0, r8
 800c050:	46ac      	mov	ip, r5
 800c052:	46f2      	mov	sl, lr
 800c054:	f850 2b04 	ldr.w	r2, [r0], #4
 800c058:	b293      	uxth	r3, r2
 800c05a:	fb06 e303 	mla	r3, r6, r3, lr
 800c05e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c062:	b29b      	uxth	r3, r3
 800c064:	ebaa 0303 	sub.w	r3, sl, r3
 800c068:	f8dc a000 	ldr.w	sl, [ip]
 800c06c:	0c12      	lsrs	r2, r2, #16
 800c06e:	fa13 f38a 	uxtah	r3, r3, sl
 800c072:	fb06 e202 	mla	r2, r6, r2, lr
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	9b00      	ldr	r3, [sp, #0]
 800c07a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c07e:	b292      	uxth	r2, r2
 800c080:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c088:	f8bd 3000 	ldrh.w	r3, [sp]
 800c08c:	4581      	cmp	r9, r0
 800c08e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c092:	f84c 3b04 	str.w	r3, [ip], #4
 800c096:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c09a:	d2db      	bcs.n	800c054 <quorem+0x44>
 800c09c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c0a0:	b92b      	cbnz	r3, 800c0ae <quorem+0x9e>
 800c0a2:	9b01      	ldr	r3, [sp, #4]
 800c0a4:	3b04      	subs	r3, #4
 800c0a6:	429d      	cmp	r5, r3
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	d32e      	bcc.n	800c10a <quorem+0xfa>
 800c0ac:	613c      	str	r4, [r7, #16]
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	f001 fd62 	bl	800db78 <__mcmp>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	db24      	blt.n	800c102 <quorem+0xf2>
 800c0b8:	3601      	adds	r6, #1
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f04f 0c00 	mov.w	ip, #0
 800c0c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c0c4:	f8d0 e000 	ldr.w	lr, [r0]
 800c0c8:	b293      	uxth	r3, r2
 800c0ca:	ebac 0303 	sub.w	r3, ip, r3
 800c0ce:	0c12      	lsrs	r2, r2, #16
 800c0d0:	fa13 f38e 	uxtah	r3, r3, lr
 800c0d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c0d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0e2:	45c1      	cmp	r9, r8
 800c0e4:	f840 3b04 	str.w	r3, [r0], #4
 800c0e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c0ec:	d2e8      	bcs.n	800c0c0 <quorem+0xb0>
 800c0ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0f6:	b922      	cbnz	r2, 800c102 <quorem+0xf2>
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	429d      	cmp	r5, r3
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	d30a      	bcc.n	800c116 <quorem+0x106>
 800c100:	613c      	str	r4, [r7, #16]
 800c102:	4630      	mov	r0, r6
 800c104:	b003      	add	sp, #12
 800c106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c10a:	6812      	ldr	r2, [r2, #0]
 800c10c:	3b04      	subs	r3, #4
 800c10e:	2a00      	cmp	r2, #0
 800c110:	d1cc      	bne.n	800c0ac <quorem+0x9c>
 800c112:	3c01      	subs	r4, #1
 800c114:	e7c7      	b.n	800c0a6 <quorem+0x96>
 800c116:	6812      	ldr	r2, [r2, #0]
 800c118:	3b04      	subs	r3, #4
 800c11a:	2a00      	cmp	r2, #0
 800c11c:	d1f0      	bne.n	800c100 <quorem+0xf0>
 800c11e:	3c01      	subs	r4, #1
 800c120:	e7eb      	b.n	800c0fa <quorem+0xea>
 800c122:	2000      	movs	r0, #0
 800c124:	e7ee      	b.n	800c104 <quorem+0xf4>
	...

0800c128 <_dtoa_r>:
 800c128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c12c:	ed2d 8b04 	vpush	{d8-d9}
 800c130:	ec57 6b10 	vmov	r6, r7, d0
 800c134:	b093      	sub	sp, #76	; 0x4c
 800c136:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c138:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c13c:	9106      	str	r1, [sp, #24]
 800c13e:	ee10 aa10 	vmov	sl, s0
 800c142:	4604      	mov	r4, r0
 800c144:	9209      	str	r2, [sp, #36]	; 0x24
 800c146:	930c      	str	r3, [sp, #48]	; 0x30
 800c148:	46bb      	mov	fp, r7
 800c14a:	b975      	cbnz	r5, 800c16a <_dtoa_r+0x42>
 800c14c:	2010      	movs	r0, #16
 800c14e:	f001 fa21 	bl	800d594 <malloc>
 800c152:	4602      	mov	r2, r0
 800c154:	6260      	str	r0, [r4, #36]	; 0x24
 800c156:	b920      	cbnz	r0, 800c162 <_dtoa_r+0x3a>
 800c158:	4ba7      	ldr	r3, [pc, #668]	; (800c3f8 <_dtoa_r+0x2d0>)
 800c15a:	21ea      	movs	r1, #234	; 0xea
 800c15c:	48a7      	ldr	r0, [pc, #668]	; (800c3fc <_dtoa_r+0x2d4>)
 800c15e:	f002 fcf3 	bl	800eb48 <__assert_func>
 800c162:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c166:	6005      	str	r5, [r0, #0]
 800c168:	60c5      	str	r5, [r0, #12]
 800c16a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c16c:	6819      	ldr	r1, [r3, #0]
 800c16e:	b151      	cbz	r1, 800c186 <_dtoa_r+0x5e>
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	604a      	str	r2, [r1, #4]
 800c174:	2301      	movs	r3, #1
 800c176:	4093      	lsls	r3, r2
 800c178:	608b      	str	r3, [r1, #8]
 800c17a:	4620      	mov	r0, r4
 800c17c:	f001 fa70 	bl	800d660 <_Bfree>
 800c180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	1e3b      	subs	r3, r7, #0
 800c188:	bfaa      	itet	ge
 800c18a:	2300      	movge	r3, #0
 800c18c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c190:	f8c8 3000 	strge.w	r3, [r8]
 800c194:	4b9a      	ldr	r3, [pc, #616]	; (800c400 <_dtoa_r+0x2d8>)
 800c196:	bfbc      	itt	lt
 800c198:	2201      	movlt	r2, #1
 800c19a:	f8c8 2000 	strlt.w	r2, [r8]
 800c19e:	ea33 030b 	bics.w	r3, r3, fp
 800c1a2:	d11b      	bne.n	800c1dc <_dtoa_r+0xb4>
 800c1a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1b0:	4333      	orrs	r3, r6
 800c1b2:	f000 8592 	beq.w	800ccda <_dtoa_r+0xbb2>
 800c1b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1b8:	b963      	cbnz	r3, 800c1d4 <_dtoa_r+0xac>
 800c1ba:	4b92      	ldr	r3, [pc, #584]	; (800c404 <_dtoa_r+0x2dc>)
 800c1bc:	e022      	b.n	800c204 <_dtoa_r+0xdc>
 800c1be:	4b92      	ldr	r3, [pc, #584]	; (800c408 <_dtoa_r+0x2e0>)
 800c1c0:	9301      	str	r3, [sp, #4]
 800c1c2:	3308      	adds	r3, #8
 800c1c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	9801      	ldr	r0, [sp, #4]
 800c1ca:	b013      	add	sp, #76	; 0x4c
 800c1cc:	ecbd 8b04 	vpop	{d8-d9}
 800c1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d4:	4b8b      	ldr	r3, [pc, #556]	; (800c404 <_dtoa_r+0x2dc>)
 800c1d6:	9301      	str	r3, [sp, #4]
 800c1d8:	3303      	adds	r3, #3
 800c1da:	e7f3      	b.n	800c1c4 <_dtoa_r+0x9c>
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2300      	movs	r3, #0
 800c1e0:	4650      	mov	r0, sl
 800c1e2:	4659      	mov	r1, fp
 800c1e4:	f7f4 fc80 	bl	8000ae8 <__aeabi_dcmpeq>
 800c1e8:	ec4b ab19 	vmov	d9, sl, fp
 800c1ec:	4680      	mov	r8, r0
 800c1ee:	b158      	cbz	r0, 800c208 <_dtoa_r+0xe0>
 800c1f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 856b 	beq.w	800ccd4 <_dtoa_r+0xbac>
 800c1fe:	4883      	ldr	r0, [pc, #524]	; (800c40c <_dtoa_r+0x2e4>)
 800c200:	6018      	str	r0, [r3, #0]
 800c202:	1e43      	subs	r3, r0, #1
 800c204:	9301      	str	r3, [sp, #4]
 800c206:	e7df      	b.n	800c1c8 <_dtoa_r+0xa0>
 800c208:	ec4b ab10 	vmov	d0, sl, fp
 800c20c:	aa10      	add	r2, sp, #64	; 0x40
 800c20e:	a911      	add	r1, sp, #68	; 0x44
 800c210:	4620      	mov	r0, r4
 800c212:	f001 fdd3 	bl	800ddbc <__d2b>
 800c216:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c21a:	ee08 0a10 	vmov	s16, r0
 800c21e:	2d00      	cmp	r5, #0
 800c220:	f000 8084 	beq.w	800c32c <_dtoa_r+0x204>
 800c224:	ee19 3a90 	vmov	r3, s19
 800c228:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c22c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c230:	4656      	mov	r6, sl
 800c232:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c236:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c23a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c23e:	4b74      	ldr	r3, [pc, #464]	; (800c410 <_dtoa_r+0x2e8>)
 800c240:	2200      	movs	r2, #0
 800c242:	4630      	mov	r0, r6
 800c244:	4639      	mov	r1, r7
 800c246:	f7f4 f82f 	bl	80002a8 <__aeabi_dsub>
 800c24a:	a365      	add	r3, pc, #404	; (adr r3, 800c3e0 <_dtoa_r+0x2b8>)
 800c24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c250:	f7f4 f9e2 	bl	8000618 <__aeabi_dmul>
 800c254:	a364      	add	r3, pc, #400	; (adr r3, 800c3e8 <_dtoa_r+0x2c0>)
 800c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25a:	f7f4 f827 	bl	80002ac <__adddf3>
 800c25e:	4606      	mov	r6, r0
 800c260:	4628      	mov	r0, r5
 800c262:	460f      	mov	r7, r1
 800c264:	f7f4 f96e 	bl	8000544 <__aeabi_i2d>
 800c268:	a361      	add	r3, pc, #388	; (adr r3, 800c3f0 <_dtoa_r+0x2c8>)
 800c26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26e:	f7f4 f9d3 	bl	8000618 <__aeabi_dmul>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4630      	mov	r0, r6
 800c278:	4639      	mov	r1, r7
 800c27a:	f7f4 f817 	bl	80002ac <__adddf3>
 800c27e:	4606      	mov	r6, r0
 800c280:	460f      	mov	r7, r1
 800c282:	f7f4 fc79 	bl	8000b78 <__aeabi_d2iz>
 800c286:	2200      	movs	r2, #0
 800c288:	9000      	str	r0, [sp, #0]
 800c28a:	2300      	movs	r3, #0
 800c28c:	4630      	mov	r0, r6
 800c28e:	4639      	mov	r1, r7
 800c290:	f7f4 fc34 	bl	8000afc <__aeabi_dcmplt>
 800c294:	b150      	cbz	r0, 800c2ac <_dtoa_r+0x184>
 800c296:	9800      	ldr	r0, [sp, #0]
 800c298:	f7f4 f954 	bl	8000544 <__aeabi_i2d>
 800c29c:	4632      	mov	r2, r6
 800c29e:	463b      	mov	r3, r7
 800c2a0:	f7f4 fc22 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2a4:	b910      	cbnz	r0, 800c2ac <_dtoa_r+0x184>
 800c2a6:	9b00      	ldr	r3, [sp, #0]
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	9300      	str	r3, [sp, #0]
 800c2ac:	9b00      	ldr	r3, [sp, #0]
 800c2ae:	2b16      	cmp	r3, #22
 800c2b0:	d85a      	bhi.n	800c368 <_dtoa_r+0x240>
 800c2b2:	9a00      	ldr	r2, [sp, #0]
 800c2b4:	4b57      	ldr	r3, [pc, #348]	; (800c414 <_dtoa_r+0x2ec>)
 800c2b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	ec51 0b19 	vmov	r0, r1, d9
 800c2c2:	f7f4 fc1b 	bl	8000afc <__aeabi_dcmplt>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d050      	beq.n	800c36c <_dtoa_r+0x244>
 800c2ca:	9b00      	ldr	r3, [sp, #0]
 800c2cc:	3b01      	subs	r3, #1
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2d6:	1b5d      	subs	r5, r3, r5
 800c2d8:	1e6b      	subs	r3, r5, #1
 800c2da:	9305      	str	r3, [sp, #20]
 800c2dc:	bf45      	ittet	mi
 800c2de:	f1c5 0301 	rsbmi	r3, r5, #1
 800c2e2:	9304      	strmi	r3, [sp, #16]
 800c2e4:	2300      	movpl	r3, #0
 800c2e6:	2300      	movmi	r3, #0
 800c2e8:	bf4c      	ite	mi
 800c2ea:	9305      	strmi	r3, [sp, #20]
 800c2ec:	9304      	strpl	r3, [sp, #16]
 800c2ee:	9b00      	ldr	r3, [sp, #0]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	db3d      	blt.n	800c370 <_dtoa_r+0x248>
 800c2f4:	9b05      	ldr	r3, [sp, #20]
 800c2f6:	9a00      	ldr	r2, [sp, #0]
 800c2f8:	920a      	str	r2, [sp, #40]	; 0x28
 800c2fa:	4413      	add	r3, r2
 800c2fc:	9305      	str	r3, [sp, #20]
 800c2fe:	2300      	movs	r3, #0
 800c300:	9307      	str	r3, [sp, #28]
 800c302:	9b06      	ldr	r3, [sp, #24]
 800c304:	2b09      	cmp	r3, #9
 800c306:	f200 8089 	bhi.w	800c41c <_dtoa_r+0x2f4>
 800c30a:	2b05      	cmp	r3, #5
 800c30c:	bfc4      	itt	gt
 800c30e:	3b04      	subgt	r3, #4
 800c310:	9306      	strgt	r3, [sp, #24]
 800c312:	9b06      	ldr	r3, [sp, #24]
 800c314:	f1a3 0302 	sub.w	r3, r3, #2
 800c318:	bfcc      	ite	gt
 800c31a:	2500      	movgt	r5, #0
 800c31c:	2501      	movle	r5, #1
 800c31e:	2b03      	cmp	r3, #3
 800c320:	f200 8087 	bhi.w	800c432 <_dtoa_r+0x30a>
 800c324:	e8df f003 	tbb	[pc, r3]
 800c328:	59383a2d 	.word	0x59383a2d
 800c32c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c330:	441d      	add	r5, r3
 800c332:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c336:	2b20      	cmp	r3, #32
 800c338:	bfc1      	itttt	gt
 800c33a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c33e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c342:	fa0b f303 	lslgt.w	r3, fp, r3
 800c346:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c34a:	bfda      	itte	le
 800c34c:	f1c3 0320 	rsble	r3, r3, #32
 800c350:	fa06 f003 	lslle.w	r0, r6, r3
 800c354:	4318      	orrgt	r0, r3
 800c356:	f7f4 f8e5 	bl	8000524 <__aeabi_ui2d>
 800c35a:	2301      	movs	r3, #1
 800c35c:	4606      	mov	r6, r0
 800c35e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c362:	3d01      	subs	r5, #1
 800c364:	930e      	str	r3, [sp, #56]	; 0x38
 800c366:	e76a      	b.n	800c23e <_dtoa_r+0x116>
 800c368:	2301      	movs	r3, #1
 800c36a:	e7b2      	b.n	800c2d2 <_dtoa_r+0x1aa>
 800c36c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c36e:	e7b1      	b.n	800c2d4 <_dtoa_r+0x1ac>
 800c370:	9b04      	ldr	r3, [sp, #16]
 800c372:	9a00      	ldr	r2, [sp, #0]
 800c374:	1a9b      	subs	r3, r3, r2
 800c376:	9304      	str	r3, [sp, #16]
 800c378:	4253      	negs	r3, r2
 800c37a:	9307      	str	r3, [sp, #28]
 800c37c:	2300      	movs	r3, #0
 800c37e:	930a      	str	r3, [sp, #40]	; 0x28
 800c380:	e7bf      	b.n	800c302 <_dtoa_r+0x1da>
 800c382:	2300      	movs	r3, #0
 800c384:	9308      	str	r3, [sp, #32]
 800c386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dc55      	bgt.n	800c438 <_dtoa_r+0x310>
 800c38c:	2301      	movs	r3, #1
 800c38e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c392:	461a      	mov	r2, r3
 800c394:	9209      	str	r2, [sp, #36]	; 0x24
 800c396:	e00c      	b.n	800c3b2 <_dtoa_r+0x28a>
 800c398:	2301      	movs	r3, #1
 800c39a:	e7f3      	b.n	800c384 <_dtoa_r+0x25c>
 800c39c:	2300      	movs	r3, #0
 800c39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a0:	9308      	str	r3, [sp, #32]
 800c3a2:	9b00      	ldr	r3, [sp, #0]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	9302      	str	r3, [sp, #8]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	9303      	str	r3, [sp, #12]
 800c3ae:	bfb8      	it	lt
 800c3b0:	2301      	movlt	r3, #1
 800c3b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	6042      	str	r2, [r0, #4]
 800c3b8:	2204      	movs	r2, #4
 800c3ba:	f102 0614 	add.w	r6, r2, #20
 800c3be:	429e      	cmp	r6, r3
 800c3c0:	6841      	ldr	r1, [r0, #4]
 800c3c2:	d93d      	bls.n	800c440 <_dtoa_r+0x318>
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f001 f90b 	bl	800d5e0 <_Balloc>
 800c3ca:	9001      	str	r0, [sp, #4]
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d13b      	bne.n	800c448 <_dtoa_r+0x320>
 800c3d0:	4b11      	ldr	r3, [pc, #68]	; (800c418 <_dtoa_r+0x2f0>)
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c3d8:	e6c0      	b.n	800c15c <_dtoa_r+0x34>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e7df      	b.n	800c39e <_dtoa_r+0x276>
 800c3de:	bf00      	nop
 800c3e0:	636f4361 	.word	0x636f4361
 800c3e4:	3fd287a7 	.word	0x3fd287a7
 800c3e8:	8b60c8b3 	.word	0x8b60c8b3
 800c3ec:	3fc68a28 	.word	0x3fc68a28
 800c3f0:	509f79fb 	.word	0x509f79fb
 800c3f4:	3fd34413 	.word	0x3fd34413
 800c3f8:	0801106e 	.word	0x0801106e
 800c3fc:	08011085 	.word	0x08011085
 800c400:	7ff00000 	.word	0x7ff00000
 800c404:	0801106a 	.word	0x0801106a
 800c408:	08011061 	.word	0x08011061
 800c40c:	080112da 	.word	0x080112da
 800c410:	3ff80000 	.word	0x3ff80000
 800c414:	080111f0 	.word	0x080111f0
 800c418:	080110e0 	.word	0x080110e0
 800c41c:	2501      	movs	r5, #1
 800c41e:	2300      	movs	r3, #0
 800c420:	9306      	str	r3, [sp, #24]
 800c422:	9508      	str	r5, [sp, #32]
 800c424:	f04f 33ff 	mov.w	r3, #4294967295
 800c428:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c42c:	2200      	movs	r2, #0
 800c42e:	2312      	movs	r3, #18
 800c430:	e7b0      	b.n	800c394 <_dtoa_r+0x26c>
 800c432:	2301      	movs	r3, #1
 800c434:	9308      	str	r3, [sp, #32]
 800c436:	e7f5      	b.n	800c424 <_dtoa_r+0x2fc>
 800c438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c43a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c43e:	e7b8      	b.n	800c3b2 <_dtoa_r+0x28a>
 800c440:	3101      	adds	r1, #1
 800c442:	6041      	str	r1, [r0, #4]
 800c444:	0052      	lsls	r2, r2, #1
 800c446:	e7b8      	b.n	800c3ba <_dtoa_r+0x292>
 800c448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c44a:	9a01      	ldr	r2, [sp, #4]
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	2b0e      	cmp	r3, #14
 800c452:	f200 809d 	bhi.w	800c590 <_dtoa_r+0x468>
 800c456:	2d00      	cmp	r5, #0
 800c458:	f000 809a 	beq.w	800c590 <_dtoa_r+0x468>
 800c45c:	9b00      	ldr	r3, [sp, #0]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	dd32      	ble.n	800c4c8 <_dtoa_r+0x3a0>
 800c462:	4ab7      	ldr	r2, [pc, #732]	; (800c740 <_dtoa_r+0x618>)
 800c464:	f003 030f 	and.w	r3, r3, #15
 800c468:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c46c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c470:	9b00      	ldr	r3, [sp, #0]
 800c472:	05d8      	lsls	r0, r3, #23
 800c474:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c478:	d516      	bpl.n	800c4a8 <_dtoa_r+0x380>
 800c47a:	4bb2      	ldr	r3, [pc, #712]	; (800c744 <_dtoa_r+0x61c>)
 800c47c:	ec51 0b19 	vmov	r0, r1, d9
 800c480:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c484:	f7f4 f9f2 	bl	800086c <__aeabi_ddiv>
 800c488:	f007 070f 	and.w	r7, r7, #15
 800c48c:	4682      	mov	sl, r0
 800c48e:	468b      	mov	fp, r1
 800c490:	2503      	movs	r5, #3
 800c492:	4eac      	ldr	r6, [pc, #688]	; (800c744 <_dtoa_r+0x61c>)
 800c494:	b957      	cbnz	r7, 800c4ac <_dtoa_r+0x384>
 800c496:	4642      	mov	r2, r8
 800c498:	464b      	mov	r3, r9
 800c49a:	4650      	mov	r0, sl
 800c49c:	4659      	mov	r1, fp
 800c49e:	f7f4 f9e5 	bl	800086c <__aeabi_ddiv>
 800c4a2:	4682      	mov	sl, r0
 800c4a4:	468b      	mov	fp, r1
 800c4a6:	e028      	b.n	800c4fa <_dtoa_r+0x3d2>
 800c4a8:	2502      	movs	r5, #2
 800c4aa:	e7f2      	b.n	800c492 <_dtoa_r+0x36a>
 800c4ac:	07f9      	lsls	r1, r7, #31
 800c4ae:	d508      	bpl.n	800c4c2 <_dtoa_r+0x39a>
 800c4b0:	4640      	mov	r0, r8
 800c4b2:	4649      	mov	r1, r9
 800c4b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c4b8:	f7f4 f8ae 	bl	8000618 <__aeabi_dmul>
 800c4bc:	3501      	adds	r5, #1
 800c4be:	4680      	mov	r8, r0
 800c4c0:	4689      	mov	r9, r1
 800c4c2:	107f      	asrs	r7, r7, #1
 800c4c4:	3608      	adds	r6, #8
 800c4c6:	e7e5      	b.n	800c494 <_dtoa_r+0x36c>
 800c4c8:	f000 809b 	beq.w	800c602 <_dtoa_r+0x4da>
 800c4cc:	9b00      	ldr	r3, [sp, #0]
 800c4ce:	4f9d      	ldr	r7, [pc, #628]	; (800c744 <_dtoa_r+0x61c>)
 800c4d0:	425e      	negs	r6, r3
 800c4d2:	4b9b      	ldr	r3, [pc, #620]	; (800c740 <_dtoa_r+0x618>)
 800c4d4:	f006 020f 	and.w	r2, r6, #15
 800c4d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	ec51 0b19 	vmov	r0, r1, d9
 800c4e4:	f7f4 f898 	bl	8000618 <__aeabi_dmul>
 800c4e8:	1136      	asrs	r6, r6, #4
 800c4ea:	4682      	mov	sl, r0
 800c4ec:	468b      	mov	fp, r1
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	2502      	movs	r5, #2
 800c4f2:	2e00      	cmp	r6, #0
 800c4f4:	d17a      	bne.n	800c5ec <_dtoa_r+0x4c4>
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1d3      	bne.n	800c4a2 <_dtoa_r+0x37a>
 800c4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 8082 	beq.w	800c606 <_dtoa_r+0x4de>
 800c502:	4b91      	ldr	r3, [pc, #580]	; (800c748 <_dtoa_r+0x620>)
 800c504:	2200      	movs	r2, #0
 800c506:	4650      	mov	r0, sl
 800c508:	4659      	mov	r1, fp
 800c50a:	f7f4 faf7 	bl	8000afc <__aeabi_dcmplt>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d079      	beq.n	800c606 <_dtoa_r+0x4de>
 800c512:	9b03      	ldr	r3, [sp, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d076      	beq.n	800c606 <_dtoa_r+0x4de>
 800c518:	9b02      	ldr	r3, [sp, #8]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	dd36      	ble.n	800c58c <_dtoa_r+0x464>
 800c51e:	9b00      	ldr	r3, [sp, #0]
 800c520:	4650      	mov	r0, sl
 800c522:	4659      	mov	r1, fp
 800c524:	1e5f      	subs	r7, r3, #1
 800c526:	2200      	movs	r2, #0
 800c528:	4b88      	ldr	r3, [pc, #544]	; (800c74c <_dtoa_r+0x624>)
 800c52a:	f7f4 f875 	bl	8000618 <__aeabi_dmul>
 800c52e:	9e02      	ldr	r6, [sp, #8]
 800c530:	4682      	mov	sl, r0
 800c532:	468b      	mov	fp, r1
 800c534:	3501      	adds	r5, #1
 800c536:	4628      	mov	r0, r5
 800c538:	f7f4 f804 	bl	8000544 <__aeabi_i2d>
 800c53c:	4652      	mov	r2, sl
 800c53e:	465b      	mov	r3, fp
 800c540:	f7f4 f86a 	bl	8000618 <__aeabi_dmul>
 800c544:	4b82      	ldr	r3, [pc, #520]	; (800c750 <_dtoa_r+0x628>)
 800c546:	2200      	movs	r2, #0
 800c548:	f7f3 feb0 	bl	80002ac <__adddf3>
 800c54c:	46d0      	mov	r8, sl
 800c54e:	46d9      	mov	r9, fp
 800c550:	4682      	mov	sl, r0
 800c552:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c556:	2e00      	cmp	r6, #0
 800c558:	d158      	bne.n	800c60c <_dtoa_r+0x4e4>
 800c55a:	4b7e      	ldr	r3, [pc, #504]	; (800c754 <_dtoa_r+0x62c>)
 800c55c:	2200      	movs	r2, #0
 800c55e:	4640      	mov	r0, r8
 800c560:	4649      	mov	r1, r9
 800c562:	f7f3 fea1 	bl	80002a8 <__aeabi_dsub>
 800c566:	4652      	mov	r2, sl
 800c568:	465b      	mov	r3, fp
 800c56a:	4680      	mov	r8, r0
 800c56c:	4689      	mov	r9, r1
 800c56e:	f7f4 fae3 	bl	8000b38 <__aeabi_dcmpgt>
 800c572:	2800      	cmp	r0, #0
 800c574:	f040 8295 	bne.w	800caa2 <_dtoa_r+0x97a>
 800c578:	4652      	mov	r2, sl
 800c57a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c57e:	4640      	mov	r0, r8
 800c580:	4649      	mov	r1, r9
 800c582:	f7f4 fabb 	bl	8000afc <__aeabi_dcmplt>
 800c586:	2800      	cmp	r0, #0
 800c588:	f040 8289 	bne.w	800ca9e <_dtoa_r+0x976>
 800c58c:	ec5b ab19 	vmov	sl, fp, d9
 800c590:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c592:	2b00      	cmp	r3, #0
 800c594:	f2c0 8148 	blt.w	800c828 <_dtoa_r+0x700>
 800c598:	9a00      	ldr	r2, [sp, #0]
 800c59a:	2a0e      	cmp	r2, #14
 800c59c:	f300 8144 	bgt.w	800c828 <_dtoa_r+0x700>
 800c5a0:	4b67      	ldr	r3, [pc, #412]	; (800c740 <_dtoa_r+0x618>)
 800c5a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	f280 80d5 	bge.w	800c75c <_dtoa_r+0x634>
 800c5b2:	9b03      	ldr	r3, [sp, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	f300 80d1 	bgt.w	800c75c <_dtoa_r+0x634>
 800c5ba:	f040 826f 	bne.w	800ca9c <_dtoa_r+0x974>
 800c5be:	4b65      	ldr	r3, [pc, #404]	; (800c754 <_dtoa_r+0x62c>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	4640      	mov	r0, r8
 800c5c4:	4649      	mov	r1, r9
 800c5c6:	f7f4 f827 	bl	8000618 <__aeabi_dmul>
 800c5ca:	4652      	mov	r2, sl
 800c5cc:	465b      	mov	r3, fp
 800c5ce:	f7f4 faa9 	bl	8000b24 <__aeabi_dcmpge>
 800c5d2:	9e03      	ldr	r6, [sp, #12]
 800c5d4:	4637      	mov	r7, r6
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	f040 8245 	bne.w	800ca66 <_dtoa_r+0x93e>
 800c5dc:	9d01      	ldr	r5, [sp, #4]
 800c5de:	2331      	movs	r3, #49	; 0x31
 800c5e0:	f805 3b01 	strb.w	r3, [r5], #1
 800c5e4:	9b00      	ldr	r3, [sp, #0]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	e240      	b.n	800ca6e <_dtoa_r+0x946>
 800c5ec:	07f2      	lsls	r2, r6, #31
 800c5ee:	d505      	bpl.n	800c5fc <_dtoa_r+0x4d4>
 800c5f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5f4:	f7f4 f810 	bl	8000618 <__aeabi_dmul>
 800c5f8:	3501      	adds	r5, #1
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	1076      	asrs	r6, r6, #1
 800c5fe:	3708      	adds	r7, #8
 800c600:	e777      	b.n	800c4f2 <_dtoa_r+0x3ca>
 800c602:	2502      	movs	r5, #2
 800c604:	e779      	b.n	800c4fa <_dtoa_r+0x3d2>
 800c606:	9f00      	ldr	r7, [sp, #0]
 800c608:	9e03      	ldr	r6, [sp, #12]
 800c60a:	e794      	b.n	800c536 <_dtoa_r+0x40e>
 800c60c:	9901      	ldr	r1, [sp, #4]
 800c60e:	4b4c      	ldr	r3, [pc, #304]	; (800c740 <_dtoa_r+0x618>)
 800c610:	4431      	add	r1, r6
 800c612:	910d      	str	r1, [sp, #52]	; 0x34
 800c614:	9908      	ldr	r1, [sp, #32]
 800c616:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c61a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c61e:	2900      	cmp	r1, #0
 800c620:	d043      	beq.n	800c6aa <_dtoa_r+0x582>
 800c622:	494d      	ldr	r1, [pc, #308]	; (800c758 <_dtoa_r+0x630>)
 800c624:	2000      	movs	r0, #0
 800c626:	f7f4 f921 	bl	800086c <__aeabi_ddiv>
 800c62a:	4652      	mov	r2, sl
 800c62c:	465b      	mov	r3, fp
 800c62e:	f7f3 fe3b 	bl	80002a8 <__aeabi_dsub>
 800c632:	9d01      	ldr	r5, [sp, #4]
 800c634:	4682      	mov	sl, r0
 800c636:	468b      	mov	fp, r1
 800c638:	4649      	mov	r1, r9
 800c63a:	4640      	mov	r0, r8
 800c63c:	f7f4 fa9c 	bl	8000b78 <__aeabi_d2iz>
 800c640:	4606      	mov	r6, r0
 800c642:	f7f3 ff7f 	bl	8000544 <__aeabi_i2d>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4640      	mov	r0, r8
 800c64c:	4649      	mov	r1, r9
 800c64e:	f7f3 fe2b 	bl	80002a8 <__aeabi_dsub>
 800c652:	3630      	adds	r6, #48	; 0x30
 800c654:	f805 6b01 	strb.w	r6, [r5], #1
 800c658:	4652      	mov	r2, sl
 800c65a:	465b      	mov	r3, fp
 800c65c:	4680      	mov	r8, r0
 800c65e:	4689      	mov	r9, r1
 800c660:	f7f4 fa4c 	bl	8000afc <__aeabi_dcmplt>
 800c664:	2800      	cmp	r0, #0
 800c666:	d163      	bne.n	800c730 <_dtoa_r+0x608>
 800c668:	4642      	mov	r2, r8
 800c66a:	464b      	mov	r3, r9
 800c66c:	4936      	ldr	r1, [pc, #216]	; (800c748 <_dtoa_r+0x620>)
 800c66e:	2000      	movs	r0, #0
 800c670:	f7f3 fe1a 	bl	80002a8 <__aeabi_dsub>
 800c674:	4652      	mov	r2, sl
 800c676:	465b      	mov	r3, fp
 800c678:	f7f4 fa40 	bl	8000afc <__aeabi_dcmplt>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	f040 80b5 	bne.w	800c7ec <_dtoa_r+0x6c4>
 800c682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c684:	429d      	cmp	r5, r3
 800c686:	d081      	beq.n	800c58c <_dtoa_r+0x464>
 800c688:	4b30      	ldr	r3, [pc, #192]	; (800c74c <_dtoa_r+0x624>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	4650      	mov	r0, sl
 800c68e:	4659      	mov	r1, fp
 800c690:	f7f3 ffc2 	bl	8000618 <__aeabi_dmul>
 800c694:	4b2d      	ldr	r3, [pc, #180]	; (800c74c <_dtoa_r+0x624>)
 800c696:	4682      	mov	sl, r0
 800c698:	468b      	mov	fp, r1
 800c69a:	4640      	mov	r0, r8
 800c69c:	4649      	mov	r1, r9
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f7f3 ffba 	bl	8000618 <__aeabi_dmul>
 800c6a4:	4680      	mov	r8, r0
 800c6a6:	4689      	mov	r9, r1
 800c6a8:	e7c6      	b.n	800c638 <_dtoa_r+0x510>
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	4659      	mov	r1, fp
 800c6ae:	f7f3 ffb3 	bl	8000618 <__aeabi_dmul>
 800c6b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6b4:	9d01      	ldr	r5, [sp, #4]
 800c6b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6b8:	4682      	mov	sl, r0
 800c6ba:	468b      	mov	fp, r1
 800c6bc:	4649      	mov	r1, r9
 800c6be:	4640      	mov	r0, r8
 800c6c0:	f7f4 fa5a 	bl	8000b78 <__aeabi_d2iz>
 800c6c4:	4606      	mov	r6, r0
 800c6c6:	f7f3 ff3d 	bl	8000544 <__aeabi_i2d>
 800c6ca:	3630      	adds	r6, #48	; 0x30
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	4649      	mov	r1, r9
 800c6d4:	f7f3 fde8 	bl	80002a8 <__aeabi_dsub>
 800c6d8:	f805 6b01 	strb.w	r6, [r5], #1
 800c6dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6de:	429d      	cmp	r5, r3
 800c6e0:	4680      	mov	r8, r0
 800c6e2:	4689      	mov	r9, r1
 800c6e4:	f04f 0200 	mov.w	r2, #0
 800c6e8:	d124      	bne.n	800c734 <_dtoa_r+0x60c>
 800c6ea:	4b1b      	ldr	r3, [pc, #108]	; (800c758 <_dtoa_r+0x630>)
 800c6ec:	4650      	mov	r0, sl
 800c6ee:	4659      	mov	r1, fp
 800c6f0:	f7f3 fddc 	bl	80002ac <__adddf3>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	f7f4 fa1c 	bl	8000b38 <__aeabi_dcmpgt>
 800c700:	2800      	cmp	r0, #0
 800c702:	d173      	bne.n	800c7ec <_dtoa_r+0x6c4>
 800c704:	4652      	mov	r2, sl
 800c706:	465b      	mov	r3, fp
 800c708:	4913      	ldr	r1, [pc, #76]	; (800c758 <_dtoa_r+0x630>)
 800c70a:	2000      	movs	r0, #0
 800c70c:	f7f3 fdcc 	bl	80002a8 <__aeabi_dsub>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	4640      	mov	r0, r8
 800c716:	4649      	mov	r1, r9
 800c718:	f7f4 f9f0 	bl	8000afc <__aeabi_dcmplt>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	f43f af35 	beq.w	800c58c <_dtoa_r+0x464>
 800c722:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c724:	1e6b      	subs	r3, r5, #1
 800c726:	930f      	str	r3, [sp, #60]	; 0x3c
 800c728:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c72c:	2b30      	cmp	r3, #48	; 0x30
 800c72e:	d0f8      	beq.n	800c722 <_dtoa_r+0x5fa>
 800c730:	9700      	str	r7, [sp, #0]
 800c732:	e049      	b.n	800c7c8 <_dtoa_r+0x6a0>
 800c734:	4b05      	ldr	r3, [pc, #20]	; (800c74c <_dtoa_r+0x624>)
 800c736:	f7f3 ff6f 	bl	8000618 <__aeabi_dmul>
 800c73a:	4680      	mov	r8, r0
 800c73c:	4689      	mov	r9, r1
 800c73e:	e7bd      	b.n	800c6bc <_dtoa_r+0x594>
 800c740:	080111f0 	.word	0x080111f0
 800c744:	080111c8 	.word	0x080111c8
 800c748:	3ff00000 	.word	0x3ff00000
 800c74c:	40240000 	.word	0x40240000
 800c750:	401c0000 	.word	0x401c0000
 800c754:	40140000 	.word	0x40140000
 800c758:	3fe00000 	.word	0x3fe00000
 800c75c:	9d01      	ldr	r5, [sp, #4]
 800c75e:	4656      	mov	r6, sl
 800c760:	465f      	mov	r7, fp
 800c762:	4642      	mov	r2, r8
 800c764:	464b      	mov	r3, r9
 800c766:	4630      	mov	r0, r6
 800c768:	4639      	mov	r1, r7
 800c76a:	f7f4 f87f 	bl	800086c <__aeabi_ddiv>
 800c76e:	f7f4 fa03 	bl	8000b78 <__aeabi_d2iz>
 800c772:	4682      	mov	sl, r0
 800c774:	f7f3 fee6 	bl	8000544 <__aeabi_i2d>
 800c778:	4642      	mov	r2, r8
 800c77a:	464b      	mov	r3, r9
 800c77c:	f7f3 ff4c 	bl	8000618 <__aeabi_dmul>
 800c780:	4602      	mov	r2, r0
 800c782:	460b      	mov	r3, r1
 800c784:	4630      	mov	r0, r6
 800c786:	4639      	mov	r1, r7
 800c788:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c78c:	f7f3 fd8c 	bl	80002a8 <__aeabi_dsub>
 800c790:	f805 6b01 	strb.w	r6, [r5], #1
 800c794:	9e01      	ldr	r6, [sp, #4]
 800c796:	9f03      	ldr	r7, [sp, #12]
 800c798:	1bae      	subs	r6, r5, r6
 800c79a:	42b7      	cmp	r7, r6
 800c79c:	4602      	mov	r2, r0
 800c79e:	460b      	mov	r3, r1
 800c7a0:	d135      	bne.n	800c80e <_dtoa_r+0x6e6>
 800c7a2:	f7f3 fd83 	bl	80002ac <__adddf3>
 800c7a6:	4642      	mov	r2, r8
 800c7a8:	464b      	mov	r3, r9
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	460f      	mov	r7, r1
 800c7ae:	f7f4 f9c3 	bl	8000b38 <__aeabi_dcmpgt>
 800c7b2:	b9d0      	cbnz	r0, 800c7ea <_dtoa_r+0x6c2>
 800c7b4:	4642      	mov	r2, r8
 800c7b6:	464b      	mov	r3, r9
 800c7b8:	4630      	mov	r0, r6
 800c7ba:	4639      	mov	r1, r7
 800c7bc:	f7f4 f994 	bl	8000ae8 <__aeabi_dcmpeq>
 800c7c0:	b110      	cbz	r0, 800c7c8 <_dtoa_r+0x6a0>
 800c7c2:	f01a 0f01 	tst.w	sl, #1
 800c7c6:	d110      	bne.n	800c7ea <_dtoa_r+0x6c2>
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	ee18 1a10 	vmov	r1, s16
 800c7ce:	f000 ff47 	bl	800d660 <_Bfree>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	9800      	ldr	r0, [sp, #0]
 800c7d6:	702b      	strb	r3, [r5, #0]
 800c7d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7da:	3001      	adds	r0, #1
 800c7dc:	6018      	str	r0, [r3, #0]
 800c7de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	f43f acf1 	beq.w	800c1c8 <_dtoa_r+0xa0>
 800c7e6:	601d      	str	r5, [r3, #0]
 800c7e8:	e4ee      	b.n	800c1c8 <_dtoa_r+0xa0>
 800c7ea:	9f00      	ldr	r7, [sp, #0]
 800c7ec:	462b      	mov	r3, r5
 800c7ee:	461d      	mov	r5, r3
 800c7f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7f4:	2a39      	cmp	r2, #57	; 0x39
 800c7f6:	d106      	bne.n	800c806 <_dtoa_r+0x6de>
 800c7f8:	9a01      	ldr	r2, [sp, #4]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d1f7      	bne.n	800c7ee <_dtoa_r+0x6c6>
 800c7fe:	9901      	ldr	r1, [sp, #4]
 800c800:	2230      	movs	r2, #48	; 0x30
 800c802:	3701      	adds	r7, #1
 800c804:	700a      	strb	r2, [r1, #0]
 800c806:	781a      	ldrb	r2, [r3, #0]
 800c808:	3201      	adds	r2, #1
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	e790      	b.n	800c730 <_dtoa_r+0x608>
 800c80e:	4ba6      	ldr	r3, [pc, #664]	; (800caa8 <_dtoa_r+0x980>)
 800c810:	2200      	movs	r2, #0
 800c812:	f7f3 ff01 	bl	8000618 <__aeabi_dmul>
 800c816:	2200      	movs	r2, #0
 800c818:	2300      	movs	r3, #0
 800c81a:	4606      	mov	r6, r0
 800c81c:	460f      	mov	r7, r1
 800c81e:	f7f4 f963 	bl	8000ae8 <__aeabi_dcmpeq>
 800c822:	2800      	cmp	r0, #0
 800c824:	d09d      	beq.n	800c762 <_dtoa_r+0x63a>
 800c826:	e7cf      	b.n	800c7c8 <_dtoa_r+0x6a0>
 800c828:	9a08      	ldr	r2, [sp, #32]
 800c82a:	2a00      	cmp	r2, #0
 800c82c:	f000 80d7 	beq.w	800c9de <_dtoa_r+0x8b6>
 800c830:	9a06      	ldr	r2, [sp, #24]
 800c832:	2a01      	cmp	r2, #1
 800c834:	f300 80ba 	bgt.w	800c9ac <_dtoa_r+0x884>
 800c838:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c83a:	2a00      	cmp	r2, #0
 800c83c:	f000 80b2 	beq.w	800c9a4 <_dtoa_r+0x87c>
 800c840:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c844:	9e07      	ldr	r6, [sp, #28]
 800c846:	9d04      	ldr	r5, [sp, #16]
 800c848:	9a04      	ldr	r2, [sp, #16]
 800c84a:	441a      	add	r2, r3
 800c84c:	9204      	str	r2, [sp, #16]
 800c84e:	9a05      	ldr	r2, [sp, #20]
 800c850:	2101      	movs	r1, #1
 800c852:	441a      	add	r2, r3
 800c854:	4620      	mov	r0, r4
 800c856:	9205      	str	r2, [sp, #20]
 800c858:	f001 f804 	bl	800d864 <__i2b>
 800c85c:	4607      	mov	r7, r0
 800c85e:	2d00      	cmp	r5, #0
 800c860:	dd0c      	ble.n	800c87c <_dtoa_r+0x754>
 800c862:	9b05      	ldr	r3, [sp, #20]
 800c864:	2b00      	cmp	r3, #0
 800c866:	dd09      	ble.n	800c87c <_dtoa_r+0x754>
 800c868:	42ab      	cmp	r3, r5
 800c86a:	9a04      	ldr	r2, [sp, #16]
 800c86c:	bfa8      	it	ge
 800c86e:	462b      	movge	r3, r5
 800c870:	1ad2      	subs	r2, r2, r3
 800c872:	9204      	str	r2, [sp, #16]
 800c874:	9a05      	ldr	r2, [sp, #20]
 800c876:	1aed      	subs	r5, r5, r3
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	9305      	str	r3, [sp, #20]
 800c87c:	9b07      	ldr	r3, [sp, #28]
 800c87e:	b31b      	cbz	r3, 800c8c8 <_dtoa_r+0x7a0>
 800c880:	9b08      	ldr	r3, [sp, #32]
 800c882:	2b00      	cmp	r3, #0
 800c884:	f000 80af 	beq.w	800c9e6 <_dtoa_r+0x8be>
 800c888:	2e00      	cmp	r6, #0
 800c88a:	dd13      	ble.n	800c8b4 <_dtoa_r+0x78c>
 800c88c:	4639      	mov	r1, r7
 800c88e:	4632      	mov	r2, r6
 800c890:	4620      	mov	r0, r4
 800c892:	f001 f8a7 	bl	800d9e4 <__pow5mult>
 800c896:	ee18 2a10 	vmov	r2, s16
 800c89a:	4601      	mov	r1, r0
 800c89c:	4607      	mov	r7, r0
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f000 fff6 	bl	800d890 <__multiply>
 800c8a4:	ee18 1a10 	vmov	r1, s16
 800c8a8:	4680      	mov	r8, r0
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f000 fed8 	bl	800d660 <_Bfree>
 800c8b0:	ee08 8a10 	vmov	s16, r8
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	1b9a      	subs	r2, r3, r6
 800c8b8:	d006      	beq.n	800c8c8 <_dtoa_r+0x7a0>
 800c8ba:	ee18 1a10 	vmov	r1, s16
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f001 f890 	bl	800d9e4 <__pow5mult>
 800c8c4:	ee08 0a10 	vmov	s16, r0
 800c8c8:	2101      	movs	r1, #1
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f000 ffca 	bl	800d864 <__i2b>
 800c8d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	4606      	mov	r6, r0
 800c8d6:	f340 8088 	ble.w	800c9ea <_dtoa_r+0x8c2>
 800c8da:	461a      	mov	r2, r3
 800c8dc:	4601      	mov	r1, r0
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f001 f880 	bl	800d9e4 <__pow5mult>
 800c8e4:	9b06      	ldr	r3, [sp, #24]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	4606      	mov	r6, r0
 800c8ea:	f340 8081 	ble.w	800c9f0 <_dtoa_r+0x8c8>
 800c8ee:	f04f 0800 	mov.w	r8, #0
 800c8f2:	6933      	ldr	r3, [r6, #16]
 800c8f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c8f8:	6918      	ldr	r0, [r3, #16]
 800c8fa:	f000 ff63 	bl	800d7c4 <__hi0bits>
 800c8fe:	f1c0 0020 	rsb	r0, r0, #32
 800c902:	9b05      	ldr	r3, [sp, #20]
 800c904:	4418      	add	r0, r3
 800c906:	f010 001f 	ands.w	r0, r0, #31
 800c90a:	f000 8092 	beq.w	800ca32 <_dtoa_r+0x90a>
 800c90e:	f1c0 0320 	rsb	r3, r0, #32
 800c912:	2b04      	cmp	r3, #4
 800c914:	f340 808a 	ble.w	800ca2c <_dtoa_r+0x904>
 800c918:	f1c0 001c 	rsb	r0, r0, #28
 800c91c:	9b04      	ldr	r3, [sp, #16]
 800c91e:	4403      	add	r3, r0
 800c920:	9304      	str	r3, [sp, #16]
 800c922:	9b05      	ldr	r3, [sp, #20]
 800c924:	4403      	add	r3, r0
 800c926:	4405      	add	r5, r0
 800c928:	9305      	str	r3, [sp, #20]
 800c92a:	9b04      	ldr	r3, [sp, #16]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dd07      	ble.n	800c940 <_dtoa_r+0x818>
 800c930:	ee18 1a10 	vmov	r1, s16
 800c934:	461a      	mov	r2, r3
 800c936:	4620      	mov	r0, r4
 800c938:	f001 f8ae 	bl	800da98 <__lshift>
 800c93c:	ee08 0a10 	vmov	s16, r0
 800c940:	9b05      	ldr	r3, [sp, #20]
 800c942:	2b00      	cmp	r3, #0
 800c944:	dd05      	ble.n	800c952 <_dtoa_r+0x82a>
 800c946:	4631      	mov	r1, r6
 800c948:	461a      	mov	r2, r3
 800c94a:	4620      	mov	r0, r4
 800c94c:	f001 f8a4 	bl	800da98 <__lshift>
 800c950:	4606      	mov	r6, r0
 800c952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c954:	2b00      	cmp	r3, #0
 800c956:	d06e      	beq.n	800ca36 <_dtoa_r+0x90e>
 800c958:	ee18 0a10 	vmov	r0, s16
 800c95c:	4631      	mov	r1, r6
 800c95e:	f001 f90b 	bl	800db78 <__mcmp>
 800c962:	2800      	cmp	r0, #0
 800c964:	da67      	bge.n	800ca36 <_dtoa_r+0x90e>
 800c966:	9b00      	ldr	r3, [sp, #0]
 800c968:	3b01      	subs	r3, #1
 800c96a:	ee18 1a10 	vmov	r1, s16
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	220a      	movs	r2, #10
 800c972:	2300      	movs	r3, #0
 800c974:	4620      	mov	r0, r4
 800c976:	f000 fe95 	bl	800d6a4 <__multadd>
 800c97a:	9b08      	ldr	r3, [sp, #32]
 800c97c:	ee08 0a10 	vmov	s16, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	f000 81b1 	beq.w	800cce8 <_dtoa_r+0xbc0>
 800c986:	2300      	movs	r3, #0
 800c988:	4639      	mov	r1, r7
 800c98a:	220a      	movs	r2, #10
 800c98c:	4620      	mov	r0, r4
 800c98e:	f000 fe89 	bl	800d6a4 <__multadd>
 800c992:	9b02      	ldr	r3, [sp, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	4607      	mov	r7, r0
 800c998:	f300 808e 	bgt.w	800cab8 <_dtoa_r+0x990>
 800c99c:	9b06      	ldr	r3, [sp, #24]
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	dc51      	bgt.n	800ca46 <_dtoa_r+0x91e>
 800c9a2:	e089      	b.n	800cab8 <_dtoa_r+0x990>
 800c9a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c9a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c9aa:	e74b      	b.n	800c844 <_dtoa_r+0x71c>
 800c9ac:	9b03      	ldr	r3, [sp, #12]
 800c9ae:	1e5e      	subs	r6, r3, #1
 800c9b0:	9b07      	ldr	r3, [sp, #28]
 800c9b2:	42b3      	cmp	r3, r6
 800c9b4:	bfbf      	itttt	lt
 800c9b6:	9b07      	ldrlt	r3, [sp, #28]
 800c9b8:	9607      	strlt	r6, [sp, #28]
 800c9ba:	1af2      	sublt	r2, r6, r3
 800c9bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c9be:	bfb6      	itet	lt
 800c9c0:	189b      	addlt	r3, r3, r2
 800c9c2:	1b9e      	subge	r6, r3, r6
 800c9c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c9c6:	9b03      	ldr	r3, [sp, #12]
 800c9c8:	bfb8      	it	lt
 800c9ca:	2600      	movlt	r6, #0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	bfb7      	itett	lt
 800c9d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c9d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c9d8:	1a9d      	sublt	r5, r3, r2
 800c9da:	2300      	movlt	r3, #0
 800c9dc:	e734      	b.n	800c848 <_dtoa_r+0x720>
 800c9de:	9e07      	ldr	r6, [sp, #28]
 800c9e0:	9d04      	ldr	r5, [sp, #16]
 800c9e2:	9f08      	ldr	r7, [sp, #32]
 800c9e4:	e73b      	b.n	800c85e <_dtoa_r+0x736>
 800c9e6:	9a07      	ldr	r2, [sp, #28]
 800c9e8:	e767      	b.n	800c8ba <_dtoa_r+0x792>
 800c9ea:	9b06      	ldr	r3, [sp, #24]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	dc18      	bgt.n	800ca22 <_dtoa_r+0x8fa>
 800c9f0:	f1ba 0f00 	cmp.w	sl, #0
 800c9f4:	d115      	bne.n	800ca22 <_dtoa_r+0x8fa>
 800c9f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9fa:	b993      	cbnz	r3, 800ca22 <_dtoa_r+0x8fa>
 800c9fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca00:	0d1b      	lsrs	r3, r3, #20
 800ca02:	051b      	lsls	r3, r3, #20
 800ca04:	b183      	cbz	r3, 800ca28 <_dtoa_r+0x900>
 800ca06:	9b04      	ldr	r3, [sp, #16]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	9304      	str	r3, [sp, #16]
 800ca0c:	9b05      	ldr	r3, [sp, #20]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	9305      	str	r3, [sp, #20]
 800ca12:	f04f 0801 	mov.w	r8, #1
 800ca16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f47f af6a 	bne.w	800c8f2 <_dtoa_r+0x7ca>
 800ca1e:	2001      	movs	r0, #1
 800ca20:	e76f      	b.n	800c902 <_dtoa_r+0x7da>
 800ca22:	f04f 0800 	mov.w	r8, #0
 800ca26:	e7f6      	b.n	800ca16 <_dtoa_r+0x8ee>
 800ca28:	4698      	mov	r8, r3
 800ca2a:	e7f4      	b.n	800ca16 <_dtoa_r+0x8ee>
 800ca2c:	f43f af7d 	beq.w	800c92a <_dtoa_r+0x802>
 800ca30:	4618      	mov	r0, r3
 800ca32:	301c      	adds	r0, #28
 800ca34:	e772      	b.n	800c91c <_dtoa_r+0x7f4>
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dc37      	bgt.n	800caac <_dtoa_r+0x984>
 800ca3c:	9b06      	ldr	r3, [sp, #24]
 800ca3e:	2b02      	cmp	r3, #2
 800ca40:	dd34      	ble.n	800caac <_dtoa_r+0x984>
 800ca42:	9b03      	ldr	r3, [sp, #12]
 800ca44:	9302      	str	r3, [sp, #8]
 800ca46:	9b02      	ldr	r3, [sp, #8]
 800ca48:	b96b      	cbnz	r3, 800ca66 <_dtoa_r+0x93e>
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	2205      	movs	r2, #5
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 fe28 	bl	800d6a4 <__multadd>
 800ca54:	4601      	mov	r1, r0
 800ca56:	4606      	mov	r6, r0
 800ca58:	ee18 0a10 	vmov	r0, s16
 800ca5c:	f001 f88c 	bl	800db78 <__mcmp>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	f73f adbb 	bgt.w	800c5dc <_dtoa_r+0x4b4>
 800ca66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca68:	9d01      	ldr	r5, [sp, #4]
 800ca6a:	43db      	mvns	r3, r3
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	f04f 0800 	mov.w	r8, #0
 800ca72:	4631      	mov	r1, r6
 800ca74:	4620      	mov	r0, r4
 800ca76:	f000 fdf3 	bl	800d660 <_Bfree>
 800ca7a:	2f00      	cmp	r7, #0
 800ca7c:	f43f aea4 	beq.w	800c7c8 <_dtoa_r+0x6a0>
 800ca80:	f1b8 0f00 	cmp.w	r8, #0
 800ca84:	d005      	beq.n	800ca92 <_dtoa_r+0x96a>
 800ca86:	45b8      	cmp	r8, r7
 800ca88:	d003      	beq.n	800ca92 <_dtoa_r+0x96a>
 800ca8a:	4641      	mov	r1, r8
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f000 fde7 	bl	800d660 <_Bfree>
 800ca92:	4639      	mov	r1, r7
 800ca94:	4620      	mov	r0, r4
 800ca96:	f000 fde3 	bl	800d660 <_Bfree>
 800ca9a:	e695      	b.n	800c7c8 <_dtoa_r+0x6a0>
 800ca9c:	2600      	movs	r6, #0
 800ca9e:	4637      	mov	r7, r6
 800caa0:	e7e1      	b.n	800ca66 <_dtoa_r+0x93e>
 800caa2:	9700      	str	r7, [sp, #0]
 800caa4:	4637      	mov	r7, r6
 800caa6:	e599      	b.n	800c5dc <_dtoa_r+0x4b4>
 800caa8:	40240000 	.word	0x40240000
 800caac:	9b08      	ldr	r3, [sp, #32]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	f000 80ca 	beq.w	800cc48 <_dtoa_r+0xb20>
 800cab4:	9b03      	ldr	r3, [sp, #12]
 800cab6:	9302      	str	r3, [sp, #8]
 800cab8:	2d00      	cmp	r5, #0
 800caba:	dd05      	ble.n	800cac8 <_dtoa_r+0x9a0>
 800cabc:	4639      	mov	r1, r7
 800cabe:	462a      	mov	r2, r5
 800cac0:	4620      	mov	r0, r4
 800cac2:	f000 ffe9 	bl	800da98 <__lshift>
 800cac6:	4607      	mov	r7, r0
 800cac8:	f1b8 0f00 	cmp.w	r8, #0
 800cacc:	d05b      	beq.n	800cb86 <_dtoa_r+0xa5e>
 800cace:	6879      	ldr	r1, [r7, #4]
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 fd85 	bl	800d5e0 <_Balloc>
 800cad6:	4605      	mov	r5, r0
 800cad8:	b928      	cbnz	r0, 800cae6 <_dtoa_r+0x9be>
 800cada:	4b87      	ldr	r3, [pc, #540]	; (800ccf8 <_dtoa_r+0xbd0>)
 800cadc:	4602      	mov	r2, r0
 800cade:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cae2:	f7ff bb3b 	b.w	800c15c <_dtoa_r+0x34>
 800cae6:	693a      	ldr	r2, [r7, #16]
 800cae8:	3202      	adds	r2, #2
 800caea:	0092      	lsls	r2, r2, #2
 800caec:	f107 010c 	add.w	r1, r7, #12
 800caf0:	300c      	adds	r0, #12
 800caf2:	f7fd fac6 	bl	800a082 <memcpy>
 800caf6:	2201      	movs	r2, #1
 800caf8:	4629      	mov	r1, r5
 800cafa:	4620      	mov	r0, r4
 800cafc:	f000 ffcc 	bl	800da98 <__lshift>
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	f103 0901 	add.w	r9, r3, #1
 800cb06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	9305      	str	r3, [sp, #20]
 800cb0e:	f00a 0301 	and.w	r3, sl, #1
 800cb12:	46b8      	mov	r8, r7
 800cb14:	9304      	str	r3, [sp, #16]
 800cb16:	4607      	mov	r7, r0
 800cb18:	4631      	mov	r1, r6
 800cb1a:	ee18 0a10 	vmov	r0, s16
 800cb1e:	f7ff fa77 	bl	800c010 <quorem>
 800cb22:	4641      	mov	r1, r8
 800cb24:	9002      	str	r0, [sp, #8]
 800cb26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cb2a:	ee18 0a10 	vmov	r0, s16
 800cb2e:	f001 f823 	bl	800db78 <__mcmp>
 800cb32:	463a      	mov	r2, r7
 800cb34:	9003      	str	r0, [sp, #12]
 800cb36:	4631      	mov	r1, r6
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f001 f839 	bl	800dbb0 <__mdiff>
 800cb3e:	68c2      	ldr	r2, [r0, #12]
 800cb40:	f109 3bff 	add.w	fp, r9, #4294967295
 800cb44:	4605      	mov	r5, r0
 800cb46:	bb02      	cbnz	r2, 800cb8a <_dtoa_r+0xa62>
 800cb48:	4601      	mov	r1, r0
 800cb4a:	ee18 0a10 	vmov	r0, s16
 800cb4e:	f001 f813 	bl	800db78 <__mcmp>
 800cb52:	4602      	mov	r2, r0
 800cb54:	4629      	mov	r1, r5
 800cb56:	4620      	mov	r0, r4
 800cb58:	9207      	str	r2, [sp, #28]
 800cb5a:	f000 fd81 	bl	800d660 <_Bfree>
 800cb5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cb62:	ea43 0102 	orr.w	r1, r3, r2
 800cb66:	9b04      	ldr	r3, [sp, #16]
 800cb68:	430b      	orrs	r3, r1
 800cb6a:	464d      	mov	r5, r9
 800cb6c:	d10f      	bne.n	800cb8e <_dtoa_r+0xa66>
 800cb6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb72:	d02a      	beq.n	800cbca <_dtoa_r+0xaa2>
 800cb74:	9b03      	ldr	r3, [sp, #12]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	dd02      	ble.n	800cb80 <_dtoa_r+0xa58>
 800cb7a:	9b02      	ldr	r3, [sp, #8]
 800cb7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cb80:	f88b a000 	strb.w	sl, [fp]
 800cb84:	e775      	b.n	800ca72 <_dtoa_r+0x94a>
 800cb86:	4638      	mov	r0, r7
 800cb88:	e7ba      	b.n	800cb00 <_dtoa_r+0x9d8>
 800cb8a:	2201      	movs	r2, #1
 800cb8c:	e7e2      	b.n	800cb54 <_dtoa_r+0xa2c>
 800cb8e:	9b03      	ldr	r3, [sp, #12]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	db04      	blt.n	800cb9e <_dtoa_r+0xa76>
 800cb94:	9906      	ldr	r1, [sp, #24]
 800cb96:	430b      	orrs	r3, r1
 800cb98:	9904      	ldr	r1, [sp, #16]
 800cb9a:	430b      	orrs	r3, r1
 800cb9c:	d122      	bne.n	800cbe4 <_dtoa_r+0xabc>
 800cb9e:	2a00      	cmp	r2, #0
 800cba0:	ddee      	ble.n	800cb80 <_dtoa_r+0xa58>
 800cba2:	ee18 1a10 	vmov	r1, s16
 800cba6:	2201      	movs	r2, #1
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f000 ff75 	bl	800da98 <__lshift>
 800cbae:	4631      	mov	r1, r6
 800cbb0:	ee08 0a10 	vmov	s16, r0
 800cbb4:	f000 ffe0 	bl	800db78 <__mcmp>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	dc03      	bgt.n	800cbc4 <_dtoa_r+0xa9c>
 800cbbc:	d1e0      	bne.n	800cb80 <_dtoa_r+0xa58>
 800cbbe:	f01a 0f01 	tst.w	sl, #1
 800cbc2:	d0dd      	beq.n	800cb80 <_dtoa_r+0xa58>
 800cbc4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cbc8:	d1d7      	bne.n	800cb7a <_dtoa_r+0xa52>
 800cbca:	2339      	movs	r3, #57	; 0x39
 800cbcc:	f88b 3000 	strb.w	r3, [fp]
 800cbd0:	462b      	mov	r3, r5
 800cbd2:	461d      	mov	r5, r3
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cbda:	2a39      	cmp	r2, #57	; 0x39
 800cbdc:	d071      	beq.n	800ccc2 <_dtoa_r+0xb9a>
 800cbde:	3201      	adds	r2, #1
 800cbe0:	701a      	strb	r2, [r3, #0]
 800cbe2:	e746      	b.n	800ca72 <_dtoa_r+0x94a>
 800cbe4:	2a00      	cmp	r2, #0
 800cbe6:	dd07      	ble.n	800cbf8 <_dtoa_r+0xad0>
 800cbe8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cbec:	d0ed      	beq.n	800cbca <_dtoa_r+0xaa2>
 800cbee:	f10a 0301 	add.w	r3, sl, #1
 800cbf2:	f88b 3000 	strb.w	r3, [fp]
 800cbf6:	e73c      	b.n	800ca72 <_dtoa_r+0x94a>
 800cbf8:	9b05      	ldr	r3, [sp, #20]
 800cbfa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cbfe:	4599      	cmp	r9, r3
 800cc00:	d047      	beq.n	800cc92 <_dtoa_r+0xb6a>
 800cc02:	ee18 1a10 	vmov	r1, s16
 800cc06:	2300      	movs	r3, #0
 800cc08:	220a      	movs	r2, #10
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f000 fd4a 	bl	800d6a4 <__multadd>
 800cc10:	45b8      	cmp	r8, r7
 800cc12:	ee08 0a10 	vmov	s16, r0
 800cc16:	f04f 0300 	mov.w	r3, #0
 800cc1a:	f04f 020a 	mov.w	r2, #10
 800cc1e:	4641      	mov	r1, r8
 800cc20:	4620      	mov	r0, r4
 800cc22:	d106      	bne.n	800cc32 <_dtoa_r+0xb0a>
 800cc24:	f000 fd3e 	bl	800d6a4 <__multadd>
 800cc28:	4680      	mov	r8, r0
 800cc2a:	4607      	mov	r7, r0
 800cc2c:	f109 0901 	add.w	r9, r9, #1
 800cc30:	e772      	b.n	800cb18 <_dtoa_r+0x9f0>
 800cc32:	f000 fd37 	bl	800d6a4 <__multadd>
 800cc36:	4639      	mov	r1, r7
 800cc38:	4680      	mov	r8, r0
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	220a      	movs	r2, #10
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f000 fd30 	bl	800d6a4 <__multadd>
 800cc44:	4607      	mov	r7, r0
 800cc46:	e7f1      	b.n	800cc2c <_dtoa_r+0xb04>
 800cc48:	9b03      	ldr	r3, [sp, #12]
 800cc4a:	9302      	str	r3, [sp, #8]
 800cc4c:	9d01      	ldr	r5, [sp, #4]
 800cc4e:	ee18 0a10 	vmov	r0, s16
 800cc52:	4631      	mov	r1, r6
 800cc54:	f7ff f9dc 	bl	800c010 <quorem>
 800cc58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cc5c:	9b01      	ldr	r3, [sp, #4]
 800cc5e:	f805 ab01 	strb.w	sl, [r5], #1
 800cc62:	1aea      	subs	r2, r5, r3
 800cc64:	9b02      	ldr	r3, [sp, #8]
 800cc66:	4293      	cmp	r3, r2
 800cc68:	dd09      	ble.n	800cc7e <_dtoa_r+0xb56>
 800cc6a:	ee18 1a10 	vmov	r1, s16
 800cc6e:	2300      	movs	r3, #0
 800cc70:	220a      	movs	r2, #10
 800cc72:	4620      	mov	r0, r4
 800cc74:	f000 fd16 	bl	800d6a4 <__multadd>
 800cc78:	ee08 0a10 	vmov	s16, r0
 800cc7c:	e7e7      	b.n	800cc4e <_dtoa_r+0xb26>
 800cc7e:	9b02      	ldr	r3, [sp, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	bfc8      	it	gt
 800cc84:	461d      	movgt	r5, r3
 800cc86:	9b01      	ldr	r3, [sp, #4]
 800cc88:	bfd8      	it	le
 800cc8a:	2501      	movle	r5, #1
 800cc8c:	441d      	add	r5, r3
 800cc8e:	f04f 0800 	mov.w	r8, #0
 800cc92:	ee18 1a10 	vmov	r1, s16
 800cc96:	2201      	movs	r2, #1
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f000 fefd 	bl	800da98 <__lshift>
 800cc9e:	4631      	mov	r1, r6
 800cca0:	ee08 0a10 	vmov	s16, r0
 800cca4:	f000 ff68 	bl	800db78 <__mcmp>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	dc91      	bgt.n	800cbd0 <_dtoa_r+0xaa8>
 800ccac:	d102      	bne.n	800ccb4 <_dtoa_r+0xb8c>
 800ccae:	f01a 0f01 	tst.w	sl, #1
 800ccb2:	d18d      	bne.n	800cbd0 <_dtoa_r+0xaa8>
 800ccb4:	462b      	mov	r3, r5
 800ccb6:	461d      	mov	r5, r3
 800ccb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccbc:	2a30      	cmp	r2, #48	; 0x30
 800ccbe:	d0fa      	beq.n	800ccb6 <_dtoa_r+0xb8e>
 800ccc0:	e6d7      	b.n	800ca72 <_dtoa_r+0x94a>
 800ccc2:	9a01      	ldr	r2, [sp, #4]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d184      	bne.n	800cbd2 <_dtoa_r+0xaaa>
 800ccc8:	9b00      	ldr	r3, [sp, #0]
 800ccca:	3301      	adds	r3, #1
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	2331      	movs	r3, #49	; 0x31
 800ccd0:	7013      	strb	r3, [r2, #0]
 800ccd2:	e6ce      	b.n	800ca72 <_dtoa_r+0x94a>
 800ccd4:	4b09      	ldr	r3, [pc, #36]	; (800ccfc <_dtoa_r+0xbd4>)
 800ccd6:	f7ff ba95 	b.w	800c204 <_dtoa_r+0xdc>
 800ccda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	f47f aa6e 	bne.w	800c1be <_dtoa_r+0x96>
 800cce2:	4b07      	ldr	r3, [pc, #28]	; (800cd00 <_dtoa_r+0xbd8>)
 800cce4:	f7ff ba8e 	b.w	800c204 <_dtoa_r+0xdc>
 800cce8:	9b02      	ldr	r3, [sp, #8]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	dcae      	bgt.n	800cc4c <_dtoa_r+0xb24>
 800ccee:	9b06      	ldr	r3, [sp, #24]
 800ccf0:	2b02      	cmp	r3, #2
 800ccf2:	f73f aea8 	bgt.w	800ca46 <_dtoa_r+0x91e>
 800ccf6:	e7a9      	b.n	800cc4c <_dtoa_r+0xb24>
 800ccf8:	080110e0 	.word	0x080110e0
 800ccfc:	080112d9 	.word	0x080112d9
 800cd00:	08011061 	.word	0x08011061

0800cd04 <__sflush_r>:
 800cd04:	898a      	ldrh	r2, [r1, #12]
 800cd06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	0710      	lsls	r0, r2, #28
 800cd0e:	460c      	mov	r4, r1
 800cd10:	d458      	bmi.n	800cdc4 <__sflush_r+0xc0>
 800cd12:	684b      	ldr	r3, [r1, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	dc05      	bgt.n	800cd24 <__sflush_r+0x20>
 800cd18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	dc02      	bgt.n	800cd24 <__sflush_r+0x20>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd26:	2e00      	cmp	r6, #0
 800cd28:	d0f9      	beq.n	800cd1e <__sflush_r+0x1a>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd30:	682f      	ldr	r7, [r5, #0]
 800cd32:	602b      	str	r3, [r5, #0]
 800cd34:	d032      	beq.n	800cd9c <__sflush_r+0x98>
 800cd36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd38:	89a3      	ldrh	r3, [r4, #12]
 800cd3a:	075a      	lsls	r2, r3, #29
 800cd3c:	d505      	bpl.n	800cd4a <__sflush_r+0x46>
 800cd3e:	6863      	ldr	r3, [r4, #4]
 800cd40:	1ac0      	subs	r0, r0, r3
 800cd42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd44:	b10b      	cbz	r3, 800cd4a <__sflush_r+0x46>
 800cd46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd48:	1ac0      	subs	r0, r0, r3
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd50:	6a21      	ldr	r1, [r4, #32]
 800cd52:	4628      	mov	r0, r5
 800cd54:	47b0      	blx	r6
 800cd56:	1c43      	adds	r3, r0, #1
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	d106      	bne.n	800cd6a <__sflush_r+0x66>
 800cd5c:	6829      	ldr	r1, [r5, #0]
 800cd5e:	291d      	cmp	r1, #29
 800cd60:	d82c      	bhi.n	800cdbc <__sflush_r+0xb8>
 800cd62:	4a2a      	ldr	r2, [pc, #168]	; (800ce0c <__sflush_r+0x108>)
 800cd64:	40ca      	lsrs	r2, r1
 800cd66:	07d6      	lsls	r6, r2, #31
 800cd68:	d528      	bpl.n	800cdbc <__sflush_r+0xb8>
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	6062      	str	r2, [r4, #4]
 800cd6e:	04d9      	lsls	r1, r3, #19
 800cd70:	6922      	ldr	r2, [r4, #16]
 800cd72:	6022      	str	r2, [r4, #0]
 800cd74:	d504      	bpl.n	800cd80 <__sflush_r+0x7c>
 800cd76:	1c42      	adds	r2, r0, #1
 800cd78:	d101      	bne.n	800cd7e <__sflush_r+0x7a>
 800cd7a:	682b      	ldr	r3, [r5, #0]
 800cd7c:	b903      	cbnz	r3, 800cd80 <__sflush_r+0x7c>
 800cd7e:	6560      	str	r0, [r4, #84]	; 0x54
 800cd80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd82:	602f      	str	r7, [r5, #0]
 800cd84:	2900      	cmp	r1, #0
 800cd86:	d0ca      	beq.n	800cd1e <__sflush_r+0x1a>
 800cd88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd8c:	4299      	cmp	r1, r3
 800cd8e:	d002      	beq.n	800cd96 <__sflush_r+0x92>
 800cd90:	4628      	mov	r0, r5
 800cd92:	f001 f8fd 	bl	800df90 <_free_r>
 800cd96:	2000      	movs	r0, #0
 800cd98:	6360      	str	r0, [r4, #52]	; 0x34
 800cd9a:	e7c1      	b.n	800cd20 <__sflush_r+0x1c>
 800cd9c:	6a21      	ldr	r1, [r4, #32]
 800cd9e:	2301      	movs	r3, #1
 800cda0:	4628      	mov	r0, r5
 800cda2:	47b0      	blx	r6
 800cda4:	1c41      	adds	r1, r0, #1
 800cda6:	d1c7      	bne.n	800cd38 <__sflush_r+0x34>
 800cda8:	682b      	ldr	r3, [r5, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d0c4      	beq.n	800cd38 <__sflush_r+0x34>
 800cdae:	2b1d      	cmp	r3, #29
 800cdb0:	d001      	beq.n	800cdb6 <__sflush_r+0xb2>
 800cdb2:	2b16      	cmp	r3, #22
 800cdb4:	d101      	bne.n	800cdba <__sflush_r+0xb6>
 800cdb6:	602f      	str	r7, [r5, #0]
 800cdb8:	e7b1      	b.n	800cd1e <__sflush_r+0x1a>
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc0:	81a3      	strh	r3, [r4, #12]
 800cdc2:	e7ad      	b.n	800cd20 <__sflush_r+0x1c>
 800cdc4:	690f      	ldr	r7, [r1, #16]
 800cdc6:	2f00      	cmp	r7, #0
 800cdc8:	d0a9      	beq.n	800cd1e <__sflush_r+0x1a>
 800cdca:	0793      	lsls	r3, r2, #30
 800cdcc:	680e      	ldr	r6, [r1, #0]
 800cdce:	bf08      	it	eq
 800cdd0:	694b      	ldreq	r3, [r1, #20]
 800cdd2:	600f      	str	r7, [r1, #0]
 800cdd4:	bf18      	it	ne
 800cdd6:	2300      	movne	r3, #0
 800cdd8:	eba6 0807 	sub.w	r8, r6, r7
 800cddc:	608b      	str	r3, [r1, #8]
 800cdde:	f1b8 0f00 	cmp.w	r8, #0
 800cde2:	dd9c      	ble.n	800cd1e <__sflush_r+0x1a>
 800cde4:	6a21      	ldr	r1, [r4, #32]
 800cde6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cde8:	4643      	mov	r3, r8
 800cdea:	463a      	mov	r2, r7
 800cdec:	4628      	mov	r0, r5
 800cdee:	47b0      	blx	r6
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	dc06      	bgt.n	800ce02 <__sflush_r+0xfe>
 800cdf4:	89a3      	ldrh	r3, [r4, #12]
 800cdf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdfa:	81a3      	strh	r3, [r4, #12]
 800cdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ce00:	e78e      	b.n	800cd20 <__sflush_r+0x1c>
 800ce02:	4407      	add	r7, r0
 800ce04:	eba8 0800 	sub.w	r8, r8, r0
 800ce08:	e7e9      	b.n	800cdde <__sflush_r+0xda>
 800ce0a:	bf00      	nop
 800ce0c:	20400001 	.word	0x20400001

0800ce10 <_fflush_r>:
 800ce10:	b538      	push	{r3, r4, r5, lr}
 800ce12:	690b      	ldr	r3, [r1, #16]
 800ce14:	4605      	mov	r5, r0
 800ce16:	460c      	mov	r4, r1
 800ce18:	b913      	cbnz	r3, 800ce20 <_fflush_r+0x10>
 800ce1a:	2500      	movs	r5, #0
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	bd38      	pop	{r3, r4, r5, pc}
 800ce20:	b118      	cbz	r0, 800ce2a <_fflush_r+0x1a>
 800ce22:	6983      	ldr	r3, [r0, #24]
 800ce24:	b90b      	cbnz	r3, 800ce2a <_fflush_r+0x1a>
 800ce26:	f7fd f867 	bl	8009ef8 <__sinit>
 800ce2a:	4b14      	ldr	r3, [pc, #80]	; (800ce7c <_fflush_r+0x6c>)
 800ce2c:	429c      	cmp	r4, r3
 800ce2e:	d11b      	bne.n	800ce68 <_fflush_r+0x58>
 800ce30:	686c      	ldr	r4, [r5, #4]
 800ce32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d0ef      	beq.n	800ce1a <_fflush_r+0xa>
 800ce3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce3c:	07d0      	lsls	r0, r2, #31
 800ce3e:	d404      	bmi.n	800ce4a <_fflush_r+0x3a>
 800ce40:	0599      	lsls	r1, r3, #22
 800ce42:	d402      	bmi.n	800ce4a <_fflush_r+0x3a>
 800ce44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce46:	f7fd f91a 	bl	800a07e <__retarget_lock_acquire_recursive>
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	f7ff ff59 	bl	800cd04 <__sflush_r>
 800ce52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce54:	07da      	lsls	r2, r3, #31
 800ce56:	4605      	mov	r5, r0
 800ce58:	d4e0      	bmi.n	800ce1c <_fflush_r+0xc>
 800ce5a:	89a3      	ldrh	r3, [r4, #12]
 800ce5c:	059b      	lsls	r3, r3, #22
 800ce5e:	d4dd      	bmi.n	800ce1c <_fflush_r+0xc>
 800ce60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce62:	f7fd f90d 	bl	800a080 <__retarget_lock_release_recursive>
 800ce66:	e7d9      	b.n	800ce1c <_fflush_r+0xc>
 800ce68:	4b05      	ldr	r3, [pc, #20]	; (800ce80 <_fflush_r+0x70>)
 800ce6a:	429c      	cmp	r4, r3
 800ce6c:	d101      	bne.n	800ce72 <_fflush_r+0x62>
 800ce6e:	68ac      	ldr	r4, [r5, #8]
 800ce70:	e7df      	b.n	800ce32 <_fflush_r+0x22>
 800ce72:	4b04      	ldr	r3, [pc, #16]	; (800ce84 <_fflush_r+0x74>)
 800ce74:	429c      	cmp	r4, r3
 800ce76:	bf08      	it	eq
 800ce78:	68ec      	ldreq	r4, [r5, #12]
 800ce7a:	e7da      	b.n	800ce32 <_fflush_r+0x22>
 800ce7c:	08010e94 	.word	0x08010e94
 800ce80:	08010eb4 	.word	0x08010eb4
 800ce84:	08010e74 	.word	0x08010e74

0800ce88 <rshift>:
 800ce88:	6903      	ldr	r3, [r0, #16]
 800ce8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce92:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce96:	f100 0414 	add.w	r4, r0, #20
 800ce9a:	dd45      	ble.n	800cf28 <rshift+0xa0>
 800ce9c:	f011 011f 	ands.w	r1, r1, #31
 800cea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cea8:	d10c      	bne.n	800cec4 <rshift+0x3c>
 800ceaa:	f100 0710 	add.w	r7, r0, #16
 800ceae:	4629      	mov	r1, r5
 800ceb0:	42b1      	cmp	r1, r6
 800ceb2:	d334      	bcc.n	800cf1e <rshift+0x96>
 800ceb4:	1a9b      	subs	r3, r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	1eea      	subs	r2, r5, #3
 800ceba:	4296      	cmp	r6, r2
 800cebc:	bf38      	it	cc
 800cebe:	2300      	movcc	r3, #0
 800cec0:	4423      	add	r3, r4
 800cec2:	e015      	b.n	800cef0 <rshift+0x68>
 800cec4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cec8:	f1c1 0820 	rsb	r8, r1, #32
 800cecc:	40cf      	lsrs	r7, r1
 800cece:	f105 0e04 	add.w	lr, r5, #4
 800ced2:	46a1      	mov	r9, r4
 800ced4:	4576      	cmp	r6, lr
 800ced6:	46f4      	mov	ip, lr
 800ced8:	d815      	bhi.n	800cf06 <rshift+0x7e>
 800ceda:	1a9a      	subs	r2, r3, r2
 800cedc:	0092      	lsls	r2, r2, #2
 800cede:	3a04      	subs	r2, #4
 800cee0:	3501      	adds	r5, #1
 800cee2:	42ae      	cmp	r6, r5
 800cee4:	bf38      	it	cc
 800cee6:	2200      	movcc	r2, #0
 800cee8:	18a3      	adds	r3, r4, r2
 800ceea:	50a7      	str	r7, [r4, r2]
 800ceec:	b107      	cbz	r7, 800cef0 <rshift+0x68>
 800ceee:	3304      	adds	r3, #4
 800cef0:	1b1a      	subs	r2, r3, r4
 800cef2:	42a3      	cmp	r3, r4
 800cef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cef8:	bf08      	it	eq
 800cefa:	2300      	moveq	r3, #0
 800cefc:	6102      	str	r2, [r0, #16]
 800cefe:	bf08      	it	eq
 800cf00:	6143      	streq	r3, [r0, #20]
 800cf02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf06:	f8dc c000 	ldr.w	ip, [ip]
 800cf0a:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf0e:	ea4c 0707 	orr.w	r7, ip, r7
 800cf12:	f849 7b04 	str.w	r7, [r9], #4
 800cf16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf1a:	40cf      	lsrs	r7, r1
 800cf1c:	e7da      	b.n	800ced4 <rshift+0x4c>
 800cf1e:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf22:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf26:	e7c3      	b.n	800ceb0 <rshift+0x28>
 800cf28:	4623      	mov	r3, r4
 800cf2a:	e7e1      	b.n	800cef0 <rshift+0x68>

0800cf2c <__hexdig_fun>:
 800cf2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cf30:	2b09      	cmp	r3, #9
 800cf32:	d802      	bhi.n	800cf3a <__hexdig_fun+0xe>
 800cf34:	3820      	subs	r0, #32
 800cf36:	b2c0      	uxtb	r0, r0
 800cf38:	4770      	bx	lr
 800cf3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cf3e:	2b05      	cmp	r3, #5
 800cf40:	d801      	bhi.n	800cf46 <__hexdig_fun+0x1a>
 800cf42:	3847      	subs	r0, #71	; 0x47
 800cf44:	e7f7      	b.n	800cf36 <__hexdig_fun+0xa>
 800cf46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cf4a:	2b05      	cmp	r3, #5
 800cf4c:	d801      	bhi.n	800cf52 <__hexdig_fun+0x26>
 800cf4e:	3827      	subs	r0, #39	; 0x27
 800cf50:	e7f1      	b.n	800cf36 <__hexdig_fun+0xa>
 800cf52:	2000      	movs	r0, #0
 800cf54:	4770      	bx	lr
	...

0800cf58 <__gethex>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	ed2d 8b02 	vpush	{d8}
 800cf60:	b089      	sub	sp, #36	; 0x24
 800cf62:	ee08 0a10 	vmov	s16, r0
 800cf66:	9304      	str	r3, [sp, #16]
 800cf68:	4bb4      	ldr	r3, [pc, #720]	; (800d23c <__gethex+0x2e4>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	9301      	str	r3, [sp, #4]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	468b      	mov	fp, r1
 800cf72:	4690      	mov	r8, r2
 800cf74:	f7f3 f936 	bl	80001e4 <strlen>
 800cf78:	9b01      	ldr	r3, [sp, #4]
 800cf7a:	f8db 2000 	ldr.w	r2, [fp]
 800cf7e:	4403      	add	r3, r0
 800cf80:	4682      	mov	sl, r0
 800cf82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cf86:	9305      	str	r3, [sp, #20]
 800cf88:	1c93      	adds	r3, r2, #2
 800cf8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf92:	32fe      	adds	r2, #254	; 0xfe
 800cf94:	18d1      	adds	r1, r2, r3
 800cf96:	461f      	mov	r7, r3
 800cf98:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cf9c:	9100      	str	r1, [sp, #0]
 800cf9e:	2830      	cmp	r0, #48	; 0x30
 800cfa0:	d0f8      	beq.n	800cf94 <__gethex+0x3c>
 800cfa2:	f7ff ffc3 	bl	800cf2c <__hexdig_fun>
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	d13a      	bne.n	800d022 <__gethex+0xca>
 800cfac:	9901      	ldr	r1, [sp, #4]
 800cfae:	4652      	mov	r2, sl
 800cfb0:	4638      	mov	r0, r7
 800cfb2:	f7fe f89c 	bl	800b0ee <strncmp>
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d168      	bne.n	800d08e <__gethex+0x136>
 800cfbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cfc0:	eb07 060a 	add.w	r6, r7, sl
 800cfc4:	f7ff ffb2 	bl	800cf2c <__hexdig_fun>
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d062      	beq.n	800d092 <__gethex+0x13a>
 800cfcc:	4633      	mov	r3, r6
 800cfce:	7818      	ldrb	r0, [r3, #0]
 800cfd0:	2830      	cmp	r0, #48	; 0x30
 800cfd2:	461f      	mov	r7, r3
 800cfd4:	f103 0301 	add.w	r3, r3, #1
 800cfd8:	d0f9      	beq.n	800cfce <__gethex+0x76>
 800cfda:	f7ff ffa7 	bl	800cf2c <__hexdig_fun>
 800cfde:	2301      	movs	r3, #1
 800cfe0:	fab0 f480 	clz	r4, r0
 800cfe4:	0964      	lsrs	r4, r4, #5
 800cfe6:	4635      	mov	r5, r6
 800cfe8:	9300      	str	r3, [sp, #0]
 800cfea:	463a      	mov	r2, r7
 800cfec:	4616      	mov	r6, r2
 800cfee:	3201      	adds	r2, #1
 800cff0:	7830      	ldrb	r0, [r6, #0]
 800cff2:	f7ff ff9b 	bl	800cf2c <__hexdig_fun>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d1f8      	bne.n	800cfec <__gethex+0x94>
 800cffa:	9901      	ldr	r1, [sp, #4]
 800cffc:	4652      	mov	r2, sl
 800cffe:	4630      	mov	r0, r6
 800d000:	f7fe f875 	bl	800b0ee <strncmp>
 800d004:	b980      	cbnz	r0, 800d028 <__gethex+0xd0>
 800d006:	b94d      	cbnz	r5, 800d01c <__gethex+0xc4>
 800d008:	eb06 050a 	add.w	r5, r6, sl
 800d00c:	462a      	mov	r2, r5
 800d00e:	4616      	mov	r6, r2
 800d010:	3201      	adds	r2, #1
 800d012:	7830      	ldrb	r0, [r6, #0]
 800d014:	f7ff ff8a 	bl	800cf2c <__hexdig_fun>
 800d018:	2800      	cmp	r0, #0
 800d01a:	d1f8      	bne.n	800d00e <__gethex+0xb6>
 800d01c:	1bad      	subs	r5, r5, r6
 800d01e:	00ad      	lsls	r5, r5, #2
 800d020:	e004      	b.n	800d02c <__gethex+0xd4>
 800d022:	2400      	movs	r4, #0
 800d024:	4625      	mov	r5, r4
 800d026:	e7e0      	b.n	800cfea <__gethex+0x92>
 800d028:	2d00      	cmp	r5, #0
 800d02a:	d1f7      	bne.n	800d01c <__gethex+0xc4>
 800d02c:	7833      	ldrb	r3, [r6, #0]
 800d02e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d032:	2b50      	cmp	r3, #80	; 0x50
 800d034:	d13b      	bne.n	800d0ae <__gethex+0x156>
 800d036:	7873      	ldrb	r3, [r6, #1]
 800d038:	2b2b      	cmp	r3, #43	; 0x2b
 800d03a:	d02c      	beq.n	800d096 <__gethex+0x13e>
 800d03c:	2b2d      	cmp	r3, #45	; 0x2d
 800d03e:	d02e      	beq.n	800d09e <__gethex+0x146>
 800d040:	1c71      	adds	r1, r6, #1
 800d042:	f04f 0900 	mov.w	r9, #0
 800d046:	7808      	ldrb	r0, [r1, #0]
 800d048:	f7ff ff70 	bl	800cf2c <__hexdig_fun>
 800d04c:	1e43      	subs	r3, r0, #1
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	2b18      	cmp	r3, #24
 800d052:	d82c      	bhi.n	800d0ae <__gethex+0x156>
 800d054:	f1a0 0210 	sub.w	r2, r0, #16
 800d058:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d05c:	f7ff ff66 	bl	800cf2c <__hexdig_fun>
 800d060:	1e43      	subs	r3, r0, #1
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b18      	cmp	r3, #24
 800d066:	d91d      	bls.n	800d0a4 <__gethex+0x14c>
 800d068:	f1b9 0f00 	cmp.w	r9, #0
 800d06c:	d000      	beq.n	800d070 <__gethex+0x118>
 800d06e:	4252      	negs	r2, r2
 800d070:	4415      	add	r5, r2
 800d072:	f8cb 1000 	str.w	r1, [fp]
 800d076:	b1e4      	cbz	r4, 800d0b2 <__gethex+0x15a>
 800d078:	9b00      	ldr	r3, [sp, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	bf14      	ite	ne
 800d07e:	2700      	movne	r7, #0
 800d080:	2706      	moveq	r7, #6
 800d082:	4638      	mov	r0, r7
 800d084:	b009      	add	sp, #36	; 0x24
 800d086:	ecbd 8b02 	vpop	{d8}
 800d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d08e:	463e      	mov	r6, r7
 800d090:	4625      	mov	r5, r4
 800d092:	2401      	movs	r4, #1
 800d094:	e7ca      	b.n	800d02c <__gethex+0xd4>
 800d096:	f04f 0900 	mov.w	r9, #0
 800d09a:	1cb1      	adds	r1, r6, #2
 800d09c:	e7d3      	b.n	800d046 <__gethex+0xee>
 800d09e:	f04f 0901 	mov.w	r9, #1
 800d0a2:	e7fa      	b.n	800d09a <__gethex+0x142>
 800d0a4:	230a      	movs	r3, #10
 800d0a6:	fb03 0202 	mla	r2, r3, r2, r0
 800d0aa:	3a10      	subs	r2, #16
 800d0ac:	e7d4      	b.n	800d058 <__gethex+0x100>
 800d0ae:	4631      	mov	r1, r6
 800d0b0:	e7df      	b.n	800d072 <__gethex+0x11a>
 800d0b2:	1bf3      	subs	r3, r6, r7
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	4621      	mov	r1, r4
 800d0b8:	2b07      	cmp	r3, #7
 800d0ba:	dc0b      	bgt.n	800d0d4 <__gethex+0x17c>
 800d0bc:	ee18 0a10 	vmov	r0, s16
 800d0c0:	f000 fa8e 	bl	800d5e0 <_Balloc>
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	b940      	cbnz	r0, 800d0da <__gethex+0x182>
 800d0c8:	4b5d      	ldr	r3, [pc, #372]	; (800d240 <__gethex+0x2e8>)
 800d0ca:	4602      	mov	r2, r0
 800d0cc:	21de      	movs	r1, #222	; 0xde
 800d0ce:	485d      	ldr	r0, [pc, #372]	; (800d244 <__gethex+0x2ec>)
 800d0d0:	f001 fd3a 	bl	800eb48 <__assert_func>
 800d0d4:	3101      	adds	r1, #1
 800d0d6:	105b      	asrs	r3, r3, #1
 800d0d8:	e7ee      	b.n	800d0b8 <__gethex+0x160>
 800d0da:	f100 0914 	add.w	r9, r0, #20
 800d0de:	f04f 0b00 	mov.w	fp, #0
 800d0e2:	f1ca 0301 	rsb	r3, sl, #1
 800d0e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d0ea:	f8cd b000 	str.w	fp, [sp]
 800d0ee:	9306      	str	r3, [sp, #24]
 800d0f0:	42b7      	cmp	r7, r6
 800d0f2:	d340      	bcc.n	800d176 <__gethex+0x21e>
 800d0f4:	9802      	ldr	r0, [sp, #8]
 800d0f6:	9b00      	ldr	r3, [sp, #0]
 800d0f8:	f840 3b04 	str.w	r3, [r0], #4
 800d0fc:	eba0 0009 	sub.w	r0, r0, r9
 800d100:	1080      	asrs	r0, r0, #2
 800d102:	0146      	lsls	r6, r0, #5
 800d104:	6120      	str	r0, [r4, #16]
 800d106:	4618      	mov	r0, r3
 800d108:	f000 fb5c 	bl	800d7c4 <__hi0bits>
 800d10c:	1a30      	subs	r0, r6, r0
 800d10e:	f8d8 6000 	ldr.w	r6, [r8]
 800d112:	42b0      	cmp	r0, r6
 800d114:	dd63      	ble.n	800d1de <__gethex+0x286>
 800d116:	1b87      	subs	r7, r0, r6
 800d118:	4639      	mov	r1, r7
 800d11a:	4620      	mov	r0, r4
 800d11c:	f000 ff00 	bl	800df20 <__any_on>
 800d120:	4682      	mov	sl, r0
 800d122:	b1a8      	cbz	r0, 800d150 <__gethex+0x1f8>
 800d124:	1e7b      	subs	r3, r7, #1
 800d126:	1159      	asrs	r1, r3, #5
 800d128:	f003 021f 	and.w	r2, r3, #31
 800d12c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d130:	f04f 0a01 	mov.w	sl, #1
 800d134:	fa0a f202 	lsl.w	r2, sl, r2
 800d138:	420a      	tst	r2, r1
 800d13a:	d009      	beq.n	800d150 <__gethex+0x1f8>
 800d13c:	4553      	cmp	r3, sl
 800d13e:	dd05      	ble.n	800d14c <__gethex+0x1f4>
 800d140:	1eb9      	subs	r1, r7, #2
 800d142:	4620      	mov	r0, r4
 800d144:	f000 feec 	bl	800df20 <__any_on>
 800d148:	2800      	cmp	r0, #0
 800d14a:	d145      	bne.n	800d1d8 <__gethex+0x280>
 800d14c:	f04f 0a02 	mov.w	sl, #2
 800d150:	4639      	mov	r1, r7
 800d152:	4620      	mov	r0, r4
 800d154:	f7ff fe98 	bl	800ce88 <rshift>
 800d158:	443d      	add	r5, r7
 800d15a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d15e:	42ab      	cmp	r3, r5
 800d160:	da4c      	bge.n	800d1fc <__gethex+0x2a4>
 800d162:	ee18 0a10 	vmov	r0, s16
 800d166:	4621      	mov	r1, r4
 800d168:	f000 fa7a 	bl	800d660 <_Bfree>
 800d16c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d16e:	2300      	movs	r3, #0
 800d170:	6013      	str	r3, [r2, #0]
 800d172:	27a3      	movs	r7, #163	; 0xa3
 800d174:	e785      	b.n	800d082 <__gethex+0x12a>
 800d176:	1e73      	subs	r3, r6, #1
 800d178:	9a05      	ldr	r2, [sp, #20]
 800d17a:	9303      	str	r3, [sp, #12]
 800d17c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d180:	4293      	cmp	r3, r2
 800d182:	d019      	beq.n	800d1b8 <__gethex+0x260>
 800d184:	f1bb 0f20 	cmp.w	fp, #32
 800d188:	d107      	bne.n	800d19a <__gethex+0x242>
 800d18a:	9b02      	ldr	r3, [sp, #8]
 800d18c:	9a00      	ldr	r2, [sp, #0]
 800d18e:	f843 2b04 	str.w	r2, [r3], #4
 800d192:	9302      	str	r3, [sp, #8]
 800d194:	2300      	movs	r3, #0
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	469b      	mov	fp, r3
 800d19a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d19e:	f7ff fec5 	bl	800cf2c <__hexdig_fun>
 800d1a2:	9b00      	ldr	r3, [sp, #0]
 800d1a4:	f000 000f 	and.w	r0, r0, #15
 800d1a8:	fa00 f00b 	lsl.w	r0, r0, fp
 800d1ac:	4303      	orrs	r3, r0
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	f10b 0b04 	add.w	fp, fp, #4
 800d1b4:	9b03      	ldr	r3, [sp, #12]
 800d1b6:	e00d      	b.n	800d1d4 <__gethex+0x27c>
 800d1b8:	9b03      	ldr	r3, [sp, #12]
 800d1ba:	9a06      	ldr	r2, [sp, #24]
 800d1bc:	4413      	add	r3, r2
 800d1be:	42bb      	cmp	r3, r7
 800d1c0:	d3e0      	bcc.n	800d184 <__gethex+0x22c>
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	9901      	ldr	r1, [sp, #4]
 800d1c6:	9307      	str	r3, [sp, #28]
 800d1c8:	4652      	mov	r2, sl
 800d1ca:	f7fd ff90 	bl	800b0ee <strncmp>
 800d1ce:	9b07      	ldr	r3, [sp, #28]
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d1d7      	bne.n	800d184 <__gethex+0x22c>
 800d1d4:	461e      	mov	r6, r3
 800d1d6:	e78b      	b.n	800d0f0 <__gethex+0x198>
 800d1d8:	f04f 0a03 	mov.w	sl, #3
 800d1dc:	e7b8      	b.n	800d150 <__gethex+0x1f8>
 800d1de:	da0a      	bge.n	800d1f6 <__gethex+0x29e>
 800d1e0:	1a37      	subs	r7, r6, r0
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	ee18 0a10 	vmov	r0, s16
 800d1e8:	463a      	mov	r2, r7
 800d1ea:	f000 fc55 	bl	800da98 <__lshift>
 800d1ee:	1bed      	subs	r5, r5, r7
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	f100 0914 	add.w	r9, r0, #20
 800d1f6:	f04f 0a00 	mov.w	sl, #0
 800d1fa:	e7ae      	b.n	800d15a <__gethex+0x202>
 800d1fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d200:	42a8      	cmp	r0, r5
 800d202:	dd72      	ble.n	800d2ea <__gethex+0x392>
 800d204:	1b45      	subs	r5, r0, r5
 800d206:	42ae      	cmp	r6, r5
 800d208:	dc36      	bgt.n	800d278 <__gethex+0x320>
 800d20a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d02a      	beq.n	800d268 <__gethex+0x310>
 800d212:	2b03      	cmp	r3, #3
 800d214:	d02c      	beq.n	800d270 <__gethex+0x318>
 800d216:	2b01      	cmp	r3, #1
 800d218:	d11c      	bne.n	800d254 <__gethex+0x2fc>
 800d21a:	42ae      	cmp	r6, r5
 800d21c:	d11a      	bne.n	800d254 <__gethex+0x2fc>
 800d21e:	2e01      	cmp	r6, #1
 800d220:	d112      	bne.n	800d248 <__gethex+0x2f0>
 800d222:	9a04      	ldr	r2, [sp, #16]
 800d224:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d228:	6013      	str	r3, [r2, #0]
 800d22a:	2301      	movs	r3, #1
 800d22c:	6123      	str	r3, [r4, #16]
 800d22e:	f8c9 3000 	str.w	r3, [r9]
 800d232:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d234:	2762      	movs	r7, #98	; 0x62
 800d236:	601c      	str	r4, [r3, #0]
 800d238:	e723      	b.n	800d082 <__gethex+0x12a>
 800d23a:	bf00      	nop
 800d23c:	08011158 	.word	0x08011158
 800d240:	080110e0 	.word	0x080110e0
 800d244:	080110f1 	.word	0x080110f1
 800d248:	1e71      	subs	r1, r6, #1
 800d24a:	4620      	mov	r0, r4
 800d24c:	f000 fe68 	bl	800df20 <__any_on>
 800d250:	2800      	cmp	r0, #0
 800d252:	d1e6      	bne.n	800d222 <__gethex+0x2ca>
 800d254:	ee18 0a10 	vmov	r0, s16
 800d258:	4621      	mov	r1, r4
 800d25a:	f000 fa01 	bl	800d660 <_Bfree>
 800d25e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d260:	2300      	movs	r3, #0
 800d262:	6013      	str	r3, [r2, #0]
 800d264:	2750      	movs	r7, #80	; 0x50
 800d266:	e70c      	b.n	800d082 <__gethex+0x12a>
 800d268:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d1f2      	bne.n	800d254 <__gethex+0x2fc>
 800d26e:	e7d8      	b.n	800d222 <__gethex+0x2ca>
 800d270:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1d5      	bne.n	800d222 <__gethex+0x2ca>
 800d276:	e7ed      	b.n	800d254 <__gethex+0x2fc>
 800d278:	1e6f      	subs	r7, r5, #1
 800d27a:	f1ba 0f00 	cmp.w	sl, #0
 800d27e:	d131      	bne.n	800d2e4 <__gethex+0x38c>
 800d280:	b127      	cbz	r7, 800d28c <__gethex+0x334>
 800d282:	4639      	mov	r1, r7
 800d284:	4620      	mov	r0, r4
 800d286:	f000 fe4b 	bl	800df20 <__any_on>
 800d28a:	4682      	mov	sl, r0
 800d28c:	117b      	asrs	r3, r7, #5
 800d28e:	2101      	movs	r1, #1
 800d290:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d294:	f007 071f 	and.w	r7, r7, #31
 800d298:	fa01 f707 	lsl.w	r7, r1, r7
 800d29c:	421f      	tst	r7, r3
 800d29e:	4629      	mov	r1, r5
 800d2a0:	4620      	mov	r0, r4
 800d2a2:	bf18      	it	ne
 800d2a4:	f04a 0a02 	orrne.w	sl, sl, #2
 800d2a8:	1b76      	subs	r6, r6, r5
 800d2aa:	f7ff fded 	bl	800ce88 <rshift>
 800d2ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d2b2:	2702      	movs	r7, #2
 800d2b4:	f1ba 0f00 	cmp.w	sl, #0
 800d2b8:	d048      	beq.n	800d34c <__gethex+0x3f4>
 800d2ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	d015      	beq.n	800d2ee <__gethex+0x396>
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d017      	beq.n	800d2f6 <__gethex+0x39e>
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d109      	bne.n	800d2de <__gethex+0x386>
 800d2ca:	f01a 0f02 	tst.w	sl, #2
 800d2ce:	d006      	beq.n	800d2de <__gethex+0x386>
 800d2d0:	f8d9 0000 	ldr.w	r0, [r9]
 800d2d4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d2d8:	f01a 0f01 	tst.w	sl, #1
 800d2dc:	d10e      	bne.n	800d2fc <__gethex+0x3a4>
 800d2de:	f047 0710 	orr.w	r7, r7, #16
 800d2e2:	e033      	b.n	800d34c <__gethex+0x3f4>
 800d2e4:	f04f 0a01 	mov.w	sl, #1
 800d2e8:	e7d0      	b.n	800d28c <__gethex+0x334>
 800d2ea:	2701      	movs	r7, #1
 800d2ec:	e7e2      	b.n	800d2b4 <__gethex+0x35c>
 800d2ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2f0:	f1c3 0301 	rsb	r3, r3, #1
 800d2f4:	9315      	str	r3, [sp, #84]	; 0x54
 800d2f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d0f0      	beq.n	800d2de <__gethex+0x386>
 800d2fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d300:	f104 0314 	add.w	r3, r4, #20
 800d304:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d308:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d30c:	f04f 0c00 	mov.w	ip, #0
 800d310:	4618      	mov	r0, r3
 800d312:	f853 2b04 	ldr.w	r2, [r3], #4
 800d316:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d31a:	d01c      	beq.n	800d356 <__gethex+0x3fe>
 800d31c:	3201      	adds	r2, #1
 800d31e:	6002      	str	r2, [r0, #0]
 800d320:	2f02      	cmp	r7, #2
 800d322:	f104 0314 	add.w	r3, r4, #20
 800d326:	d13f      	bne.n	800d3a8 <__gethex+0x450>
 800d328:	f8d8 2000 	ldr.w	r2, [r8]
 800d32c:	3a01      	subs	r2, #1
 800d32e:	42b2      	cmp	r2, r6
 800d330:	d10a      	bne.n	800d348 <__gethex+0x3f0>
 800d332:	1171      	asrs	r1, r6, #5
 800d334:	2201      	movs	r2, #1
 800d336:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d33a:	f006 061f 	and.w	r6, r6, #31
 800d33e:	fa02 f606 	lsl.w	r6, r2, r6
 800d342:	421e      	tst	r6, r3
 800d344:	bf18      	it	ne
 800d346:	4617      	movne	r7, r2
 800d348:	f047 0720 	orr.w	r7, r7, #32
 800d34c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d34e:	601c      	str	r4, [r3, #0]
 800d350:	9b04      	ldr	r3, [sp, #16]
 800d352:	601d      	str	r5, [r3, #0]
 800d354:	e695      	b.n	800d082 <__gethex+0x12a>
 800d356:	4299      	cmp	r1, r3
 800d358:	f843 cc04 	str.w	ip, [r3, #-4]
 800d35c:	d8d8      	bhi.n	800d310 <__gethex+0x3b8>
 800d35e:	68a3      	ldr	r3, [r4, #8]
 800d360:	459b      	cmp	fp, r3
 800d362:	db19      	blt.n	800d398 <__gethex+0x440>
 800d364:	6861      	ldr	r1, [r4, #4]
 800d366:	ee18 0a10 	vmov	r0, s16
 800d36a:	3101      	adds	r1, #1
 800d36c:	f000 f938 	bl	800d5e0 <_Balloc>
 800d370:	4681      	mov	r9, r0
 800d372:	b918      	cbnz	r0, 800d37c <__gethex+0x424>
 800d374:	4b1a      	ldr	r3, [pc, #104]	; (800d3e0 <__gethex+0x488>)
 800d376:	4602      	mov	r2, r0
 800d378:	2184      	movs	r1, #132	; 0x84
 800d37a:	e6a8      	b.n	800d0ce <__gethex+0x176>
 800d37c:	6922      	ldr	r2, [r4, #16]
 800d37e:	3202      	adds	r2, #2
 800d380:	f104 010c 	add.w	r1, r4, #12
 800d384:	0092      	lsls	r2, r2, #2
 800d386:	300c      	adds	r0, #12
 800d388:	f7fc fe7b 	bl	800a082 <memcpy>
 800d38c:	4621      	mov	r1, r4
 800d38e:	ee18 0a10 	vmov	r0, s16
 800d392:	f000 f965 	bl	800d660 <_Bfree>
 800d396:	464c      	mov	r4, r9
 800d398:	6923      	ldr	r3, [r4, #16]
 800d39a:	1c5a      	adds	r2, r3, #1
 800d39c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d3a0:	6122      	str	r2, [r4, #16]
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	615a      	str	r2, [r3, #20]
 800d3a6:	e7bb      	b.n	800d320 <__gethex+0x3c8>
 800d3a8:	6922      	ldr	r2, [r4, #16]
 800d3aa:	455a      	cmp	r2, fp
 800d3ac:	dd0b      	ble.n	800d3c6 <__gethex+0x46e>
 800d3ae:	2101      	movs	r1, #1
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f7ff fd69 	bl	800ce88 <rshift>
 800d3b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3ba:	3501      	adds	r5, #1
 800d3bc:	42ab      	cmp	r3, r5
 800d3be:	f6ff aed0 	blt.w	800d162 <__gethex+0x20a>
 800d3c2:	2701      	movs	r7, #1
 800d3c4:	e7c0      	b.n	800d348 <__gethex+0x3f0>
 800d3c6:	f016 061f 	ands.w	r6, r6, #31
 800d3ca:	d0fa      	beq.n	800d3c2 <__gethex+0x46a>
 800d3cc:	4453      	add	r3, sl
 800d3ce:	f1c6 0620 	rsb	r6, r6, #32
 800d3d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d3d6:	f000 f9f5 	bl	800d7c4 <__hi0bits>
 800d3da:	42b0      	cmp	r0, r6
 800d3dc:	dbe7      	blt.n	800d3ae <__gethex+0x456>
 800d3de:	e7f0      	b.n	800d3c2 <__gethex+0x46a>
 800d3e0:	080110e0 	.word	0x080110e0

0800d3e4 <L_shift>:
 800d3e4:	f1c2 0208 	rsb	r2, r2, #8
 800d3e8:	0092      	lsls	r2, r2, #2
 800d3ea:	b570      	push	{r4, r5, r6, lr}
 800d3ec:	f1c2 0620 	rsb	r6, r2, #32
 800d3f0:	6843      	ldr	r3, [r0, #4]
 800d3f2:	6804      	ldr	r4, [r0, #0]
 800d3f4:	fa03 f506 	lsl.w	r5, r3, r6
 800d3f8:	432c      	orrs	r4, r5
 800d3fa:	40d3      	lsrs	r3, r2
 800d3fc:	6004      	str	r4, [r0, #0]
 800d3fe:	f840 3f04 	str.w	r3, [r0, #4]!
 800d402:	4288      	cmp	r0, r1
 800d404:	d3f4      	bcc.n	800d3f0 <L_shift+0xc>
 800d406:	bd70      	pop	{r4, r5, r6, pc}

0800d408 <__match>:
 800d408:	b530      	push	{r4, r5, lr}
 800d40a:	6803      	ldr	r3, [r0, #0]
 800d40c:	3301      	adds	r3, #1
 800d40e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d412:	b914      	cbnz	r4, 800d41a <__match+0x12>
 800d414:	6003      	str	r3, [r0, #0]
 800d416:	2001      	movs	r0, #1
 800d418:	bd30      	pop	{r4, r5, pc}
 800d41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d422:	2d19      	cmp	r5, #25
 800d424:	bf98      	it	ls
 800d426:	3220      	addls	r2, #32
 800d428:	42a2      	cmp	r2, r4
 800d42a:	d0f0      	beq.n	800d40e <__match+0x6>
 800d42c:	2000      	movs	r0, #0
 800d42e:	e7f3      	b.n	800d418 <__match+0x10>

0800d430 <__hexnan>:
 800d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d434:	680b      	ldr	r3, [r1, #0]
 800d436:	115e      	asrs	r6, r3, #5
 800d438:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d43c:	f013 031f 	ands.w	r3, r3, #31
 800d440:	b087      	sub	sp, #28
 800d442:	bf18      	it	ne
 800d444:	3604      	addne	r6, #4
 800d446:	2500      	movs	r5, #0
 800d448:	1f37      	subs	r7, r6, #4
 800d44a:	4690      	mov	r8, r2
 800d44c:	6802      	ldr	r2, [r0, #0]
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	4682      	mov	sl, r0
 800d452:	f846 5c04 	str.w	r5, [r6, #-4]
 800d456:	46b9      	mov	r9, r7
 800d458:	463c      	mov	r4, r7
 800d45a:	9502      	str	r5, [sp, #8]
 800d45c:	46ab      	mov	fp, r5
 800d45e:	7851      	ldrb	r1, [r2, #1]
 800d460:	1c53      	adds	r3, r2, #1
 800d462:	9303      	str	r3, [sp, #12]
 800d464:	b341      	cbz	r1, 800d4b8 <__hexnan+0x88>
 800d466:	4608      	mov	r0, r1
 800d468:	9205      	str	r2, [sp, #20]
 800d46a:	9104      	str	r1, [sp, #16]
 800d46c:	f7ff fd5e 	bl	800cf2c <__hexdig_fun>
 800d470:	2800      	cmp	r0, #0
 800d472:	d14f      	bne.n	800d514 <__hexnan+0xe4>
 800d474:	9904      	ldr	r1, [sp, #16]
 800d476:	9a05      	ldr	r2, [sp, #20]
 800d478:	2920      	cmp	r1, #32
 800d47a:	d818      	bhi.n	800d4ae <__hexnan+0x7e>
 800d47c:	9b02      	ldr	r3, [sp, #8]
 800d47e:	459b      	cmp	fp, r3
 800d480:	dd13      	ble.n	800d4aa <__hexnan+0x7a>
 800d482:	454c      	cmp	r4, r9
 800d484:	d206      	bcs.n	800d494 <__hexnan+0x64>
 800d486:	2d07      	cmp	r5, #7
 800d488:	dc04      	bgt.n	800d494 <__hexnan+0x64>
 800d48a:	462a      	mov	r2, r5
 800d48c:	4649      	mov	r1, r9
 800d48e:	4620      	mov	r0, r4
 800d490:	f7ff ffa8 	bl	800d3e4 <L_shift>
 800d494:	4544      	cmp	r4, r8
 800d496:	d950      	bls.n	800d53a <__hexnan+0x10a>
 800d498:	2300      	movs	r3, #0
 800d49a:	f1a4 0904 	sub.w	r9, r4, #4
 800d49e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4a2:	f8cd b008 	str.w	fp, [sp, #8]
 800d4a6:	464c      	mov	r4, r9
 800d4a8:	461d      	mov	r5, r3
 800d4aa:	9a03      	ldr	r2, [sp, #12]
 800d4ac:	e7d7      	b.n	800d45e <__hexnan+0x2e>
 800d4ae:	2929      	cmp	r1, #41	; 0x29
 800d4b0:	d156      	bne.n	800d560 <__hexnan+0x130>
 800d4b2:	3202      	adds	r2, #2
 800d4b4:	f8ca 2000 	str.w	r2, [sl]
 800d4b8:	f1bb 0f00 	cmp.w	fp, #0
 800d4bc:	d050      	beq.n	800d560 <__hexnan+0x130>
 800d4be:	454c      	cmp	r4, r9
 800d4c0:	d206      	bcs.n	800d4d0 <__hexnan+0xa0>
 800d4c2:	2d07      	cmp	r5, #7
 800d4c4:	dc04      	bgt.n	800d4d0 <__hexnan+0xa0>
 800d4c6:	462a      	mov	r2, r5
 800d4c8:	4649      	mov	r1, r9
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f7ff ff8a 	bl	800d3e4 <L_shift>
 800d4d0:	4544      	cmp	r4, r8
 800d4d2:	d934      	bls.n	800d53e <__hexnan+0x10e>
 800d4d4:	f1a8 0204 	sub.w	r2, r8, #4
 800d4d8:	4623      	mov	r3, r4
 800d4da:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4de:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4e2:	429f      	cmp	r7, r3
 800d4e4:	d2f9      	bcs.n	800d4da <__hexnan+0xaa>
 800d4e6:	1b3b      	subs	r3, r7, r4
 800d4e8:	f023 0303 	bic.w	r3, r3, #3
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	3401      	adds	r4, #1
 800d4f0:	3e03      	subs	r6, #3
 800d4f2:	42b4      	cmp	r4, r6
 800d4f4:	bf88      	it	hi
 800d4f6:	2304      	movhi	r3, #4
 800d4f8:	4443      	add	r3, r8
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f843 2b04 	str.w	r2, [r3], #4
 800d500:	429f      	cmp	r7, r3
 800d502:	d2fb      	bcs.n	800d4fc <__hexnan+0xcc>
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	b91b      	cbnz	r3, 800d510 <__hexnan+0xe0>
 800d508:	4547      	cmp	r7, r8
 800d50a:	d127      	bne.n	800d55c <__hexnan+0x12c>
 800d50c:	2301      	movs	r3, #1
 800d50e:	603b      	str	r3, [r7, #0]
 800d510:	2005      	movs	r0, #5
 800d512:	e026      	b.n	800d562 <__hexnan+0x132>
 800d514:	3501      	adds	r5, #1
 800d516:	2d08      	cmp	r5, #8
 800d518:	f10b 0b01 	add.w	fp, fp, #1
 800d51c:	dd06      	ble.n	800d52c <__hexnan+0xfc>
 800d51e:	4544      	cmp	r4, r8
 800d520:	d9c3      	bls.n	800d4aa <__hexnan+0x7a>
 800d522:	2300      	movs	r3, #0
 800d524:	f844 3c04 	str.w	r3, [r4, #-4]
 800d528:	2501      	movs	r5, #1
 800d52a:	3c04      	subs	r4, #4
 800d52c:	6822      	ldr	r2, [r4, #0]
 800d52e:	f000 000f 	and.w	r0, r0, #15
 800d532:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d536:	6022      	str	r2, [r4, #0]
 800d538:	e7b7      	b.n	800d4aa <__hexnan+0x7a>
 800d53a:	2508      	movs	r5, #8
 800d53c:	e7b5      	b.n	800d4aa <__hexnan+0x7a>
 800d53e:	9b01      	ldr	r3, [sp, #4]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d0df      	beq.n	800d504 <__hexnan+0xd4>
 800d544:	f04f 32ff 	mov.w	r2, #4294967295
 800d548:	f1c3 0320 	rsb	r3, r3, #32
 800d54c:	fa22 f303 	lsr.w	r3, r2, r3
 800d550:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d554:	401a      	ands	r2, r3
 800d556:	f846 2c04 	str.w	r2, [r6, #-4]
 800d55a:	e7d3      	b.n	800d504 <__hexnan+0xd4>
 800d55c:	3f04      	subs	r7, #4
 800d55e:	e7d1      	b.n	800d504 <__hexnan+0xd4>
 800d560:	2004      	movs	r0, #4
 800d562:	b007      	add	sp, #28
 800d564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d568 <_localeconv_r>:
 800d568:	4800      	ldr	r0, [pc, #0]	; (800d56c <_localeconv_r+0x4>)
 800d56a:	4770      	bx	lr
 800d56c:	20000214 	.word	0x20000214

0800d570 <_lseek_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	4d07      	ldr	r5, [pc, #28]	; (800d590 <_lseek_r+0x20>)
 800d574:	4604      	mov	r4, r0
 800d576:	4608      	mov	r0, r1
 800d578:	4611      	mov	r1, r2
 800d57a:	2200      	movs	r2, #0
 800d57c:	602a      	str	r2, [r5, #0]
 800d57e:	461a      	mov	r2, r3
 800d580:	f7f7 fb00 	bl	8004b84 <_lseek>
 800d584:	1c43      	adds	r3, r0, #1
 800d586:	d102      	bne.n	800d58e <_lseek_r+0x1e>
 800d588:	682b      	ldr	r3, [r5, #0]
 800d58a:	b103      	cbz	r3, 800d58e <_lseek_r+0x1e>
 800d58c:	6023      	str	r3, [r4, #0]
 800d58e:	bd38      	pop	{r3, r4, r5, pc}
 800d590:	2000db64 	.word	0x2000db64

0800d594 <malloc>:
 800d594:	4b02      	ldr	r3, [pc, #8]	; (800d5a0 <malloc+0xc>)
 800d596:	4601      	mov	r1, r0
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f7fc bda9 	b.w	800a0f0 <_malloc_r>
 800d59e:	bf00      	nop
 800d5a0:	200000bc 	.word	0x200000bc

0800d5a4 <__ascii_mbtowc>:
 800d5a4:	b082      	sub	sp, #8
 800d5a6:	b901      	cbnz	r1, 800d5aa <__ascii_mbtowc+0x6>
 800d5a8:	a901      	add	r1, sp, #4
 800d5aa:	b142      	cbz	r2, 800d5be <__ascii_mbtowc+0x1a>
 800d5ac:	b14b      	cbz	r3, 800d5c2 <__ascii_mbtowc+0x1e>
 800d5ae:	7813      	ldrb	r3, [r2, #0]
 800d5b0:	600b      	str	r3, [r1, #0]
 800d5b2:	7812      	ldrb	r2, [r2, #0]
 800d5b4:	1e10      	subs	r0, r2, #0
 800d5b6:	bf18      	it	ne
 800d5b8:	2001      	movne	r0, #1
 800d5ba:	b002      	add	sp, #8
 800d5bc:	4770      	bx	lr
 800d5be:	4610      	mov	r0, r2
 800d5c0:	e7fb      	b.n	800d5ba <__ascii_mbtowc+0x16>
 800d5c2:	f06f 0001 	mvn.w	r0, #1
 800d5c6:	e7f8      	b.n	800d5ba <__ascii_mbtowc+0x16>

0800d5c8 <__malloc_lock>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	; (800d5d0 <__malloc_lock+0x8>)
 800d5ca:	f7fc bd58 	b.w	800a07e <__retarget_lock_acquire_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	2000db58 	.word	0x2000db58

0800d5d4 <__malloc_unlock>:
 800d5d4:	4801      	ldr	r0, [pc, #4]	; (800d5dc <__malloc_unlock+0x8>)
 800d5d6:	f7fc bd53 	b.w	800a080 <__retarget_lock_release_recursive>
 800d5da:	bf00      	nop
 800d5dc:	2000db58 	.word	0x2000db58

0800d5e0 <_Balloc>:
 800d5e0:	b570      	push	{r4, r5, r6, lr}
 800d5e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	460d      	mov	r5, r1
 800d5e8:	b976      	cbnz	r6, 800d608 <_Balloc+0x28>
 800d5ea:	2010      	movs	r0, #16
 800d5ec:	f7ff ffd2 	bl	800d594 <malloc>
 800d5f0:	4602      	mov	r2, r0
 800d5f2:	6260      	str	r0, [r4, #36]	; 0x24
 800d5f4:	b920      	cbnz	r0, 800d600 <_Balloc+0x20>
 800d5f6:	4b18      	ldr	r3, [pc, #96]	; (800d658 <_Balloc+0x78>)
 800d5f8:	4818      	ldr	r0, [pc, #96]	; (800d65c <_Balloc+0x7c>)
 800d5fa:	2166      	movs	r1, #102	; 0x66
 800d5fc:	f001 faa4 	bl	800eb48 <__assert_func>
 800d600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d604:	6006      	str	r6, [r0, #0]
 800d606:	60c6      	str	r6, [r0, #12]
 800d608:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d60a:	68f3      	ldr	r3, [r6, #12]
 800d60c:	b183      	cbz	r3, 800d630 <_Balloc+0x50>
 800d60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d616:	b9b8      	cbnz	r0, 800d648 <_Balloc+0x68>
 800d618:	2101      	movs	r1, #1
 800d61a:	fa01 f605 	lsl.w	r6, r1, r5
 800d61e:	1d72      	adds	r2, r6, #5
 800d620:	0092      	lsls	r2, r2, #2
 800d622:	4620      	mov	r0, r4
 800d624:	f000 fc9d 	bl	800df62 <_calloc_r>
 800d628:	b160      	cbz	r0, 800d644 <_Balloc+0x64>
 800d62a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d62e:	e00e      	b.n	800d64e <_Balloc+0x6e>
 800d630:	2221      	movs	r2, #33	; 0x21
 800d632:	2104      	movs	r1, #4
 800d634:	4620      	mov	r0, r4
 800d636:	f000 fc94 	bl	800df62 <_calloc_r>
 800d63a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d63c:	60f0      	str	r0, [r6, #12]
 800d63e:	68db      	ldr	r3, [r3, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d1e4      	bne.n	800d60e <_Balloc+0x2e>
 800d644:	2000      	movs	r0, #0
 800d646:	bd70      	pop	{r4, r5, r6, pc}
 800d648:	6802      	ldr	r2, [r0, #0]
 800d64a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d64e:	2300      	movs	r3, #0
 800d650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d654:	e7f7      	b.n	800d646 <_Balloc+0x66>
 800d656:	bf00      	nop
 800d658:	0801106e 	.word	0x0801106e
 800d65c:	0801116c 	.word	0x0801116c

0800d660 <_Bfree>:
 800d660:	b570      	push	{r4, r5, r6, lr}
 800d662:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d664:	4605      	mov	r5, r0
 800d666:	460c      	mov	r4, r1
 800d668:	b976      	cbnz	r6, 800d688 <_Bfree+0x28>
 800d66a:	2010      	movs	r0, #16
 800d66c:	f7ff ff92 	bl	800d594 <malloc>
 800d670:	4602      	mov	r2, r0
 800d672:	6268      	str	r0, [r5, #36]	; 0x24
 800d674:	b920      	cbnz	r0, 800d680 <_Bfree+0x20>
 800d676:	4b09      	ldr	r3, [pc, #36]	; (800d69c <_Bfree+0x3c>)
 800d678:	4809      	ldr	r0, [pc, #36]	; (800d6a0 <_Bfree+0x40>)
 800d67a:	218a      	movs	r1, #138	; 0x8a
 800d67c:	f001 fa64 	bl	800eb48 <__assert_func>
 800d680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d684:	6006      	str	r6, [r0, #0]
 800d686:	60c6      	str	r6, [r0, #12]
 800d688:	b13c      	cbz	r4, 800d69a <_Bfree+0x3a>
 800d68a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d68c:	6862      	ldr	r2, [r4, #4]
 800d68e:	68db      	ldr	r3, [r3, #12]
 800d690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d694:	6021      	str	r1, [r4, #0]
 800d696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d69a:	bd70      	pop	{r4, r5, r6, pc}
 800d69c:	0801106e 	.word	0x0801106e
 800d6a0:	0801116c 	.word	0x0801116c

0800d6a4 <__multadd>:
 800d6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a8:	690d      	ldr	r5, [r1, #16]
 800d6aa:	4607      	mov	r7, r0
 800d6ac:	460c      	mov	r4, r1
 800d6ae:	461e      	mov	r6, r3
 800d6b0:	f101 0c14 	add.w	ip, r1, #20
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	f8dc 3000 	ldr.w	r3, [ip]
 800d6ba:	b299      	uxth	r1, r3
 800d6bc:	fb02 6101 	mla	r1, r2, r1, r6
 800d6c0:	0c1e      	lsrs	r6, r3, #16
 800d6c2:	0c0b      	lsrs	r3, r1, #16
 800d6c4:	fb02 3306 	mla	r3, r2, r6, r3
 800d6c8:	b289      	uxth	r1, r1
 800d6ca:	3001      	adds	r0, #1
 800d6cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6d0:	4285      	cmp	r5, r0
 800d6d2:	f84c 1b04 	str.w	r1, [ip], #4
 800d6d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6da:	dcec      	bgt.n	800d6b6 <__multadd+0x12>
 800d6dc:	b30e      	cbz	r6, 800d722 <__multadd+0x7e>
 800d6de:	68a3      	ldr	r3, [r4, #8]
 800d6e0:	42ab      	cmp	r3, r5
 800d6e2:	dc19      	bgt.n	800d718 <__multadd+0x74>
 800d6e4:	6861      	ldr	r1, [r4, #4]
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	3101      	adds	r1, #1
 800d6ea:	f7ff ff79 	bl	800d5e0 <_Balloc>
 800d6ee:	4680      	mov	r8, r0
 800d6f0:	b928      	cbnz	r0, 800d6fe <__multadd+0x5a>
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	4b0c      	ldr	r3, [pc, #48]	; (800d728 <__multadd+0x84>)
 800d6f6:	480d      	ldr	r0, [pc, #52]	; (800d72c <__multadd+0x88>)
 800d6f8:	21b5      	movs	r1, #181	; 0xb5
 800d6fa:	f001 fa25 	bl	800eb48 <__assert_func>
 800d6fe:	6922      	ldr	r2, [r4, #16]
 800d700:	3202      	adds	r2, #2
 800d702:	f104 010c 	add.w	r1, r4, #12
 800d706:	0092      	lsls	r2, r2, #2
 800d708:	300c      	adds	r0, #12
 800d70a:	f7fc fcba 	bl	800a082 <memcpy>
 800d70e:	4621      	mov	r1, r4
 800d710:	4638      	mov	r0, r7
 800d712:	f7ff ffa5 	bl	800d660 <_Bfree>
 800d716:	4644      	mov	r4, r8
 800d718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d71c:	3501      	adds	r5, #1
 800d71e:	615e      	str	r6, [r3, #20]
 800d720:	6125      	str	r5, [r4, #16]
 800d722:	4620      	mov	r0, r4
 800d724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d728:	080110e0 	.word	0x080110e0
 800d72c:	0801116c 	.word	0x0801116c

0800d730 <__s2b>:
 800d730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d734:	460c      	mov	r4, r1
 800d736:	4615      	mov	r5, r2
 800d738:	461f      	mov	r7, r3
 800d73a:	2209      	movs	r2, #9
 800d73c:	3308      	adds	r3, #8
 800d73e:	4606      	mov	r6, r0
 800d740:	fb93 f3f2 	sdiv	r3, r3, r2
 800d744:	2100      	movs	r1, #0
 800d746:	2201      	movs	r2, #1
 800d748:	429a      	cmp	r2, r3
 800d74a:	db09      	blt.n	800d760 <__s2b+0x30>
 800d74c:	4630      	mov	r0, r6
 800d74e:	f7ff ff47 	bl	800d5e0 <_Balloc>
 800d752:	b940      	cbnz	r0, 800d766 <__s2b+0x36>
 800d754:	4602      	mov	r2, r0
 800d756:	4b19      	ldr	r3, [pc, #100]	; (800d7bc <__s2b+0x8c>)
 800d758:	4819      	ldr	r0, [pc, #100]	; (800d7c0 <__s2b+0x90>)
 800d75a:	21ce      	movs	r1, #206	; 0xce
 800d75c:	f001 f9f4 	bl	800eb48 <__assert_func>
 800d760:	0052      	lsls	r2, r2, #1
 800d762:	3101      	adds	r1, #1
 800d764:	e7f0      	b.n	800d748 <__s2b+0x18>
 800d766:	9b08      	ldr	r3, [sp, #32]
 800d768:	6143      	str	r3, [r0, #20]
 800d76a:	2d09      	cmp	r5, #9
 800d76c:	f04f 0301 	mov.w	r3, #1
 800d770:	6103      	str	r3, [r0, #16]
 800d772:	dd16      	ble.n	800d7a2 <__s2b+0x72>
 800d774:	f104 0909 	add.w	r9, r4, #9
 800d778:	46c8      	mov	r8, r9
 800d77a:	442c      	add	r4, r5
 800d77c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d780:	4601      	mov	r1, r0
 800d782:	3b30      	subs	r3, #48	; 0x30
 800d784:	220a      	movs	r2, #10
 800d786:	4630      	mov	r0, r6
 800d788:	f7ff ff8c 	bl	800d6a4 <__multadd>
 800d78c:	45a0      	cmp	r8, r4
 800d78e:	d1f5      	bne.n	800d77c <__s2b+0x4c>
 800d790:	f1a5 0408 	sub.w	r4, r5, #8
 800d794:	444c      	add	r4, r9
 800d796:	1b2d      	subs	r5, r5, r4
 800d798:	1963      	adds	r3, r4, r5
 800d79a:	42bb      	cmp	r3, r7
 800d79c:	db04      	blt.n	800d7a8 <__s2b+0x78>
 800d79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7a2:	340a      	adds	r4, #10
 800d7a4:	2509      	movs	r5, #9
 800d7a6:	e7f6      	b.n	800d796 <__s2b+0x66>
 800d7a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d7ac:	4601      	mov	r1, r0
 800d7ae:	3b30      	subs	r3, #48	; 0x30
 800d7b0:	220a      	movs	r2, #10
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	f7ff ff76 	bl	800d6a4 <__multadd>
 800d7b8:	e7ee      	b.n	800d798 <__s2b+0x68>
 800d7ba:	bf00      	nop
 800d7bc:	080110e0 	.word	0x080110e0
 800d7c0:	0801116c 	.word	0x0801116c

0800d7c4 <__hi0bits>:
 800d7c4:	0c03      	lsrs	r3, r0, #16
 800d7c6:	041b      	lsls	r3, r3, #16
 800d7c8:	b9d3      	cbnz	r3, 800d800 <__hi0bits+0x3c>
 800d7ca:	0400      	lsls	r0, r0, #16
 800d7cc:	2310      	movs	r3, #16
 800d7ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7d2:	bf04      	itt	eq
 800d7d4:	0200      	lsleq	r0, r0, #8
 800d7d6:	3308      	addeq	r3, #8
 800d7d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7dc:	bf04      	itt	eq
 800d7de:	0100      	lsleq	r0, r0, #4
 800d7e0:	3304      	addeq	r3, #4
 800d7e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d7e6:	bf04      	itt	eq
 800d7e8:	0080      	lsleq	r0, r0, #2
 800d7ea:	3302      	addeq	r3, #2
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	db05      	blt.n	800d7fc <__hi0bits+0x38>
 800d7f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7f4:	f103 0301 	add.w	r3, r3, #1
 800d7f8:	bf08      	it	eq
 800d7fa:	2320      	moveq	r3, #32
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	4770      	bx	lr
 800d800:	2300      	movs	r3, #0
 800d802:	e7e4      	b.n	800d7ce <__hi0bits+0xa>

0800d804 <__lo0bits>:
 800d804:	6803      	ldr	r3, [r0, #0]
 800d806:	f013 0207 	ands.w	r2, r3, #7
 800d80a:	4601      	mov	r1, r0
 800d80c:	d00b      	beq.n	800d826 <__lo0bits+0x22>
 800d80e:	07da      	lsls	r2, r3, #31
 800d810:	d423      	bmi.n	800d85a <__lo0bits+0x56>
 800d812:	0798      	lsls	r0, r3, #30
 800d814:	bf49      	itett	mi
 800d816:	085b      	lsrmi	r3, r3, #1
 800d818:	089b      	lsrpl	r3, r3, #2
 800d81a:	2001      	movmi	r0, #1
 800d81c:	600b      	strmi	r3, [r1, #0]
 800d81e:	bf5c      	itt	pl
 800d820:	600b      	strpl	r3, [r1, #0]
 800d822:	2002      	movpl	r0, #2
 800d824:	4770      	bx	lr
 800d826:	b298      	uxth	r0, r3
 800d828:	b9a8      	cbnz	r0, 800d856 <__lo0bits+0x52>
 800d82a:	0c1b      	lsrs	r3, r3, #16
 800d82c:	2010      	movs	r0, #16
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	b90a      	cbnz	r2, 800d836 <__lo0bits+0x32>
 800d832:	3008      	adds	r0, #8
 800d834:	0a1b      	lsrs	r3, r3, #8
 800d836:	071a      	lsls	r2, r3, #28
 800d838:	bf04      	itt	eq
 800d83a:	091b      	lsreq	r3, r3, #4
 800d83c:	3004      	addeq	r0, #4
 800d83e:	079a      	lsls	r2, r3, #30
 800d840:	bf04      	itt	eq
 800d842:	089b      	lsreq	r3, r3, #2
 800d844:	3002      	addeq	r0, #2
 800d846:	07da      	lsls	r2, r3, #31
 800d848:	d403      	bmi.n	800d852 <__lo0bits+0x4e>
 800d84a:	085b      	lsrs	r3, r3, #1
 800d84c:	f100 0001 	add.w	r0, r0, #1
 800d850:	d005      	beq.n	800d85e <__lo0bits+0x5a>
 800d852:	600b      	str	r3, [r1, #0]
 800d854:	4770      	bx	lr
 800d856:	4610      	mov	r0, r2
 800d858:	e7e9      	b.n	800d82e <__lo0bits+0x2a>
 800d85a:	2000      	movs	r0, #0
 800d85c:	4770      	bx	lr
 800d85e:	2020      	movs	r0, #32
 800d860:	4770      	bx	lr
	...

0800d864 <__i2b>:
 800d864:	b510      	push	{r4, lr}
 800d866:	460c      	mov	r4, r1
 800d868:	2101      	movs	r1, #1
 800d86a:	f7ff feb9 	bl	800d5e0 <_Balloc>
 800d86e:	4602      	mov	r2, r0
 800d870:	b928      	cbnz	r0, 800d87e <__i2b+0x1a>
 800d872:	4b05      	ldr	r3, [pc, #20]	; (800d888 <__i2b+0x24>)
 800d874:	4805      	ldr	r0, [pc, #20]	; (800d88c <__i2b+0x28>)
 800d876:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d87a:	f001 f965 	bl	800eb48 <__assert_func>
 800d87e:	2301      	movs	r3, #1
 800d880:	6144      	str	r4, [r0, #20]
 800d882:	6103      	str	r3, [r0, #16]
 800d884:	bd10      	pop	{r4, pc}
 800d886:	bf00      	nop
 800d888:	080110e0 	.word	0x080110e0
 800d88c:	0801116c 	.word	0x0801116c

0800d890 <__multiply>:
 800d890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d894:	4691      	mov	r9, r2
 800d896:	690a      	ldr	r2, [r1, #16]
 800d898:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	bfb8      	it	lt
 800d8a0:	460b      	movlt	r3, r1
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	bfbc      	itt	lt
 800d8a6:	464c      	movlt	r4, r9
 800d8a8:	4699      	movlt	r9, r3
 800d8aa:	6927      	ldr	r7, [r4, #16]
 800d8ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d8b0:	68a3      	ldr	r3, [r4, #8]
 800d8b2:	6861      	ldr	r1, [r4, #4]
 800d8b4:	eb07 060a 	add.w	r6, r7, sl
 800d8b8:	42b3      	cmp	r3, r6
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	bfb8      	it	lt
 800d8be:	3101      	addlt	r1, #1
 800d8c0:	f7ff fe8e 	bl	800d5e0 <_Balloc>
 800d8c4:	b930      	cbnz	r0, 800d8d4 <__multiply+0x44>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	4b44      	ldr	r3, [pc, #272]	; (800d9dc <__multiply+0x14c>)
 800d8ca:	4845      	ldr	r0, [pc, #276]	; (800d9e0 <__multiply+0x150>)
 800d8cc:	f240 115d 	movw	r1, #349	; 0x15d
 800d8d0:	f001 f93a 	bl	800eb48 <__assert_func>
 800d8d4:	f100 0514 	add.w	r5, r0, #20
 800d8d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8dc:	462b      	mov	r3, r5
 800d8de:	2200      	movs	r2, #0
 800d8e0:	4543      	cmp	r3, r8
 800d8e2:	d321      	bcc.n	800d928 <__multiply+0x98>
 800d8e4:	f104 0314 	add.w	r3, r4, #20
 800d8e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d8ec:	f109 0314 	add.w	r3, r9, #20
 800d8f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d8f4:	9202      	str	r2, [sp, #8]
 800d8f6:	1b3a      	subs	r2, r7, r4
 800d8f8:	3a15      	subs	r2, #21
 800d8fa:	f022 0203 	bic.w	r2, r2, #3
 800d8fe:	3204      	adds	r2, #4
 800d900:	f104 0115 	add.w	r1, r4, #21
 800d904:	428f      	cmp	r7, r1
 800d906:	bf38      	it	cc
 800d908:	2204      	movcc	r2, #4
 800d90a:	9201      	str	r2, [sp, #4]
 800d90c:	9a02      	ldr	r2, [sp, #8]
 800d90e:	9303      	str	r3, [sp, #12]
 800d910:	429a      	cmp	r2, r3
 800d912:	d80c      	bhi.n	800d92e <__multiply+0x9e>
 800d914:	2e00      	cmp	r6, #0
 800d916:	dd03      	ble.n	800d920 <__multiply+0x90>
 800d918:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d05a      	beq.n	800d9d6 <__multiply+0x146>
 800d920:	6106      	str	r6, [r0, #16]
 800d922:	b005      	add	sp, #20
 800d924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d928:	f843 2b04 	str.w	r2, [r3], #4
 800d92c:	e7d8      	b.n	800d8e0 <__multiply+0x50>
 800d92e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d932:	f1ba 0f00 	cmp.w	sl, #0
 800d936:	d024      	beq.n	800d982 <__multiply+0xf2>
 800d938:	f104 0e14 	add.w	lr, r4, #20
 800d93c:	46a9      	mov	r9, r5
 800d93e:	f04f 0c00 	mov.w	ip, #0
 800d942:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d946:	f8d9 1000 	ldr.w	r1, [r9]
 800d94a:	fa1f fb82 	uxth.w	fp, r2
 800d94e:	b289      	uxth	r1, r1
 800d950:	fb0a 110b 	mla	r1, sl, fp, r1
 800d954:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d958:	f8d9 2000 	ldr.w	r2, [r9]
 800d95c:	4461      	add	r1, ip
 800d95e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d962:	fb0a c20b 	mla	r2, sl, fp, ip
 800d966:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d96a:	b289      	uxth	r1, r1
 800d96c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d970:	4577      	cmp	r7, lr
 800d972:	f849 1b04 	str.w	r1, [r9], #4
 800d976:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d97a:	d8e2      	bhi.n	800d942 <__multiply+0xb2>
 800d97c:	9a01      	ldr	r2, [sp, #4]
 800d97e:	f845 c002 	str.w	ip, [r5, r2]
 800d982:	9a03      	ldr	r2, [sp, #12]
 800d984:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d988:	3304      	adds	r3, #4
 800d98a:	f1b9 0f00 	cmp.w	r9, #0
 800d98e:	d020      	beq.n	800d9d2 <__multiply+0x142>
 800d990:	6829      	ldr	r1, [r5, #0]
 800d992:	f104 0c14 	add.w	ip, r4, #20
 800d996:	46ae      	mov	lr, r5
 800d998:	f04f 0a00 	mov.w	sl, #0
 800d99c:	f8bc b000 	ldrh.w	fp, [ip]
 800d9a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d9a4:	fb09 220b 	mla	r2, r9, fp, r2
 800d9a8:	4492      	add	sl, r2
 800d9aa:	b289      	uxth	r1, r1
 800d9ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d9b0:	f84e 1b04 	str.w	r1, [lr], #4
 800d9b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d9b8:	f8be 1000 	ldrh.w	r1, [lr]
 800d9bc:	0c12      	lsrs	r2, r2, #16
 800d9be:	fb09 1102 	mla	r1, r9, r2, r1
 800d9c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d9c6:	4567      	cmp	r7, ip
 800d9c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d9cc:	d8e6      	bhi.n	800d99c <__multiply+0x10c>
 800d9ce:	9a01      	ldr	r2, [sp, #4]
 800d9d0:	50a9      	str	r1, [r5, r2]
 800d9d2:	3504      	adds	r5, #4
 800d9d4:	e79a      	b.n	800d90c <__multiply+0x7c>
 800d9d6:	3e01      	subs	r6, #1
 800d9d8:	e79c      	b.n	800d914 <__multiply+0x84>
 800d9da:	bf00      	nop
 800d9dc:	080110e0 	.word	0x080110e0
 800d9e0:	0801116c 	.word	0x0801116c

0800d9e4 <__pow5mult>:
 800d9e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9e8:	4615      	mov	r5, r2
 800d9ea:	f012 0203 	ands.w	r2, r2, #3
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	460f      	mov	r7, r1
 800d9f2:	d007      	beq.n	800da04 <__pow5mult+0x20>
 800d9f4:	4c25      	ldr	r4, [pc, #148]	; (800da8c <__pow5mult+0xa8>)
 800d9f6:	3a01      	subs	r2, #1
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9fe:	f7ff fe51 	bl	800d6a4 <__multadd>
 800da02:	4607      	mov	r7, r0
 800da04:	10ad      	asrs	r5, r5, #2
 800da06:	d03d      	beq.n	800da84 <__pow5mult+0xa0>
 800da08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800da0a:	b97c      	cbnz	r4, 800da2c <__pow5mult+0x48>
 800da0c:	2010      	movs	r0, #16
 800da0e:	f7ff fdc1 	bl	800d594 <malloc>
 800da12:	4602      	mov	r2, r0
 800da14:	6270      	str	r0, [r6, #36]	; 0x24
 800da16:	b928      	cbnz	r0, 800da24 <__pow5mult+0x40>
 800da18:	4b1d      	ldr	r3, [pc, #116]	; (800da90 <__pow5mult+0xac>)
 800da1a:	481e      	ldr	r0, [pc, #120]	; (800da94 <__pow5mult+0xb0>)
 800da1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da20:	f001 f892 	bl	800eb48 <__assert_func>
 800da24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da28:	6004      	str	r4, [r0, #0]
 800da2a:	60c4      	str	r4, [r0, #12]
 800da2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da34:	b94c      	cbnz	r4, 800da4a <__pow5mult+0x66>
 800da36:	f240 2171 	movw	r1, #625	; 0x271
 800da3a:	4630      	mov	r0, r6
 800da3c:	f7ff ff12 	bl	800d864 <__i2b>
 800da40:	2300      	movs	r3, #0
 800da42:	f8c8 0008 	str.w	r0, [r8, #8]
 800da46:	4604      	mov	r4, r0
 800da48:	6003      	str	r3, [r0, #0]
 800da4a:	f04f 0900 	mov.w	r9, #0
 800da4e:	07eb      	lsls	r3, r5, #31
 800da50:	d50a      	bpl.n	800da68 <__pow5mult+0x84>
 800da52:	4639      	mov	r1, r7
 800da54:	4622      	mov	r2, r4
 800da56:	4630      	mov	r0, r6
 800da58:	f7ff ff1a 	bl	800d890 <__multiply>
 800da5c:	4639      	mov	r1, r7
 800da5e:	4680      	mov	r8, r0
 800da60:	4630      	mov	r0, r6
 800da62:	f7ff fdfd 	bl	800d660 <_Bfree>
 800da66:	4647      	mov	r7, r8
 800da68:	106d      	asrs	r5, r5, #1
 800da6a:	d00b      	beq.n	800da84 <__pow5mult+0xa0>
 800da6c:	6820      	ldr	r0, [r4, #0]
 800da6e:	b938      	cbnz	r0, 800da80 <__pow5mult+0x9c>
 800da70:	4622      	mov	r2, r4
 800da72:	4621      	mov	r1, r4
 800da74:	4630      	mov	r0, r6
 800da76:	f7ff ff0b 	bl	800d890 <__multiply>
 800da7a:	6020      	str	r0, [r4, #0]
 800da7c:	f8c0 9000 	str.w	r9, [r0]
 800da80:	4604      	mov	r4, r0
 800da82:	e7e4      	b.n	800da4e <__pow5mult+0x6a>
 800da84:	4638      	mov	r0, r7
 800da86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da8a:	bf00      	nop
 800da8c:	080112b8 	.word	0x080112b8
 800da90:	0801106e 	.word	0x0801106e
 800da94:	0801116c 	.word	0x0801116c

0800da98 <__lshift>:
 800da98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da9c:	460c      	mov	r4, r1
 800da9e:	6849      	ldr	r1, [r1, #4]
 800daa0:	6923      	ldr	r3, [r4, #16]
 800daa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800daa6:	68a3      	ldr	r3, [r4, #8]
 800daa8:	4607      	mov	r7, r0
 800daaa:	4691      	mov	r9, r2
 800daac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dab0:	f108 0601 	add.w	r6, r8, #1
 800dab4:	42b3      	cmp	r3, r6
 800dab6:	db0b      	blt.n	800dad0 <__lshift+0x38>
 800dab8:	4638      	mov	r0, r7
 800daba:	f7ff fd91 	bl	800d5e0 <_Balloc>
 800dabe:	4605      	mov	r5, r0
 800dac0:	b948      	cbnz	r0, 800dad6 <__lshift+0x3e>
 800dac2:	4602      	mov	r2, r0
 800dac4:	4b2a      	ldr	r3, [pc, #168]	; (800db70 <__lshift+0xd8>)
 800dac6:	482b      	ldr	r0, [pc, #172]	; (800db74 <__lshift+0xdc>)
 800dac8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dacc:	f001 f83c 	bl	800eb48 <__assert_func>
 800dad0:	3101      	adds	r1, #1
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	e7ee      	b.n	800dab4 <__lshift+0x1c>
 800dad6:	2300      	movs	r3, #0
 800dad8:	f100 0114 	add.w	r1, r0, #20
 800dadc:	f100 0210 	add.w	r2, r0, #16
 800dae0:	4618      	mov	r0, r3
 800dae2:	4553      	cmp	r3, sl
 800dae4:	db37      	blt.n	800db56 <__lshift+0xbe>
 800dae6:	6920      	ldr	r0, [r4, #16]
 800dae8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800daec:	f104 0314 	add.w	r3, r4, #20
 800daf0:	f019 091f 	ands.w	r9, r9, #31
 800daf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800daf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dafc:	d02f      	beq.n	800db5e <__lshift+0xc6>
 800dafe:	f1c9 0e20 	rsb	lr, r9, #32
 800db02:	468a      	mov	sl, r1
 800db04:	f04f 0c00 	mov.w	ip, #0
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	fa02 f209 	lsl.w	r2, r2, r9
 800db0e:	ea42 020c 	orr.w	r2, r2, ip
 800db12:	f84a 2b04 	str.w	r2, [sl], #4
 800db16:	f853 2b04 	ldr.w	r2, [r3], #4
 800db1a:	4298      	cmp	r0, r3
 800db1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800db20:	d8f2      	bhi.n	800db08 <__lshift+0x70>
 800db22:	1b03      	subs	r3, r0, r4
 800db24:	3b15      	subs	r3, #21
 800db26:	f023 0303 	bic.w	r3, r3, #3
 800db2a:	3304      	adds	r3, #4
 800db2c:	f104 0215 	add.w	r2, r4, #21
 800db30:	4290      	cmp	r0, r2
 800db32:	bf38      	it	cc
 800db34:	2304      	movcc	r3, #4
 800db36:	f841 c003 	str.w	ip, [r1, r3]
 800db3a:	f1bc 0f00 	cmp.w	ip, #0
 800db3e:	d001      	beq.n	800db44 <__lshift+0xac>
 800db40:	f108 0602 	add.w	r6, r8, #2
 800db44:	3e01      	subs	r6, #1
 800db46:	4638      	mov	r0, r7
 800db48:	612e      	str	r6, [r5, #16]
 800db4a:	4621      	mov	r1, r4
 800db4c:	f7ff fd88 	bl	800d660 <_Bfree>
 800db50:	4628      	mov	r0, r5
 800db52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db56:	f842 0f04 	str.w	r0, [r2, #4]!
 800db5a:	3301      	adds	r3, #1
 800db5c:	e7c1      	b.n	800dae2 <__lshift+0x4a>
 800db5e:	3904      	subs	r1, #4
 800db60:	f853 2b04 	ldr.w	r2, [r3], #4
 800db64:	f841 2f04 	str.w	r2, [r1, #4]!
 800db68:	4298      	cmp	r0, r3
 800db6a:	d8f9      	bhi.n	800db60 <__lshift+0xc8>
 800db6c:	e7ea      	b.n	800db44 <__lshift+0xac>
 800db6e:	bf00      	nop
 800db70:	080110e0 	.word	0x080110e0
 800db74:	0801116c 	.word	0x0801116c

0800db78 <__mcmp>:
 800db78:	b530      	push	{r4, r5, lr}
 800db7a:	6902      	ldr	r2, [r0, #16]
 800db7c:	690c      	ldr	r4, [r1, #16]
 800db7e:	1b12      	subs	r2, r2, r4
 800db80:	d10e      	bne.n	800dba0 <__mcmp+0x28>
 800db82:	f100 0314 	add.w	r3, r0, #20
 800db86:	3114      	adds	r1, #20
 800db88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db98:	42a5      	cmp	r5, r4
 800db9a:	d003      	beq.n	800dba4 <__mcmp+0x2c>
 800db9c:	d305      	bcc.n	800dbaa <__mcmp+0x32>
 800db9e:	2201      	movs	r2, #1
 800dba0:	4610      	mov	r0, r2
 800dba2:	bd30      	pop	{r4, r5, pc}
 800dba4:	4283      	cmp	r3, r0
 800dba6:	d3f3      	bcc.n	800db90 <__mcmp+0x18>
 800dba8:	e7fa      	b.n	800dba0 <__mcmp+0x28>
 800dbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800dbae:	e7f7      	b.n	800dba0 <__mcmp+0x28>

0800dbb0 <__mdiff>:
 800dbb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb4:	460c      	mov	r4, r1
 800dbb6:	4606      	mov	r6, r0
 800dbb8:	4611      	mov	r1, r2
 800dbba:	4620      	mov	r0, r4
 800dbbc:	4690      	mov	r8, r2
 800dbbe:	f7ff ffdb 	bl	800db78 <__mcmp>
 800dbc2:	1e05      	subs	r5, r0, #0
 800dbc4:	d110      	bne.n	800dbe8 <__mdiff+0x38>
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7ff fd09 	bl	800d5e0 <_Balloc>
 800dbce:	b930      	cbnz	r0, 800dbde <__mdiff+0x2e>
 800dbd0:	4b3a      	ldr	r3, [pc, #232]	; (800dcbc <__mdiff+0x10c>)
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	f240 2132 	movw	r1, #562	; 0x232
 800dbd8:	4839      	ldr	r0, [pc, #228]	; (800dcc0 <__mdiff+0x110>)
 800dbda:	f000 ffb5 	bl	800eb48 <__assert_func>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe8:	bfa4      	itt	ge
 800dbea:	4643      	movge	r3, r8
 800dbec:	46a0      	movge	r8, r4
 800dbee:	4630      	mov	r0, r6
 800dbf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dbf4:	bfa6      	itte	ge
 800dbf6:	461c      	movge	r4, r3
 800dbf8:	2500      	movge	r5, #0
 800dbfa:	2501      	movlt	r5, #1
 800dbfc:	f7ff fcf0 	bl	800d5e0 <_Balloc>
 800dc00:	b920      	cbnz	r0, 800dc0c <__mdiff+0x5c>
 800dc02:	4b2e      	ldr	r3, [pc, #184]	; (800dcbc <__mdiff+0x10c>)
 800dc04:	4602      	mov	r2, r0
 800dc06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dc0a:	e7e5      	b.n	800dbd8 <__mdiff+0x28>
 800dc0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc10:	6926      	ldr	r6, [r4, #16]
 800dc12:	60c5      	str	r5, [r0, #12]
 800dc14:	f104 0914 	add.w	r9, r4, #20
 800dc18:	f108 0514 	add.w	r5, r8, #20
 800dc1c:	f100 0e14 	add.w	lr, r0, #20
 800dc20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dc24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dc28:	f108 0210 	add.w	r2, r8, #16
 800dc2c:	46f2      	mov	sl, lr
 800dc2e:	2100      	movs	r1, #0
 800dc30:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc38:	fa1f f883 	uxth.w	r8, r3
 800dc3c:	fa11 f18b 	uxtah	r1, r1, fp
 800dc40:	0c1b      	lsrs	r3, r3, #16
 800dc42:	eba1 0808 	sub.w	r8, r1, r8
 800dc46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc4e:	fa1f f888 	uxth.w	r8, r8
 800dc52:	1419      	asrs	r1, r3, #16
 800dc54:	454e      	cmp	r6, r9
 800dc56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc5a:	f84a 3b04 	str.w	r3, [sl], #4
 800dc5e:	d8e7      	bhi.n	800dc30 <__mdiff+0x80>
 800dc60:	1b33      	subs	r3, r6, r4
 800dc62:	3b15      	subs	r3, #21
 800dc64:	f023 0303 	bic.w	r3, r3, #3
 800dc68:	3304      	adds	r3, #4
 800dc6a:	3415      	adds	r4, #21
 800dc6c:	42a6      	cmp	r6, r4
 800dc6e:	bf38      	it	cc
 800dc70:	2304      	movcc	r3, #4
 800dc72:	441d      	add	r5, r3
 800dc74:	4473      	add	r3, lr
 800dc76:	469e      	mov	lr, r3
 800dc78:	462e      	mov	r6, r5
 800dc7a:	4566      	cmp	r6, ip
 800dc7c:	d30e      	bcc.n	800dc9c <__mdiff+0xec>
 800dc7e:	f10c 0203 	add.w	r2, ip, #3
 800dc82:	1b52      	subs	r2, r2, r5
 800dc84:	f022 0203 	bic.w	r2, r2, #3
 800dc88:	3d03      	subs	r5, #3
 800dc8a:	45ac      	cmp	ip, r5
 800dc8c:	bf38      	it	cc
 800dc8e:	2200      	movcc	r2, #0
 800dc90:	441a      	add	r2, r3
 800dc92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc96:	b17b      	cbz	r3, 800dcb8 <__mdiff+0x108>
 800dc98:	6107      	str	r7, [r0, #16]
 800dc9a:	e7a3      	b.n	800dbe4 <__mdiff+0x34>
 800dc9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800dca0:	fa11 f288 	uxtah	r2, r1, r8
 800dca4:	1414      	asrs	r4, r2, #16
 800dca6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dcaa:	b292      	uxth	r2, r2
 800dcac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dcb0:	f84e 2b04 	str.w	r2, [lr], #4
 800dcb4:	1421      	asrs	r1, r4, #16
 800dcb6:	e7e0      	b.n	800dc7a <__mdiff+0xca>
 800dcb8:	3f01      	subs	r7, #1
 800dcba:	e7ea      	b.n	800dc92 <__mdiff+0xe2>
 800dcbc:	080110e0 	.word	0x080110e0
 800dcc0:	0801116c 	.word	0x0801116c

0800dcc4 <__ulp>:
 800dcc4:	b082      	sub	sp, #8
 800dcc6:	ed8d 0b00 	vstr	d0, [sp]
 800dcca:	9b01      	ldr	r3, [sp, #4]
 800dccc:	4912      	ldr	r1, [pc, #72]	; (800dd18 <__ulp+0x54>)
 800dcce:	4019      	ands	r1, r3
 800dcd0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dcd4:	2900      	cmp	r1, #0
 800dcd6:	dd05      	ble.n	800dce4 <__ulp+0x20>
 800dcd8:	2200      	movs	r2, #0
 800dcda:	460b      	mov	r3, r1
 800dcdc:	ec43 2b10 	vmov	d0, r2, r3
 800dce0:	b002      	add	sp, #8
 800dce2:	4770      	bx	lr
 800dce4:	4249      	negs	r1, r1
 800dce6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dcea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dcee:	f04f 0200 	mov.w	r2, #0
 800dcf2:	f04f 0300 	mov.w	r3, #0
 800dcf6:	da04      	bge.n	800dd02 <__ulp+0x3e>
 800dcf8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dcfc:	fa41 f300 	asr.w	r3, r1, r0
 800dd00:	e7ec      	b.n	800dcdc <__ulp+0x18>
 800dd02:	f1a0 0114 	sub.w	r1, r0, #20
 800dd06:	291e      	cmp	r1, #30
 800dd08:	bfda      	itte	le
 800dd0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dd0e:	fa20 f101 	lsrle.w	r1, r0, r1
 800dd12:	2101      	movgt	r1, #1
 800dd14:	460a      	mov	r2, r1
 800dd16:	e7e1      	b.n	800dcdc <__ulp+0x18>
 800dd18:	7ff00000 	.word	0x7ff00000

0800dd1c <__b2d>:
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1e:	6905      	ldr	r5, [r0, #16]
 800dd20:	f100 0714 	add.w	r7, r0, #20
 800dd24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dd28:	1f2e      	subs	r6, r5, #4
 800dd2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f7ff fd48 	bl	800d7c4 <__hi0bits>
 800dd34:	f1c0 0320 	rsb	r3, r0, #32
 800dd38:	280a      	cmp	r0, #10
 800dd3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ddb8 <__b2d+0x9c>
 800dd3e:	600b      	str	r3, [r1, #0]
 800dd40:	dc14      	bgt.n	800dd6c <__b2d+0x50>
 800dd42:	f1c0 0e0b 	rsb	lr, r0, #11
 800dd46:	fa24 f10e 	lsr.w	r1, r4, lr
 800dd4a:	42b7      	cmp	r7, r6
 800dd4c:	ea41 030c 	orr.w	r3, r1, ip
 800dd50:	bf34      	ite	cc
 800dd52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd56:	2100      	movcs	r1, #0
 800dd58:	3015      	adds	r0, #21
 800dd5a:	fa04 f000 	lsl.w	r0, r4, r0
 800dd5e:	fa21 f10e 	lsr.w	r1, r1, lr
 800dd62:	ea40 0201 	orr.w	r2, r0, r1
 800dd66:	ec43 2b10 	vmov	d0, r2, r3
 800dd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd6c:	42b7      	cmp	r7, r6
 800dd6e:	bf3a      	itte	cc
 800dd70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dd74:	f1a5 0608 	subcc.w	r6, r5, #8
 800dd78:	2100      	movcs	r1, #0
 800dd7a:	380b      	subs	r0, #11
 800dd7c:	d017      	beq.n	800ddae <__b2d+0x92>
 800dd7e:	f1c0 0c20 	rsb	ip, r0, #32
 800dd82:	fa04 f500 	lsl.w	r5, r4, r0
 800dd86:	42be      	cmp	r6, r7
 800dd88:	fa21 f40c 	lsr.w	r4, r1, ip
 800dd8c:	ea45 0504 	orr.w	r5, r5, r4
 800dd90:	bf8c      	ite	hi
 800dd92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dd96:	2400      	movls	r4, #0
 800dd98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dd9c:	fa01 f000 	lsl.w	r0, r1, r0
 800dda0:	fa24 f40c 	lsr.w	r4, r4, ip
 800dda4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dda8:	ea40 0204 	orr.w	r2, r0, r4
 800ddac:	e7db      	b.n	800dd66 <__b2d+0x4a>
 800ddae:	ea44 030c 	orr.w	r3, r4, ip
 800ddb2:	460a      	mov	r2, r1
 800ddb4:	e7d7      	b.n	800dd66 <__b2d+0x4a>
 800ddb6:	bf00      	nop
 800ddb8:	3ff00000 	.word	0x3ff00000

0800ddbc <__d2b>:
 800ddbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ddc0:	4689      	mov	r9, r1
 800ddc2:	2101      	movs	r1, #1
 800ddc4:	ec57 6b10 	vmov	r6, r7, d0
 800ddc8:	4690      	mov	r8, r2
 800ddca:	f7ff fc09 	bl	800d5e0 <_Balloc>
 800ddce:	4604      	mov	r4, r0
 800ddd0:	b930      	cbnz	r0, 800dde0 <__d2b+0x24>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	4b25      	ldr	r3, [pc, #148]	; (800de6c <__d2b+0xb0>)
 800ddd6:	4826      	ldr	r0, [pc, #152]	; (800de70 <__d2b+0xb4>)
 800ddd8:	f240 310a 	movw	r1, #778	; 0x30a
 800dddc:	f000 feb4 	bl	800eb48 <__assert_func>
 800dde0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dde4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dde8:	bb35      	cbnz	r5, 800de38 <__d2b+0x7c>
 800ddea:	2e00      	cmp	r6, #0
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	d028      	beq.n	800de42 <__d2b+0x86>
 800ddf0:	4668      	mov	r0, sp
 800ddf2:	9600      	str	r6, [sp, #0]
 800ddf4:	f7ff fd06 	bl	800d804 <__lo0bits>
 800ddf8:	9900      	ldr	r1, [sp, #0]
 800ddfa:	b300      	cbz	r0, 800de3e <__d2b+0x82>
 800ddfc:	9a01      	ldr	r2, [sp, #4]
 800ddfe:	f1c0 0320 	rsb	r3, r0, #32
 800de02:	fa02 f303 	lsl.w	r3, r2, r3
 800de06:	430b      	orrs	r3, r1
 800de08:	40c2      	lsrs	r2, r0
 800de0a:	6163      	str	r3, [r4, #20]
 800de0c:	9201      	str	r2, [sp, #4]
 800de0e:	9b01      	ldr	r3, [sp, #4]
 800de10:	61a3      	str	r3, [r4, #24]
 800de12:	2b00      	cmp	r3, #0
 800de14:	bf14      	ite	ne
 800de16:	2202      	movne	r2, #2
 800de18:	2201      	moveq	r2, #1
 800de1a:	6122      	str	r2, [r4, #16]
 800de1c:	b1d5      	cbz	r5, 800de54 <__d2b+0x98>
 800de1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800de22:	4405      	add	r5, r0
 800de24:	f8c9 5000 	str.w	r5, [r9]
 800de28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800de2c:	f8c8 0000 	str.w	r0, [r8]
 800de30:	4620      	mov	r0, r4
 800de32:	b003      	add	sp, #12
 800de34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de3c:	e7d5      	b.n	800ddea <__d2b+0x2e>
 800de3e:	6161      	str	r1, [r4, #20]
 800de40:	e7e5      	b.n	800de0e <__d2b+0x52>
 800de42:	a801      	add	r0, sp, #4
 800de44:	f7ff fcde 	bl	800d804 <__lo0bits>
 800de48:	9b01      	ldr	r3, [sp, #4]
 800de4a:	6163      	str	r3, [r4, #20]
 800de4c:	2201      	movs	r2, #1
 800de4e:	6122      	str	r2, [r4, #16]
 800de50:	3020      	adds	r0, #32
 800de52:	e7e3      	b.n	800de1c <__d2b+0x60>
 800de54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800de5c:	f8c9 0000 	str.w	r0, [r9]
 800de60:	6918      	ldr	r0, [r3, #16]
 800de62:	f7ff fcaf 	bl	800d7c4 <__hi0bits>
 800de66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de6a:	e7df      	b.n	800de2c <__d2b+0x70>
 800de6c:	080110e0 	.word	0x080110e0
 800de70:	0801116c 	.word	0x0801116c

0800de74 <__ratio>:
 800de74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de78:	4688      	mov	r8, r1
 800de7a:	4669      	mov	r1, sp
 800de7c:	4681      	mov	r9, r0
 800de7e:	f7ff ff4d 	bl	800dd1c <__b2d>
 800de82:	a901      	add	r1, sp, #4
 800de84:	4640      	mov	r0, r8
 800de86:	ec55 4b10 	vmov	r4, r5, d0
 800de8a:	f7ff ff47 	bl	800dd1c <__b2d>
 800de8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de96:	eba3 0c02 	sub.w	ip, r3, r2
 800de9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de9e:	1a9b      	subs	r3, r3, r2
 800dea0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dea4:	ec51 0b10 	vmov	r0, r1, d0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	bfd6      	itet	le
 800deac:	460a      	movle	r2, r1
 800deae:	462a      	movgt	r2, r5
 800deb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800deb4:	468b      	mov	fp, r1
 800deb6:	462f      	mov	r7, r5
 800deb8:	bfd4      	ite	le
 800deba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800debe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dec2:	4620      	mov	r0, r4
 800dec4:	ee10 2a10 	vmov	r2, s0
 800dec8:	465b      	mov	r3, fp
 800deca:	4639      	mov	r1, r7
 800decc:	f7f2 fcce 	bl	800086c <__aeabi_ddiv>
 800ded0:	ec41 0b10 	vmov	d0, r0, r1
 800ded4:	b003      	add	sp, #12
 800ded6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800deda <__copybits>:
 800deda:	3901      	subs	r1, #1
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	1149      	asrs	r1, r1, #5
 800dee0:	6914      	ldr	r4, [r2, #16]
 800dee2:	3101      	adds	r1, #1
 800dee4:	f102 0314 	add.w	r3, r2, #20
 800dee8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800deec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800def0:	1f05      	subs	r5, r0, #4
 800def2:	42a3      	cmp	r3, r4
 800def4:	d30c      	bcc.n	800df10 <__copybits+0x36>
 800def6:	1aa3      	subs	r3, r4, r2
 800def8:	3b11      	subs	r3, #17
 800defa:	f023 0303 	bic.w	r3, r3, #3
 800defe:	3211      	adds	r2, #17
 800df00:	42a2      	cmp	r2, r4
 800df02:	bf88      	it	hi
 800df04:	2300      	movhi	r3, #0
 800df06:	4418      	add	r0, r3
 800df08:	2300      	movs	r3, #0
 800df0a:	4288      	cmp	r0, r1
 800df0c:	d305      	bcc.n	800df1a <__copybits+0x40>
 800df0e:	bd70      	pop	{r4, r5, r6, pc}
 800df10:	f853 6b04 	ldr.w	r6, [r3], #4
 800df14:	f845 6f04 	str.w	r6, [r5, #4]!
 800df18:	e7eb      	b.n	800def2 <__copybits+0x18>
 800df1a:	f840 3b04 	str.w	r3, [r0], #4
 800df1e:	e7f4      	b.n	800df0a <__copybits+0x30>

0800df20 <__any_on>:
 800df20:	f100 0214 	add.w	r2, r0, #20
 800df24:	6900      	ldr	r0, [r0, #16]
 800df26:	114b      	asrs	r3, r1, #5
 800df28:	4298      	cmp	r0, r3
 800df2a:	b510      	push	{r4, lr}
 800df2c:	db11      	blt.n	800df52 <__any_on+0x32>
 800df2e:	dd0a      	ble.n	800df46 <__any_on+0x26>
 800df30:	f011 011f 	ands.w	r1, r1, #31
 800df34:	d007      	beq.n	800df46 <__any_on+0x26>
 800df36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800df3a:	fa24 f001 	lsr.w	r0, r4, r1
 800df3e:	fa00 f101 	lsl.w	r1, r0, r1
 800df42:	428c      	cmp	r4, r1
 800df44:	d10b      	bne.n	800df5e <__any_on+0x3e>
 800df46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d803      	bhi.n	800df56 <__any_on+0x36>
 800df4e:	2000      	movs	r0, #0
 800df50:	bd10      	pop	{r4, pc}
 800df52:	4603      	mov	r3, r0
 800df54:	e7f7      	b.n	800df46 <__any_on+0x26>
 800df56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df5a:	2900      	cmp	r1, #0
 800df5c:	d0f5      	beq.n	800df4a <__any_on+0x2a>
 800df5e:	2001      	movs	r0, #1
 800df60:	e7f6      	b.n	800df50 <__any_on+0x30>

0800df62 <_calloc_r>:
 800df62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df64:	fba1 2402 	umull	r2, r4, r1, r2
 800df68:	b94c      	cbnz	r4, 800df7e <_calloc_r+0x1c>
 800df6a:	4611      	mov	r1, r2
 800df6c:	9201      	str	r2, [sp, #4]
 800df6e:	f7fc f8bf 	bl	800a0f0 <_malloc_r>
 800df72:	9a01      	ldr	r2, [sp, #4]
 800df74:	4605      	mov	r5, r0
 800df76:	b930      	cbnz	r0, 800df86 <_calloc_r+0x24>
 800df78:	4628      	mov	r0, r5
 800df7a:	b003      	add	sp, #12
 800df7c:	bd30      	pop	{r4, r5, pc}
 800df7e:	220c      	movs	r2, #12
 800df80:	6002      	str	r2, [r0, #0]
 800df82:	2500      	movs	r5, #0
 800df84:	e7f8      	b.n	800df78 <_calloc_r+0x16>
 800df86:	4621      	mov	r1, r4
 800df88:	f7fc f889 	bl	800a09e <memset>
 800df8c:	e7f4      	b.n	800df78 <_calloc_r+0x16>
	...

0800df90 <_free_r>:
 800df90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df92:	2900      	cmp	r1, #0
 800df94:	d044      	beq.n	800e020 <_free_r+0x90>
 800df96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df9a:	9001      	str	r0, [sp, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f1a1 0404 	sub.w	r4, r1, #4
 800dfa2:	bfb8      	it	lt
 800dfa4:	18e4      	addlt	r4, r4, r3
 800dfa6:	f7ff fb0f 	bl	800d5c8 <__malloc_lock>
 800dfaa:	4a1e      	ldr	r2, [pc, #120]	; (800e024 <_free_r+0x94>)
 800dfac:	9801      	ldr	r0, [sp, #4]
 800dfae:	6813      	ldr	r3, [r2, #0]
 800dfb0:	b933      	cbnz	r3, 800dfc0 <_free_r+0x30>
 800dfb2:	6063      	str	r3, [r4, #4]
 800dfb4:	6014      	str	r4, [r2, #0]
 800dfb6:	b003      	add	sp, #12
 800dfb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfbc:	f7ff bb0a 	b.w	800d5d4 <__malloc_unlock>
 800dfc0:	42a3      	cmp	r3, r4
 800dfc2:	d908      	bls.n	800dfd6 <_free_r+0x46>
 800dfc4:	6825      	ldr	r5, [r4, #0]
 800dfc6:	1961      	adds	r1, r4, r5
 800dfc8:	428b      	cmp	r3, r1
 800dfca:	bf01      	itttt	eq
 800dfcc:	6819      	ldreq	r1, [r3, #0]
 800dfce:	685b      	ldreq	r3, [r3, #4]
 800dfd0:	1949      	addeq	r1, r1, r5
 800dfd2:	6021      	streq	r1, [r4, #0]
 800dfd4:	e7ed      	b.n	800dfb2 <_free_r+0x22>
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	b10b      	cbz	r3, 800dfe0 <_free_r+0x50>
 800dfdc:	42a3      	cmp	r3, r4
 800dfde:	d9fa      	bls.n	800dfd6 <_free_r+0x46>
 800dfe0:	6811      	ldr	r1, [r2, #0]
 800dfe2:	1855      	adds	r5, r2, r1
 800dfe4:	42a5      	cmp	r5, r4
 800dfe6:	d10b      	bne.n	800e000 <_free_r+0x70>
 800dfe8:	6824      	ldr	r4, [r4, #0]
 800dfea:	4421      	add	r1, r4
 800dfec:	1854      	adds	r4, r2, r1
 800dfee:	42a3      	cmp	r3, r4
 800dff0:	6011      	str	r1, [r2, #0]
 800dff2:	d1e0      	bne.n	800dfb6 <_free_r+0x26>
 800dff4:	681c      	ldr	r4, [r3, #0]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	6053      	str	r3, [r2, #4]
 800dffa:	4421      	add	r1, r4
 800dffc:	6011      	str	r1, [r2, #0]
 800dffe:	e7da      	b.n	800dfb6 <_free_r+0x26>
 800e000:	d902      	bls.n	800e008 <_free_r+0x78>
 800e002:	230c      	movs	r3, #12
 800e004:	6003      	str	r3, [r0, #0]
 800e006:	e7d6      	b.n	800dfb6 <_free_r+0x26>
 800e008:	6825      	ldr	r5, [r4, #0]
 800e00a:	1961      	adds	r1, r4, r5
 800e00c:	428b      	cmp	r3, r1
 800e00e:	bf04      	itt	eq
 800e010:	6819      	ldreq	r1, [r3, #0]
 800e012:	685b      	ldreq	r3, [r3, #4]
 800e014:	6063      	str	r3, [r4, #4]
 800e016:	bf04      	itt	eq
 800e018:	1949      	addeq	r1, r1, r5
 800e01a:	6021      	streq	r1, [r4, #0]
 800e01c:	6054      	str	r4, [r2, #4]
 800e01e:	e7ca      	b.n	800dfb6 <_free_r+0x26>
 800e020:	b003      	add	sp, #12
 800e022:	bd30      	pop	{r4, r5, pc}
 800e024:	2000db5c 	.word	0x2000db5c

0800e028 <__ssputs_r>:
 800e028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e02c:	688e      	ldr	r6, [r1, #8]
 800e02e:	429e      	cmp	r6, r3
 800e030:	4682      	mov	sl, r0
 800e032:	460c      	mov	r4, r1
 800e034:	4690      	mov	r8, r2
 800e036:	461f      	mov	r7, r3
 800e038:	d838      	bhi.n	800e0ac <__ssputs_r+0x84>
 800e03a:	898a      	ldrh	r2, [r1, #12]
 800e03c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e040:	d032      	beq.n	800e0a8 <__ssputs_r+0x80>
 800e042:	6825      	ldr	r5, [r4, #0]
 800e044:	6909      	ldr	r1, [r1, #16]
 800e046:	eba5 0901 	sub.w	r9, r5, r1
 800e04a:	6965      	ldr	r5, [r4, #20]
 800e04c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e054:	3301      	adds	r3, #1
 800e056:	444b      	add	r3, r9
 800e058:	106d      	asrs	r5, r5, #1
 800e05a:	429d      	cmp	r5, r3
 800e05c:	bf38      	it	cc
 800e05e:	461d      	movcc	r5, r3
 800e060:	0553      	lsls	r3, r2, #21
 800e062:	d531      	bpl.n	800e0c8 <__ssputs_r+0xa0>
 800e064:	4629      	mov	r1, r5
 800e066:	f7fc f843 	bl	800a0f0 <_malloc_r>
 800e06a:	4606      	mov	r6, r0
 800e06c:	b950      	cbnz	r0, 800e084 <__ssputs_r+0x5c>
 800e06e:	230c      	movs	r3, #12
 800e070:	f8ca 3000 	str.w	r3, [sl]
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e07a:	81a3      	strh	r3, [r4, #12]
 800e07c:	f04f 30ff 	mov.w	r0, #4294967295
 800e080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e084:	6921      	ldr	r1, [r4, #16]
 800e086:	464a      	mov	r2, r9
 800e088:	f7fb fffb 	bl	800a082 <memcpy>
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e096:	81a3      	strh	r3, [r4, #12]
 800e098:	6126      	str	r6, [r4, #16]
 800e09a:	6165      	str	r5, [r4, #20]
 800e09c:	444e      	add	r6, r9
 800e09e:	eba5 0509 	sub.w	r5, r5, r9
 800e0a2:	6026      	str	r6, [r4, #0]
 800e0a4:	60a5      	str	r5, [r4, #8]
 800e0a6:	463e      	mov	r6, r7
 800e0a8:	42be      	cmp	r6, r7
 800e0aa:	d900      	bls.n	800e0ae <__ssputs_r+0x86>
 800e0ac:	463e      	mov	r6, r7
 800e0ae:	6820      	ldr	r0, [r4, #0]
 800e0b0:	4632      	mov	r2, r6
 800e0b2:	4641      	mov	r1, r8
 800e0b4:	f000 fd78 	bl	800eba8 <memmove>
 800e0b8:	68a3      	ldr	r3, [r4, #8]
 800e0ba:	1b9b      	subs	r3, r3, r6
 800e0bc:	60a3      	str	r3, [r4, #8]
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	4433      	add	r3, r6
 800e0c2:	6023      	str	r3, [r4, #0]
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	e7db      	b.n	800e080 <__ssputs_r+0x58>
 800e0c8:	462a      	mov	r2, r5
 800e0ca:	f000 fd87 	bl	800ebdc <_realloc_r>
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d1e1      	bne.n	800e098 <__ssputs_r+0x70>
 800e0d4:	6921      	ldr	r1, [r4, #16]
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	f7ff ff5a 	bl	800df90 <_free_r>
 800e0dc:	e7c7      	b.n	800e06e <__ssputs_r+0x46>
	...

0800e0e0 <_svfiprintf_r>:
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	4698      	mov	r8, r3
 800e0e6:	898b      	ldrh	r3, [r1, #12]
 800e0e8:	061b      	lsls	r3, r3, #24
 800e0ea:	b09d      	sub	sp, #116	; 0x74
 800e0ec:	4607      	mov	r7, r0
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	4614      	mov	r4, r2
 800e0f2:	d50e      	bpl.n	800e112 <_svfiprintf_r+0x32>
 800e0f4:	690b      	ldr	r3, [r1, #16]
 800e0f6:	b963      	cbnz	r3, 800e112 <_svfiprintf_r+0x32>
 800e0f8:	2140      	movs	r1, #64	; 0x40
 800e0fa:	f7fb fff9 	bl	800a0f0 <_malloc_r>
 800e0fe:	6028      	str	r0, [r5, #0]
 800e100:	6128      	str	r0, [r5, #16]
 800e102:	b920      	cbnz	r0, 800e10e <_svfiprintf_r+0x2e>
 800e104:	230c      	movs	r3, #12
 800e106:	603b      	str	r3, [r7, #0]
 800e108:	f04f 30ff 	mov.w	r0, #4294967295
 800e10c:	e0d1      	b.n	800e2b2 <_svfiprintf_r+0x1d2>
 800e10e:	2340      	movs	r3, #64	; 0x40
 800e110:	616b      	str	r3, [r5, #20]
 800e112:	2300      	movs	r3, #0
 800e114:	9309      	str	r3, [sp, #36]	; 0x24
 800e116:	2320      	movs	r3, #32
 800e118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e11c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e120:	2330      	movs	r3, #48	; 0x30
 800e122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2cc <_svfiprintf_r+0x1ec>
 800e126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e12a:	f04f 0901 	mov.w	r9, #1
 800e12e:	4623      	mov	r3, r4
 800e130:	469a      	mov	sl, r3
 800e132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e136:	b10a      	cbz	r2, 800e13c <_svfiprintf_r+0x5c>
 800e138:	2a25      	cmp	r2, #37	; 0x25
 800e13a:	d1f9      	bne.n	800e130 <_svfiprintf_r+0x50>
 800e13c:	ebba 0b04 	subs.w	fp, sl, r4
 800e140:	d00b      	beq.n	800e15a <_svfiprintf_r+0x7a>
 800e142:	465b      	mov	r3, fp
 800e144:	4622      	mov	r2, r4
 800e146:	4629      	mov	r1, r5
 800e148:	4638      	mov	r0, r7
 800e14a:	f7ff ff6d 	bl	800e028 <__ssputs_r>
 800e14e:	3001      	adds	r0, #1
 800e150:	f000 80aa 	beq.w	800e2a8 <_svfiprintf_r+0x1c8>
 800e154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e156:	445a      	add	r2, fp
 800e158:	9209      	str	r2, [sp, #36]	; 0x24
 800e15a:	f89a 3000 	ldrb.w	r3, [sl]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 80a2 	beq.w	800e2a8 <_svfiprintf_r+0x1c8>
 800e164:	2300      	movs	r3, #0
 800e166:	f04f 32ff 	mov.w	r2, #4294967295
 800e16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e16e:	f10a 0a01 	add.w	sl, sl, #1
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	9307      	str	r3, [sp, #28]
 800e176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e17a:	931a      	str	r3, [sp, #104]	; 0x68
 800e17c:	4654      	mov	r4, sl
 800e17e:	2205      	movs	r2, #5
 800e180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e184:	4851      	ldr	r0, [pc, #324]	; (800e2cc <_svfiprintf_r+0x1ec>)
 800e186:	f7f2 f83b 	bl	8000200 <memchr>
 800e18a:	9a04      	ldr	r2, [sp, #16]
 800e18c:	b9d8      	cbnz	r0, 800e1c6 <_svfiprintf_r+0xe6>
 800e18e:	06d0      	lsls	r0, r2, #27
 800e190:	bf44      	itt	mi
 800e192:	2320      	movmi	r3, #32
 800e194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e198:	0711      	lsls	r1, r2, #28
 800e19a:	bf44      	itt	mi
 800e19c:	232b      	movmi	r3, #43	; 0x2b
 800e19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a8:	d015      	beq.n	800e1d6 <_svfiprintf_r+0xf6>
 800e1aa:	9a07      	ldr	r2, [sp, #28]
 800e1ac:	4654      	mov	r4, sl
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f04f 0c0a 	mov.w	ip, #10
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1ba:	3b30      	subs	r3, #48	; 0x30
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	d94e      	bls.n	800e25e <_svfiprintf_r+0x17e>
 800e1c0:	b1b0      	cbz	r0, 800e1f0 <_svfiprintf_r+0x110>
 800e1c2:	9207      	str	r2, [sp, #28]
 800e1c4:	e014      	b.n	800e1f0 <_svfiprintf_r+0x110>
 800e1c6:	eba0 0308 	sub.w	r3, r0, r8
 800e1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	46a2      	mov	sl, r4
 800e1d4:	e7d2      	b.n	800e17c <_svfiprintf_r+0x9c>
 800e1d6:	9b03      	ldr	r3, [sp, #12]
 800e1d8:	1d19      	adds	r1, r3, #4
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	9103      	str	r1, [sp, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	bfbb      	ittet	lt
 800e1e2:	425b      	neglt	r3, r3
 800e1e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e8:	9307      	strge	r3, [sp, #28]
 800e1ea:	9307      	strlt	r3, [sp, #28]
 800e1ec:	bfb8      	it	lt
 800e1ee:	9204      	strlt	r2, [sp, #16]
 800e1f0:	7823      	ldrb	r3, [r4, #0]
 800e1f2:	2b2e      	cmp	r3, #46	; 0x2e
 800e1f4:	d10c      	bne.n	800e210 <_svfiprintf_r+0x130>
 800e1f6:	7863      	ldrb	r3, [r4, #1]
 800e1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1fa:	d135      	bne.n	800e268 <_svfiprintf_r+0x188>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	1d1a      	adds	r2, r3, #4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	9203      	str	r2, [sp, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	bfb8      	it	lt
 800e208:	f04f 33ff 	movlt.w	r3, #4294967295
 800e20c:	3402      	adds	r4, #2
 800e20e:	9305      	str	r3, [sp, #20]
 800e210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2dc <_svfiprintf_r+0x1fc>
 800e214:	7821      	ldrb	r1, [r4, #0]
 800e216:	2203      	movs	r2, #3
 800e218:	4650      	mov	r0, sl
 800e21a:	f7f1 fff1 	bl	8000200 <memchr>
 800e21e:	b140      	cbz	r0, 800e232 <_svfiprintf_r+0x152>
 800e220:	2340      	movs	r3, #64	; 0x40
 800e222:	eba0 000a 	sub.w	r0, r0, sl
 800e226:	fa03 f000 	lsl.w	r0, r3, r0
 800e22a:	9b04      	ldr	r3, [sp, #16]
 800e22c:	4303      	orrs	r3, r0
 800e22e:	3401      	adds	r4, #1
 800e230:	9304      	str	r3, [sp, #16]
 800e232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e236:	4826      	ldr	r0, [pc, #152]	; (800e2d0 <_svfiprintf_r+0x1f0>)
 800e238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e23c:	2206      	movs	r2, #6
 800e23e:	f7f1 ffdf 	bl	8000200 <memchr>
 800e242:	2800      	cmp	r0, #0
 800e244:	d038      	beq.n	800e2b8 <_svfiprintf_r+0x1d8>
 800e246:	4b23      	ldr	r3, [pc, #140]	; (800e2d4 <_svfiprintf_r+0x1f4>)
 800e248:	bb1b      	cbnz	r3, 800e292 <_svfiprintf_r+0x1b2>
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	3307      	adds	r3, #7
 800e24e:	f023 0307 	bic.w	r3, r3, #7
 800e252:	3308      	adds	r3, #8
 800e254:	9303      	str	r3, [sp, #12]
 800e256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e258:	4433      	add	r3, r6
 800e25a:	9309      	str	r3, [sp, #36]	; 0x24
 800e25c:	e767      	b.n	800e12e <_svfiprintf_r+0x4e>
 800e25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e262:	460c      	mov	r4, r1
 800e264:	2001      	movs	r0, #1
 800e266:	e7a5      	b.n	800e1b4 <_svfiprintf_r+0xd4>
 800e268:	2300      	movs	r3, #0
 800e26a:	3401      	adds	r4, #1
 800e26c:	9305      	str	r3, [sp, #20]
 800e26e:	4619      	mov	r1, r3
 800e270:	f04f 0c0a 	mov.w	ip, #10
 800e274:	4620      	mov	r0, r4
 800e276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e27a:	3a30      	subs	r2, #48	; 0x30
 800e27c:	2a09      	cmp	r2, #9
 800e27e:	d903      	bls.n	800e288 <_svfiprintf_r+0x1a8>
 800e280:	2b00      	cmp	r3, #0
 800e282:	d0c5      	beq.n	800e210 <_svfiprintf_r+0x130>
 800e284:	9105      	str	r1, [sp, #20]
 800e286:	e7c3      	b.n	800e210 <_svfiprintf_r+0x130>
 800e288:	fb0c 2101 	mla	r1, ip, r1, r2
 800e28c:	4604      	mov	r4, r0
 800e28e:	2301      	movs	r3, #1
 800e290:	e7f0      	b.n	800e274 <_svfiprintf_r+0x194>
 800e292:	ab03      	add	r3, sp, #12
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	462a      	mov	r2, r5
 800e298:	4b0f      	ldr	r3, [pc, #60]	; (800e2d8 <_svfiprintf_r+0x1f8>)
 800e29a:	a904      	add	r1, sp, #16
 800e29c:	4638      	mov	r0, r7
 800e29e:	f7fc f83b 	bl	800a318 <_printf_float>
 800e2a2:	1c42      	adds	r2, r0, #1
 800e2a4:	4606      	mov	r6, r0
 800e2a6:	d1d6      	bne.n	800e256 <_svfiprintf_r+0x176>
 800e2a8:	89ab      	ldrh	r3, [r5, #12]
 800e2aa:	065b      	lsls	r3, r3, #25
 800e2ac:	f53f af2c 	bmi.w	800e108 <_svfiprintf_r+0x28>
 800e2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2b2:	b01d      	add	sp, #116	; 0x74
 800e2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2b8:	ab03      	add	r3, sp, #12
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	462a      	mov	r2, r5
 800e2be:	4b06      	ldr	r3, [pc, #24]	; (800e2d8 <_svfiprintf_r+0x1f8>)
 800e2c0:	a904      	add	r1, sp, #16
 800e2c2:	4638      	mov	r0, r7
 800e2c4:	f7fc facc 	bl	800a860 <_printf_i>
 800e2c8:	e7eb      	b.n	800e2a2 <_svfiprintf_r+0x1c2>
 800e2ca:	bf00      	nop
 800e2cc:	080112c4 	.word	0x080112c4
 800e2d0:	080112ce 	.word	0x080112ce
 800e2d4:	0800a319 	.word	0x0800a319
 800e2d8:	0800e029 	.word	0x0800e029
 800e2dc:	080112ca 	.word	0x080112ca

0800e2e0 <_sungetc_r>:
 800e2e0:	b538      	push	{r3, r4, r5, lr}
 800e2e2:	1c4b      	adds	r3, r1, #1
 800e2e4:	4614      	mov	r4, r2
 800e2e6:	d103      	bne.n	800e2f0 <_sungetc_r+0x10>
 800e2e8:	f04f 35ff 	mov.w	r5, #4294967295
 800e2ec:	4628      	mov	r0, r5
 800e2ee:	bd38      	pop	{r3, r4, r5, pc}
 800e2f0:	8993      	ldrh	r3, [r2, #12]
 800e2f2:	f023 0320 	bic.w	r3, r3, #32
 800e2f6:	8193      	strh	r3, [r2, #12]
 800e2f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2fa:	6852      	ldr	r2, [r2, #4]
 800e2fc:	b2cd      	uxtb	r5, r1
 800e2fe:	b18b      	cbz	r3, 800e324 <_sungetc_r+0x44>
 800e300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e302:	4293      	cmp	r3, r2
 800e304:	dd08      	ble.n	800e318 <_sungetc_r+0x38>
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	1e5a      	subs	r2, r3, #1
 800e30a:	6022      	str	r2, [r4, #0]
 800e30c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e310:	6863      	ldr	r3, [r4, #4]
 800e312:	3301      	adds	r3, #1
 800e314:	6063      	str	r3, [r4, #4]
 800e316:	e7e9      	b.n	800e2ec <_sungetc_r+0xc>
 800e318:	4621      	mov	r1, r4
 800e31a:	f000 fbcd 	bl	800eab8 <__submore>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d0f1      	beq.n	800e306 <_sungetc_r+0x26>
 800e322:	e7e1      	b.n	800e2e8 <_sungetc_r+0x8>
 800e324:	6921      	ldr	r1, [r4, #16]
 800e326:	6823      	ldr	r3, [r4, #0]
 800e328:	b151      	cbz	r1, 800e340 <_sungetc_r+0x60>
 800e32a:	4299      	cmp	r1, r3
 800e32c:	d208      	bcs.n	800e340 <_sungetc_r+0x60>
 800e32e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e332:	42a9      	cmp	r1, r5
 800e334:	d104      	bne.n	800e340 <_sungetc_r+0x60>
 800e336:	3b01      	subs	r3, #1
 800e338:	3201      	adds	r2, #1
 800e33a:	6023      	str	r3, [r4, #0]
 800e33c:	6062      	str	r2, [r4, #4]
 800e33e:	e7d5      	b.n	800e2ec <_sungetc_r+0xc>
 800e340:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e348:	6363      	str	r3, [r4, #52]	; 0x34
 800e34a:	2303      	movs	r3, #3
 800e34c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e34e:	4623      	mov	r3, r4
 800e350:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	2301      	movs	r3, #1
 800e358:	e7dc      	b.n	800e314 <_sungetc_r+0x34>

0800e35a <__ssrefill_r>:
 800e35a:	b510      	push	{r4, lr}
 800e35c:	460c      	mov	r4, r1
 800e35e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e360:	b169      	cbz	r1, 800e37e <__ssrefill_r+0x24>
 800e362:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e366:	4299      	cmp	r1, r3
 800e368:	d001      	beq.n	800e36e <__ssrefill_r+0x14>
 800e36a:	f7ff fe11 	bl	800df90 <_free_r>
 800e36e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e370:	6063      	str	r3, [r4, #4]
 800e372:	2000      	movs	r0, #0
 800e374:	6360      	str	r0, [r4, #52]	; 0x34
 800e376:	b113      	cbz	r3, 800e37e <__ssrefill_r+0x24>
 800e378:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e37a:	6023      	str	r3, [r4, #0]
 800e37c:	bd10      	pop	{r4, pc}
 800e37e:	6923      	ldr	r3, [r4, #16]
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	2300      	movs	r3, #0
 800e384:	6063      	str	r3, [r4, #4]
 800e386:	89a3      	ldrh	r3, [r4, #12]
 800e388:	f043 0320 	orr.w	r3, r3, #32
 800e38c:	81a3      	strh	r3, [r4, #12]
 800e38e:	f04f 30ff 	mov.w	r0, #4294967295
 800e392:	e7f3      	b.n	800e37c <__ssrefill_r+0x22>

0800e394 <__ssvfiscanf_r>:
 800e394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e398:	460c      	mov	r4, r1
 800e39a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e39e:	2100      	movs	r1, #0
 800e3a0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e3a4:	49a6      	ldr	r1, [pc, #664]	; (800e640 <__ssvfiscanf_r+0x2ac>)
 800e3a6:	91a0      	str	r1, [sp, #640]	; 0x280
 800e3a8:	f10d 0804 	add.w	r8, sp, #4
 800e3ac:	49a5      	ldr	r1, [pc, #660]	; (800e644 <__ssvfiscanf_r+0x2b0>)
 800e3ae:	4fa6      	ldr	r7, [pc, #664]	; (800e648 <__ssvfiscanf_r+0x2b4>)
 800e3b0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e64c <__ssvfiscanf_r+0x2b8>
 800e3b4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e3b8:	4606      	mov	r6, r0
 800e3ba:	91a1      	str	r1, [sp, #644]	; 0x284
 800e3bc:	9300      	str	r3, [sp, #0]
 800e3be:	7813      	ldrb	r3, [r2, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 815a 	beq.w	800e67a <__ssvfiscanf_r+0x2e6>
 800e3c6:	5dd9      	ldrb	r1, [r3, r7]
 800e3c8:	f011 0108 	ands.w	r1, r1, #8
 800e3cc:	f102 0501 	add.w	r5, r2, #1
 800e3d0:	d019      	beq.n	800e406 <__ssvfiscanf_r+0x72>
 800e3d2:	6863      	ldr	r3, [r4, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	dd0f      	ble.n	800e3f8 <__ssvfiscanf_r+0x64>
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	781a      	ldrb	r2, [r3, #0]
 800e3dc:	5cba      	ldrb	r2, [r7, r2]
 800e3de:	0712      	lsls	r2, r2, #28
 800e3e0:	d401      	bmi.n	800e3e6 <__ssvfiscanf_r+0x52>
 800e3e2:	462a      	mov	r2, r5
 800e3e4:	e7eb      	b.n	800e3be <__ssvfiscanf_r+0x2a>
 800e3e6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e3e8:	3201      	adds	r2, #1
 800e3ea:	9245      	str	r2, [sp, #276]	; 0x114
 800e3ec:	6862      	ldr	r2, [r4, #4]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	3a01      	subs	r2, #1
 800e3f2:	6062      	str	r2, [r4, #4]
 800e3f4:	6023      	str	r3, [r4, #0]
 800e3f6:	e7ec      	b.n	800e3d2 <__ssvfiscanf_r+0x3e>
 800e3f8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e3fa:	4621      	mov	r1, r4
 800e3fc:	4630      	mov	r0, r6
 800e3fe:	4798      	blx	r3
 800e400:	2800      	cmp	r0, #0
 800e402:	d0e9      	beq.n	800e3d8 <__ssvfiscanf_r+0x44>
 800e404:	e7ed      	b.n	800e3e2 <__ssvfiscanf_r+0x4e>
 800e406:	2b25      	cmp	r3, #37	; 0x25
 800e408:	d012      	beq.n	800e430 <__ssvfiscanf_r+0x9c>
 800e40a:	469a      	mov	sl, r3
 800e40c:	6863      	ldr	r3, [r4, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	f340 8091 	ble.w	800e536 <__ssvfiscanf_r+0x1a2>
 800e414:	6822      	ldr	r2, [r4, #0]
 800e416:	7813      	ldrb	r3, [r2, #0]
 800e418:	4553      	cmp	r3, sl
 800e41a:	f040 812e 	bne.w	800e67a <__ssvfiscanf_r+0x2e6>
 800e41e:	6863      	ldr	r3, [r4, #4]
 800e420:	3b01      	subs	r3, #1
 800e422:	6063      	str	r3, [r4, #4]
 800e424:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e426:	3201      	adds	r2, #1
 800e428:	3301      	adds	r3, #1
 800e42a:	6022      	str	r2, [r4, #0]
 800e42c:	9345      	str	r3, [sp, #276]	; 0x114
 800e42e:	e7d8      	b.n	800e3e2 <__ssvfiscanf_r+0x4e>
 800e430:	9141      	str	r1, [sp, #260]	; 0x104
 800e432:	9143      	str	r1, [sp, #268]	; 0x10c
 800e434:	7853      	ldrb	r3, [r2, #1]
 800e436:	2b2a      	cmp	r3, #42	; 0x2a
 800e438:	bf02      	ittt	eq
 800e43a:	2310      	moveq	r3, #16
 800e43c:	1c95      	addeq	r5, r2, #2
 800e43e:	9341      	streq	r3, [sp, #260]	; 0x104
 800e440:	220a      	movs	r2, #10
 800e442:	46aa      	mov	sl, r5
 800e444:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e448:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e44c:	2b09      	cmp	r3, #9
 800e44e:	d91d      	bls.n	800e48c <__ssvfiscanf_r+0xf8>
 800e450:	487e      	ldr	r0, [pc, #504]	; (800e64c <__ssvfiscanf_r+0x2b8>)
 800e452:	2203      	movs	r2, #3
 800e454:	f7f1 fed4 	bl	8000200 <memchr>
 800e458:	b140      	cbz	r0, 800e46c <__ssvfiscanf_r+0xd8>
 800e45a:	2301      	movs	r3, #1
 800e45c:	eba0 0009 	sub.w	r0, r0, r9
 800e460:	fa03 f000 	lsl.w	r0, r3, r0
 800e464:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e466:	4318      	orrs	r0, r3
 800e468:	9041      	str	r0, [sp, #260]	; 0x104
 800e46a:	4655      	mov	r5, sl
 800e46c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e470:	2b78      	cmp	r3, #120	; 0x78
 800e472:	d806      	bhi.n	800e482 <__ssvfiscanf_r+0xee>
 800e474:	2b57      	cmp	r3, #87	; 0x57
 800e476:	d810      	bhi.n	800e49a <__ssvfiscanf_r+0x106>
 800e478:	2b25      	cmp	r3, #37	; 0x25
 800e47a:	d0c6      	beq.n	800e40a <__ssvfiscanf_r+0x76>
 800e47c:	d856      	bhi.n	800e52c <__ssvfiscanf_r+0x198>
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d064      	beq.n	800e54c <__ssvfiscanf_r+0x1b8>
 800e482:	2303      	movs	r3, #3
 800e484:	9347      	str	r3, [sp, #284]	; 0x11c
 800e486:	230a      	movs	r3, #10
 800e488:	9342      	str	r3, [sp, #264]	; 0x108
 800e48a:	e071      	b.n	800e570 <__ssvfiscanf_r+0x1dc>
 800e48c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e48e:	fb02 1103 	mla	r1, r2, r3, r1
 800e492:	3930      	subs	r1, #48	; 0x30
 800e494:	9143      	str	r1, [sp, #268]	; 0x10c
 800e496:	4655      	mov	r5, sl
 800e498:	e7d3      	b.n	800e442 <__ssvfiscanf_r+0xae>
 800e49a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e49e:	2a20      	cmp	r2, #32
 800e4a0:	d8ef      	bhi.n	800e482 <__ssvfiscanf_r+0xee>
 800e4a2:	a101      	add	r1, pc, #4	; (adr r1, 800e4a8 <__ssvfiscanf_r+0x114>)
 800e4a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e4a8:	0800e55b 	.word	0x0800e55b
 800e4ac:	0800e483 	.word	0x0800e483
 800e4b0:	0800e483 	.word	0x0800e483
 800e4b4:	0800e5b9 	.word	0x0800e5b9
 800e4b8:	0800e483 	.word	0x0800e483
 800e4bc:	0800e483 	.word	0x0800e483
 800e4c0:	0800e483 	.word	0x0800e483
 800e4c4:	0800e483 	.word	0x0800e483
 800e4c8:	0800e483 	.word	0x0800e483
 800e4cc:	0800e483 	.word	0x0800e483
 800e4d0:	0800e483 	.word	0x0800e483
 800e4d4:	0800e5cf 	.word	0x0800e5cf
 800e4d8:	0800e5a5 	.word	0x0800e5a5
 800e4dc:	0800e533 	.word	0x0800e533
 800e4e0:	0800e533 	.word	0x0800e533
 800e4e4:	0800e533 	.word	0x0800e533
 800e4e8:	0800e483 	.word	0x0800e483
 800e4ec:	0800e5a9 	.word	0x0800e5a9
 800e4f0:	0800e483 	.word	0x0800e483
 800e4f4:	0800e483 	.word	0x0800e483
 800e4f8:	0800e483 	.word	0x0800e483
 800e4fc:	0800e483 	.word	0x0800e483
 800e500:	0800e5df 	.word	0x0800e5df
 800e504:	0800e5b1 	.word	0x0800e5b1
 800e508:	0800e553 	.word	0x0800e553
 800e50c:	0800e483 	.word	0x0800e483
 800e510:	0800e483 	.word	0x0800e483
 800e514:	0800e5db 	.word	0x0800e5db
 800e518:	0800e483 	.word	0x0800e483
 800e51c:	0800e5a5 	.word	0x0800e5a5
 800e520:	0800e483 	.word	0x0800e483
 800e524:	0800e483 	.word	0x0800e483
 800e528:	0800e55b 	.word	0x0800e55b
 800e52c:	3b45      	subs	r3, #69	; 0x45
 800e52e:	2b02      	cmp	r3, #2
 800e530:	d8a7      	bhi.n	800e482 <__ssvfiscanf_r+0xee>
 800e532:	2305      	movs	r3, #5
 800e534:	e01b      	b.n	800e56e <__ssvfiscanf_r+0x1da>
 800e536:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e538:	4621      	mov	r1, r4
 800e53a:	4630      	mov	r0, r6
 800e53c:	4798      	blx	r3
 800e53e:	2800      	cmp	r0, #0
 800e540:	f43f af68 	beq.w	800e414 <__ssvfiscanf_r+0x80>
 800e544:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e546:	2800      	cmp	r0, #0
 800e548:	f040 808d 	bne.w	800e666 <__ssvfiscanf_r+0x2d2>
 800e54c:	f04f 30ff 	mov.w	r0, #4294967295
 800e550:	e08f      	b.n	800e672 <__ssvfiscanf_r+0x2de>
 800e552:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e554:	f042 0220 	orr.w	r2, r2, #32
 800e558:	9241      	str	r2, [sp, #260]	; 0x104
 800e55a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e55c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e560:	9241      	str	r2, [sp, #260]	; 0x104
 800e562:	2210      	movs	r2, #16
 800e564:	2b6f      	cmp	r3, #111	; 0x6f
 800e566:	9242      	str	r2, [sp, #264]	; 0x108
 800e568:	bf34      	ite	cc
 800e56a:	2303      	movcc	r3, #3
 800e56c:	2304      	movcs	r3, #4
 800e56e:	9347      	str	r3, [sp, #284]	; 0x11c
 800e570:	6863      	ldr	r3, [r4, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	dd42      	ble.n	800e5fc <__ssvfiscanf_r+0x268>
 800e576:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e578:	0659      	lsls	r1, r3, #25
 800e57a:	d404      	bmi.n	800e586 <__ssvfiscanf_r+0x1f2>
 800e57c:	6823      	ldr	r3, [r4, #0]
 800e57e:	781a      	ldrb	r2, [r3, #0]
 800e580:	5cba      	ldrb	r2, [r7, r2]
 800e582:	0712      	lsls	r2, r2, #28
 800e584:	d441      	bmi.n	800e60a <__ssvfiscanf_r+0x276>
 800e586:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e588:	2b02      	cmp	r3, #2
 800e58a:	dc50      	bgt.n	800e62e <__ssvfiscanf_r+0x29a>
 800e58c:	466b      	mov	r3, sp
 800e58e:	4622      	mov	r2, r4
 800e590:	a941      	add	r1, sp, #260	; 0x104
 800e592:	4630      	mov	r0, r6
 800e594:	f000 f876 	bl	800e684 <_scanf_chars>
 800e598:	2801      	cmp	r0, #1
 800e59a:	d06e      	beq.n	800e67a <__ssvfiscanf_r+0x2e6>
 800e59c:	2802      	cmp	r0, #2
 800e59e:	f47f af20 	bne.w	800e3e2 <__ssvfiscanf_r+0x4e>
 800e5a2:	e7cf      	b.n	800e544 <__ssvfiscanf_r+0x1b0>
 800e5a4:	220a      	movs	r2, #10
 800e5a6:	e7dd      	b.n	800e564 <__ssvfiscanf_r+0x1d0>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	9342      	str	r3, [sp, #264]	; 0x108
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	e7de      	b.n	800e56e <__ssvfiscanf_r+0x1da>
 800e5b0:	2308      	movs	r3, #8
 800e5b2:	9342      	str	r3, [sp, #264]	; 0x108
 800e5b4:	2304      	movs	r3, #4
 800e5b6:	e7da      	b.n	800e56e <__ssvfiscanf_r+0x1da>
 800e5b8:	4629      	mov	r1, r5
 800e5ba:	4640      	mov	r0, r8
 800e5bc:	f000 f9d0 	bl	800e960 <__sccl>
 800e5c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5c6:	9341      	str	r3, [sp, #260]	; 0x104
 800e5c8:	4605      	mov	r5, r0
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e7cf      	b.n	800e56e <__ssvfiscanf_r+0x1da>
 800e5ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e5d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5d4:	9341      	str	r3, [sp, #260]	; 0x104
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	e7c9      	b.n	800e56e <__ssvfiscanf_r+0x1da>
 800e5da:	2302      	movs	r3, #2
 800e5dc:	e7c7      	b.n	800e56e <__ssvfiscanf_r+0x1da>
 800e5de:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e5e0:	06c3      	lsls	r3, r0, #27
 800e5e2:	f53f aefe 	bmi.w	800e3e2 <__ssvfiscanf_r+0x4e>
 800e5e6:	9b00      	ldr	r3, [sp, #0]
 800e5e8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e5ea:	1d19      	adds	r1, r3, #4
 800e5ec:	9100      	str	r1, [sp, #0]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f010 0f01 	tst.w	r0, #1
 800e5f4:	bf14      	ite	ne
 800e5f6:	801a      	strhne	r2, [r3, #0]
 800e5f8:	601a      	streq	r2, [r3, #0]
 800e5fa:	e6f2      	b.n	800e3e2 <__ssvfiscanf_r+0x4e>
 800e5fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e5fe:	4621      	mov	r1, r4
 800e600:	4630      	mov	r0, r6
 800e602:	4798      	blx	r3
 800e604:	2800      	cmp	r0, #0
 800e606:	d0b6      	beq.n	800e576 <__ssvfiscanf_r+0x1e2>
 800e608:	e79c      	b.n	800e544 <__ssvfiscanf_r+0x1b0>
 800e60a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e60c:	3201      	adds	r2, #1
 800e60e:	9245      	str	r2, [sp, #276]	; 0x114
 800e610:	6862      	ldr	r2, [r4, #4]
 800e612:	3a01      	subs	r2, #1
 800e614:	2a00      	cmp	r2, #0
 800e616:	6062      	str	r2, [r4, #4]
 800e618:	dd02      	ble.n	800e620 <__ssvfiscanf_r+0x28c>
 800e61a:	3301      	adds	r3, #1
 800e61c:	6023      	str	r3, [r4, #0]
 800e61e:	e7ad      	b.n	800e57c <__ssvfiscanf_r+0x1e8>
 800e620:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e622:	4621      	mov	r1, r4
 800e624:	4630      	mov	r0, r6
 800e626:	4798      	blx	r3
 800e628:	2800      	cmp	r0, #0
 800e62a:	d0a7      	beq.n	800e57c <__ssvfiscanf_r+0x1e8>
 800e62c:	e78a      	b.n	800e544 <__ssvfiscanf_r+0x1b0>
 800e62e:	2b04      	cmp	r3, #4
 800e630:	dc0e      	bgt.n	800e650 <__ssvfiscanf_r+0x2bc>
 800e632:	466b      	mov	r3, sp
 800e634:	4622      	mov	r2, r4
 800e636:	a941      	add	r1, sp, #260	; 0x104
 800e638:	4630      	mov	r0, r6
 800e63a:	f000 f87d 	bl	800e738 <_scanf_i>
 800e63e:	e7ab      	b.n	800e598 <__ssvfiscanf_r+0x204>
 800e640:	0800e2e1 	.word	0x0800e2e1
 800e644:	0800e35b 	.word	0x0800e35b
 800e648:	08010f61 	.word	0x08010f61
 800e64c:	080112ca 	.word	0x080112ca
 800e650:	4b0b      	ldr	r3, [pc, #44]	; (800e680 <__ssvfiscanf_r+0x2ec>)
 800e652:	2b00      	cmp	r3, #0
 800e654:	f43f aec5 	beq.w	800e3e2 <__ssvfiscanf_r+0x4e>
 800e658:	466b      	mov	r3, sp
 800e65a:	4622      	mov	r2, r4
 800e65c:	a941      	add	r1, sp, #260	; 0x104
 800e65e:	4630      	mov	r0, r6
 800e660:	f7fc fa24 	bl	800aaac <_scanf_float>
 800e664:	e798      	b.n	800e598 <__ssvfiscanf_r+0x204>
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e66c:	bf18      	it	ne
 800e66e:	f04f 30ff 	movne.w	r0, #4294967295
 800e672:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e67a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e67c:	e7f9      	b.n	800e672 <__ssvfiscanf_r+0x2de>
 800e67e:	bf00      	nop
 800e680:	0800aaad 	.word	0x0800aaad

0800e684 <_scanf_chars>:
 800e684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e688:	4615      	mov	r5, r2
 800e68a:	688a      	ldr	r2, [r1, #8]
 800e68c:	4680      	mov	r8, r0
 800e68e:	460c      	mov	r4, r1
 800e690:	b932      	cbnz	r2, 800e6a0 <_scanf_chars+0x1c>
 800e692:	698a      	ldr	r2, [r1, #24]
 800e694:	2a00      	cmp	r2, #0
 800e696:	bf0c      	ite	eq
 800e698:	2201      	moveq	r2, #1
 800e69a:	f04f 32ff 	movne.w	r2, #4294967295
 800e69e:	608a      	str	r2, [r1, #8]
 800e6a0:	6822      	ldr	r2, [r4, #0]
 800e6a2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e734 <_scanf_chars+0xb0>
 800e6a6:	06d1      	lsls	r1, r2, #27
 800e6a8:	bf5f      	itttt	pl
 800e6aa:	681a      	ldrpl	r2, [r3, #0]
 800e6ac:	1d11      	addpl	r1, r2, #4
 800e6ae:	6019      	strpl	r1, [r3, #0]
 800e6b0:	6816      	ldrpl	r6, [r2, #0]
 800e6b2:	2700      	movs	r7, #0
 800e6b4:	69a0      	ldr	r0, [r4, #24]
 800e6b6:	b188      	cbz	r0, 800e6dc <_scanf_chars+0x58>
 800e6b8:	2801      	cmp	r0, #1
 800e6ba:	d107      	bne.n	800e6cc <_scanf_chars+0x48>
 800e6bc:	682a      	ldr	r2, [r5, #0]
 800e6be:	7811      	ldrb	r1, [r2, #0]
 800e6c0:	6962      	ldr	r2, [r4, #20]
 800e6c2:	5c52      	ldrb	r2, [r2, r1]
 800e6c4:	b952      	cbnz	r2, 800e6dc <_scanf_chars+0x58>
 800e6c6:	2f00      	cmp	r7, #0
 800e6c8:	d031      	beq.n	800e72e <_scanf_chars+0xaa>
 800e6ca:	e022      	b.n	800e712 <_scanf_chars+0x8e>
 800e6cc:	2802      	cmp	r0, #2
 800e6ce:	d120      	bne.n	800e712 <_scanf_chars+0x8e>
 800e6d0:	682b      	ldr	r3, [r5, #0]
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e6d8:	071b      	lsls	r3, r3, #28
 800e6da:	d41a      	bmi.n	800e712 <_scanf_chars+0x8e>
 800e6dc:	6823      	ldr	r3, [r4, #0]
 800e6de:	06da      	lsls	r2, r3, #27
 800e6e0:	bf5e      	ittt	pl
 800e6e2:	682b      	ldrpl	r3, [r5, #0]
 800e6e4:	781b      	ldrbpl	r3, [r3, #0]
 800e6e6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e6ea:	682a      	ldr	r2, [r5, #0]
 800e6ec:	686b      	ldr	r3, [r5, #4]
 800e6ee:	3201      	adds	r2, #1
 800e6f0:	602a      	str	r2, [r5, #0]
 800e6f2:	68a2      	ldr	r2, [r4, #8]
 800e6f4:	3b01      	subs	r3, #1
 800e6f6:	3a01      	subs	r2, #1
 800e6f8:	606b      	str	r3, [r5, #4]
 800e6fa:	3701      	adds	r7, #1
 800e6fc:	60a2      	str	r2, [r4, #8]
 800e6fe:	b142      	cbz	r2, 800e712 <_scanf_chars+0x8e>
 800e700:	2b00      	cmp	r3, #0
 800e702:	dcd7      	bgt.n	800e6b4 <_scanf_chars+0x30>
 800e704:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e708:	4629      	mov	r1, r5
 800e70a:	4640      	mov	r0, r8
 800e70c:	4798      	blx	r3
 800e70e:	2800      	cmp	r0, #0
 800e710:	d0d0      	beq.n	800e6b4 <_scanf_chars+0x30>
 800e712:	6823      	ldr	r3, [r4, #0]
 800e714:	f013 0310 	ands.w	r3, r3, #16
 800e718:	d105      	bne.n	800e726 <_scanf_chars+0xa2>
 800e71a:	68e2      	ldr	r2, [r4, #12]
 800e71c:	3201      	adds	r2, #1
 800e71e:	60e2      	str	r2, [r4, #12]
 800e720:	69a2      	ldr	r2, [r4, #24]
 800e722:	b102      	cbz	r2, 800e726 <_scanf_chars+0xa2>
 800e724:	7033      	strb	r3, [r6, #0]
 800e726:	6923      	ldr	r3, [r4, #16]
 800e728:	443b      	add	r3, r7
 800e72a:	6123      	str	r3, [r4, #16]
 800e72c:	2000      	movs	r0, #0
 800e72e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e732:	bf00      	nop
 800e734:	08010f61 	.word	0x08010f61

0800e738 <_scanf_i>:
 800e738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73c:	4698      	mov	r8, r3
 800e73e:	4b76      	ldr	r3, [pc, #472]	; (800e918 <_scanf_i+0x1e0>)
 800e740:	460c      	mov	r4, r1
 800e742:	4682      	mov	sl, r0
 800e744:	4616      	mov	r6, r2
 800e746:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e74a:	b087      	sub	sp, #28
 800e74c:	ab03      	add	r3, sp, #12
 800e74e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e752:	4b72      	ldr	r3, [pc, #456]	; (800e91c <_scanf_i+0x1e4>)
 800e754:	69a1      	ldr	r1, [r4, #24]
 800e756:	4a72      	ldr	r2, [pc, #456]	; (800e920 <_scanf_i+0x1e8>)
 800e758:	2903      	cmp	r1, #3
 800e75a:	bf18      	it	ne
 800e75c:	461a      	movne	r2, r3
 800e75e:	68a3      	ldr	r3, [r4, #8]
 800e760:	9201      	str	r2, [sp, #4]
 800e762:	1e5a      	subs	r2, r3, #1
 800e764:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e768:	bf88      	it	hi
 800e76a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e76e:	4627      	mov	r7, r4
 800e770:	bf82      	ittt	hi
 800e772:	eb03 0905 	addhi.w	r9, r3, r5
 800e776:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e77a:	60a3      	strhi	r3, [r4, #8]
 800e77c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e780:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e784:	bf98      	it	ls
 800e786:	f04f 0900 	movls.w	r9, #0
 800e78a:	6023      	str	r3, [r4, #0]
 800e78c:	463d      	mov	r5, r7
 800e78e:	f04f 0b00 	mov.w	fp, #0
 800e792:	6831      	ldr	r1, [r6, #0]
 800e794:	ab03      	add	r3, sp, #12
 800e796:	7809      	ldrb	r1, [r1, #0]
 800e798:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e79c:	2202      	movs	r2, #2
 800e79e:	f7f1 fd2f 	bl	8000200 <memchr>
 800e7a2:	b328      	cbz	r0, 800e7f0 <_scanf_i+0xb8>
 800e7a4:	f1bb 0f01 	cmp.w	fp, #1
 800e7a8:	d159      	bne.n	800e85e <_scanf_i+0x126>
 800e7aa:	6862      	ldr	r2, [r4, #4]
 800e7ac:	b92a      	cbnz	r2, 800e7ba <_scanf_i+0x82>
 800e7ae:	6822      	ldr	r2, [r4, #0]
 800e7b0:	2308      	movs	r3, #8
 800e7b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e7b6:	6063      	str	r3, [r4, #4]
 800e7b8:	6022      	str	r2, [r4, #0]
 800e7ba:	6822      	ldr	r2, [r4, #0]
 800e7bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e7c0:	6022      	str	r2, [r4, #0]
 800e7c2:	68a2      	ldr	r2, [r4, #8]
 800e7c4:	1e51      	subs	r1, r2, #1
 800e7c6:	60a1      	str	r1, [r4, #8]
 800e7c8:	b192      	cbz	r2, 800e7f0 <_scanf_i+0xb8>
 800e7ca:	6832      	ldr	r2, [r6, #0]
 800e7cc:	1c51      	adds	r1, r2, #1
 800e7ce:	6031      	str	r1, [r6, #0]
 800e7d0:	7812      	ldrb	r2, [r2, #0]
 800e7d2:	f805 2b01 	strb.w	r2, [r5], #1
 800e7d6:	6872      	ldr	r2, [r6, #4]
 800e7d8:	3a01      	subs	r2, #1
 800e7da:	2a00      	cmp	r2, #0
 800e7dc:	6072      	str	r2, [r6, #4]
 800e7de:	dc07      	bgt.n	800e7f0 <_scanf_i+0xb8>
 800e7e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4650      	mov	r0, sl
 800e7e8:	4790      	blx	r2
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	f040 8085 	bne.w	800e8fa <_scanf_i+0x1c2>
 800e7f0:	f10b 0b01 	add.w	fp, fp, #1
 800e7f4:	f1bb 0f03 	cmp.w	fp, #3
 800e7f8:	d1cb      	bne.n	800e792 <_scanf_i+0x5a>
 800e7fa:	6863      	ldr	r3, [r4, #4]
 800e7fc:	b90b      	cbnz	r3, 800e802 <_scanf_i+0xca>
 800e7fe:	230a      	movs	r3, #10
 800e800:	6063      	str	r3, [r4, #4]
 800e802:	6863      	ldr	r3, [r4, #4]
 800e804:	4947      	ldr	r1, [pc, #284]	; (800e924 <_scanf_i+0x1ec>)
 800e806:	6960      	ldr	r0, [r4, #20]
 800e808:	1ac9      	subs	r1, r1, r3
 800e80a:	f000 f8a9 	bl	800e960 <__sccl>
 800e80e:	f04f 0b00 	mov.w	fp, #0
 800e812:	68a3      	ldr	r3, [r4, #8]
 800e814:	6822      	ldr	r2, [r4, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d03d      	beq.n	800e896 <_scanf_i+0x15e>
 800e81a:	6831      	ldr	r1, [r6, #0]
 800e81c:	6960      	ldr	r0, [r4, #20]
 800e81e:	f891 c000 	ldrb.w	ip, [r1]
 800e822:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e826:	2800      	cmp	r0, #0
 800e828:	d035      	beq.n	800e896 <_scanf_i+0x15e>
 800e82a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e82e:	d124      	bne.n	800e87a <_scanf_i+0x142>
 800e830:	0510      	lsls	r0, r2, #20
 800e832:	d522      	bpl.n	800e87a <_scanf_i+0x142>
 800e834:	f10b 0b01 	add.w	fp, fp, #1
 800e838:	f1b9 0f00 	cmp.w	r9, #0
 800e83c:	d003      	beq.n	800e846 <_scanf_i+0x10e>
 800e83e:	3301      	adds	r3, #1
 800e840:	f109 39ff 	add.w	r9, r9, #4294967295
 800e844:	60a3      	str	r3, [r4, #8]
 800e846:	6873      	ldr	r3, [r6, #4]
 800e848:	3b01      	subs	r3, #1
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	6073      	str	r3, [r6, #4]
 800e84e:	dd1b      	ble.n	800e888 <_scanf_i+0x150>
 800e850:	6833      	ldr	r3, [r6, #0]
 800e852:	3301      	adds	r3, #1
 800e854:	6033      	str	r3, [r6, #0]
 800e856:	68a3      	ldr	r3, [r4, #8]
 800e858:	3b01      	subs	r3, #1
 800e85a:	60a3      	str	r3, [r4, #8]
 800e85c:	e7d9      	b.n	800e812 <_scanf_i+0xda>
 800e85e:	f1bb 0f02 	cmp.w	fp, #2
 800e862:	d1ae      	bne.n	800e7c2 <_scanf_i+0x8a>
 800e864:	6822      	ldr	r2, [r4, #0]
 800e866:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e86a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e86e:	d1bf      	bne.n	800e7f0 <_scanf_i+0xb8>
 800e870:	2310      	movs	r3, #16
 800e872:	6063      	str	r3, [r4, #4]
 800e874:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e878:	e7a2      	b.n	800e7c0 <_scanf_i+0x88>
 800e87a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e87e:	6022      	str	r2, [r4, #0]
 800e880:	780b      	ldrb	r3, [r1, #0]
 800e882:	f805 3b01 	strb.w	r3, [r5], #1
 800e886:	e7de      	b.n	800e846 <_scanf_i+0x10e>
 800e888:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e88c:	4631      	mov	r1, r6
 800e88e:	4650      	mov	r0, sl
 800e890:	4798      	blx	r3
 800e892:	2800      	cmp	r0, #0
 800e894:	d0df      	beq.n	800e856 <_scanf_i+0x11e>
 800e896:	6823      	ldr	r3, [r4, #0]
 800e898:	05db      	lsls	r3, r3, #23
 800e89a:	d50d      	bpl.n	800e8b8 <_scanf_i+0x180>
 800e89c:	42bd      	cmp	r5, r7
 800e89e:	d909      	bls.n	800e8b4 <_scanf_i+0x17c>
 800e8a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e8a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e8a8:	4632      	mov	r2, r6
 800e8aa:	4650      	mov	r0, sl
 800e8ac:	4798      	blx	r3
 800e8ae:	f105 39ff 	add.w	r9, r5, #4294967295
 800e8b2:	464d      	mov	r5, r9
 800e8b4:	42bd      	cmp	r5, r7
 800e8b6:	d02d      	beq.n	800e914 <_scanf_i+0x1dc>
 800e8b8:	6822      	ldr	r2, [r4, #0]
 800e8ba:	f012 0210 	ands.w	r2, r2, #16
 800e8be:	d113      	bne.n	800e8e8 <_scanf_i+0x1b0>
 800e8c0:	702a      	strb	r2, [r5, #0]
 800e8c2:	6863      	ldr	r3, [r4, #4]
 800e8c4:	9e01      	ldr	r6, [sp, #4]
 800e8c6:	4639      	mov	r1, r7
 800e8c8:	4650      	mov	r0, sl
 800e8ca:	47b0      	blx	r6
 800e8cc:	6821      	ldr	r1, [r4, #0]
 800e8ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e8d2:	f011 0f20 	tst.w	r1, #32
 800e8d6:	d013      	beq.n	800e900 <_scanf_i+0x1c8>
 800e8d8:	1d1a      	adds	r2, r3, #4
 800e8da:	f8c8 2000 	str.w	r2, [r8]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	6018      	str	r0, [r3, #0]
 800e8e2:	68e3      	ldr	r3, [r4, #12]
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	60e3      	str	r3, [r4, #12]
 800e8e8:	1bed      	subs	r5, r5, r7
 800e8ea:	44ab      	add	fp, r5
 800e8ec:	6925      	ldr	r5, [r4, #16]
 800e8ee:	445d      	add	r5, fp
 800e8f0:	6125      	str	r5, [r4, #16]
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	b007      	add	sp, #28
 800e8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8fa:	f04f 0b00 	mov.w	fp, #0
 800e8fe:	e7ca      	b.n	800e896 <_scanf_i+0x15e>
 800e900:	1d1a      	adds	r2, r3, #4
 800e902:	f8c8 2000 	str.w	r2, [r8]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f011 0f01 	tst.w	r1, #1
 800e90c:	bf14      	ite	ne
 800e90e:	8018      	strhne	r0, [r3, #0]
 800e910:	6018      	streq	r0, [r3, #0]
 800e912:	e7e6      	b.n	800e8e2 <_scanf_i+0x1aa>
 800e914:	2001      	movs	r0, #1
 800e916:	e7ed      	b.n	800e8f4 <_scanf_i+0x1bc>
 800e918:	08010ca4 	.word	0x08010ca4
 800e91c:	0800eab5 	.word	0x0800eab5
 800e920:	0800bf15 	.word	0x0800bf15
 800e924:	080112ee 	.word	0x080112ee

0800e928 <_read_r>:
 800e928:	b538      	push	{r3, r4, r5, lr}
 800e92a:	4d07      	ldr	r5, [pc, #28]	; (800e948 <_read_r+0x20>)
 800e92c:	4604      	mov	r4, r0
 800e92e:	4608      	mov	r0, r1
 800e930:	4611      	mov	r1, r2
 800e932:	2200      	movs	r2, #0
 800e934:	602a      	str	r2, [r5, #0]
 800e936:	461a      	mov	r2, r3
 800e938:	f7f6 f8c4 	bl	8004ac4 <_read>
 800e93c:	1c43      	adds	r3, r0, #1
 800e93e:	d102      	bne.n	800e946 <_read_r+0x1e>
 800e940:	682b      	ldr	r3, [r5, #0]
 800e942:	b103      	cbz	r3, 800e946 <_read_r+0x1e>
 800e944:	6023      	str	r3, [r4, #0]
 800e946:	bd38      	pop	{r3, r4, r5, pc}
 800e948:	2000db64 	.word	0x2000db64
 800e94c:	00000000 	.word	0x00000000

0800e950 <nan>:
 800e950:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e958 <nan+0x8>
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	00000000 	.word	0x00000000
 800e95c:	7ff80000 	.word	0x7ff80000

0800e960 <__sccl>:
 800e960:	b570      	push	{r4, r5, r6, lr}
 800e962:	780b      	ldrb	r3, [r1, #0]
 800e964:	4604      	mov	r4, r0
 800e966:	2b5e      	cmp	r3, #94	; 0x5e
 800e968:	bf0b      	itete	eq
 800e96a:	784b      	ldrbeq	r3, [r1, #1]
 800e96c:	1c48      	addne	r0, r1, #1
 800e96e:	1c88      	addeq	r0, r1, #2
 800e970:	2200      	movne	r2, #0
 800e972:	bf08      	it	eq
 800e974:	2201      	moveq	r2, #1
 800e976:	1e61      	subs	r1, r4, #1
 800e978:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e97c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e980:	42a9      	cmp	r1, r5
 800e982:	d1fb      	bne.n	800e97c <__sccl+0x1c>
 800e984:	b90b      	cbnz	r3, 800e98a <__sccl+0x2a>
 800e986:	3801      	subs	r0, #1
 800e988:	bd70      	pop	{r4, r5, r6, pc}
 800e98a:	f082 0201 	eor.w	r2, r2, #1
 800e98e:	54e2      	strb	r2, [r4, r3]
 800e990:	4605      	mov	r5, r0
 800e992:	4628      	mov	r0, r5
 800e994:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e998:	292d      	cmp	r1, #45	; 0x2d
 800e99a:	d006      	beq.n	800e9aa <__sccl+0x4a>
 800e99c:	295d      	cmp	r1, #93	; 0x5d
 800e99e:	d0f3      	beq.n	800e988 <__sccl+0x28>
 800e9a0:	b909      	cbnz	r1, 800e9a6 <__sccl+0x46>
 800e9a2:	4628      	mov	r0, r5
 800e9a4:	e7f0      	b.n	800e988 <__sccl+0x28>
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	e7f1      	b.n	800e98e <__sccl+0x2e>
 800e9aa:	786e      	ldrb	r6, [r5, #1]
 800e9ac:	2e5d      	cmp	r6, #93	; 0x5d
 800e9ae:	d0fa      	beq.n	800e9a6 <__sccl+0x46>
 800e9b0:	42b3      	cmp	r3, r6
 800e9b2:	dcf8      	bgt.n	800e9a6 <__sccl+0x46>
 800e9b4:	3502      	adds	r5, #2
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	3101      	adds	r1, #1
 800e9ba:	428e      	cmp	r6, r1
 800e9bc:	5462      	strb	r2, [r4, r1]
 800e9be:	dcfb      	bgt.n	800e9b8 <__sccl+0x58>
 800e9c0:	1af1      	subs	r1, r6, r3
 800e9c2:	3901      	subs	r1, #1
 800e9c4:	1c58      	adds	r0, r3, #1
 800e9c6:	42b3      	cmp	r3, r6
 800e9c8:	bfa8      	it	ge
 800e9ca:	2100      	movge	r1, #0
 800e9cc:	1843      	adds	r3, r0, r1
 800e9ce:	e7e0      	b.n	800e992 <__sccl+0x32>

0800e9d0 <_strtoul_l.constprop.0>:
 800e9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9d4:	4f36      	ldr	r7, [pc, #216]	; (800eab0 <_strtoul_l.constprop.0+0xe0>)
 800e9d6:	4686      	mov	lr, r0
 800e9d8:	460d      	mov	r5, r1
 800e9da:	4628      	mov	r0, r5
 800e9dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9e0:	5de6      	ldrb	r6, [r4, r7]
 800e9e2:	f016 0608 	ands.w	r6, r6, #8
 800e9e6:	d1f8      	bne.n	800e9da <_strtoul_l.constprop.0+0xa>
 800e9e8:	2c2d      	cmp	r4, #45	; 0x2d
 800e9ea:	d12f      	bne.n	800ea4c <_strtoul_l.constprop.0+0x7c>
 800e9ec:	782c      	ldrb	r4, [r5, #0]
 800e9ee:	2601      	movs	r6, #1
 800e9f0:	1c85      	adds	r5, r0, #2
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d057      	beq.n	800eaa6 <_strtoul_l.constprop.0+0xd6>
 800e9f6:	2b10      	cmp	r3, #16
 800e9f8:	d109      	bne.n	800ea0e <_strtoul_l.constprop.0+0x3e>
 800e9fa:	2c30      	cmp	r4, #48	; 0x30
 800e9fc:	d107      	bne.n	800ea0e <_strtoul_l.constprop.0+0x3e>
 800e9fe:	7828      	ldrb	r0, [r5, #0]
 800ea00:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ea04:	2858      	cmp	r0, #88	; 0x58
 800ea06:	d149      	bne.n	800ea9c <_strtoul_l.constprop.0+0xcc>
 800ea08:	786c      	ldrb	r4, [r5, #1]
 800ea0a:	2310      	movs	r3, #16
 800ea0c:	3502      	adds	r5, #2
 800ea0e:	f04f 38ff 	mov.w	r8, #4294967295
 800ea12:	2700      	movs	r7, #0
 800ea14:	fbb8 f8f3 	udiv	r8, r8, r3
 800ea18:	fb03 f908 	mul.w	r9, r3, r8
 800ea1c:	ea6f 0909 	mvn.w	r9, r9
 800ea20:	4638      	mov	r0, r7
 800ea22:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ea26:	f1bc 0f09 	cmp.w	ip, #9
 800ea2a:	d814      	bhi.n	800ea56 <_strtoul_l.constprop.0+0x86>
 800ea2c:	4664      	mov	r4, ip
 800ea2e:	42a3      	cmp	r3, r4
 800ea30:	dd22      	ble.n	800ea78 <_strtoul_l.constprop.0+0xa8>
 800ea32:	2f00      	cmp	r7, #0
 800ea34:	db1d      	blt.n	800ea72 <_strtoul_l.constprop.0+0xa2>
 800ea36:	4580      	cmp	r8, r0
 800ea38:	d31b      	bcc.n	800ea72 <_strtoul_l.constprop.0+0xa2>
 800ea3a:	d101      	bne.n	800ea40 <_strtoul_l.constprop.0+0x70>
 800ea3c:	45a1      	cmp	r9, r4
 800ea3e:	db18      	blt.n	800ea72 <_strtoul_l.constprop.0+0xa2>
 800ea40:	fb00 4003 	mla	r0, r0, r3, r4
 800ea44:	2701      	movs	r7, #1
 800ea46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ea4a:	e7ea      	b.n	800ea22 <_strtoul_l.constprop.0+0x52>
 800ea4c:	2c2b      	cmp	r4, #43	; 0x2b
 800ea4e:	bf04      	itt	eq
 800ea50:	782c      	ldrbeq	r4, [r5, #0]
 800ea52:	1c85      	addeq	r5, r0, #2
 800ea54:	e7cd      	b.n	800e9f2 <_strtoul_l.constprop.0+0x22>
 800ea56:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ea5a:	f1bc 0f19 	cmp.w	ip, #25
 800ea5e:	d801      	bhi.n	800ea64 <_strtoul_l.constprop.0+0x94>
 800ea60:	3c37      	subs	r4, #55	; 0x37
 800ea62:	e7e4      	b.n	800ea2e <_strtoul_l.constprop.0+0x5e>
 800ea64:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ea68:	f1bc 0f19 	cmp.w	ip, #25
 800ea6c:	d804      	bhi.n	800ea78 <_strtoul_l.constprop.0+0xa8>
 800ea6e:	3c57      	subs	r4, #87	; 0x57
 800ea70:	e7dd      	b.n	800ea2e <_strtoul_l.constprop.0+0x5e>
 800ea72:	f04f 37ff 	mov.w	r7, #4294967295
 800ea76:	e7e6      	b.n	800ea46 <_strtoul_l.constprop.0+0x76>
 800ea78:	2f00      	cmp	r7, #0
 800ea7a:	da07      	bge.n	800ea8c <_strtoul_l.constprop.0+0xbc>
 800ea7c:	2322      	movs	r3, #34	; 0x22
 800ea7e:	f8ce 3000 	str.w	r3, [lr]
 800ea82:	f04f 30ff 	mov.w	r0, #4294967295
 800ea86:	b932      	cbnz	r2, 800ea96 <_strtoul_l.constprop.0+0xc6>
 800ea88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea8c:	b106      	cbz	r6, 800ea90 <_strtoul_l.constprop.0+0xc0>
 800ea8e:	4240      	negs	r0, r0
 800ea90:	2a00      	cmp	r2, #0
 800ea92:	d0f9      	beq.n	800ea88 <_strtoul_l.constprop.0+0xb8>
 800ea94:	b107      	cbz	r7, 800ea98 <_strtoul_l.constprop.0+0xc8>
 800ea96:	1e69      	subs	r1, r5, #1
 800ea98:	6011      	str	r1, [r2, #0]
 800ea9a:	e7f5      	b.n	800ea88 <_strtoul_l.constprop.0+0xb8>
 800ea9c:	2430      	movs	r4, #48	; 0x30
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1b5      	bne.n	800ea0e <_strtoul_l.constprop.0+0x3e>
 800eaa2:	2308      	movs	r3, #8
 800eaa4:	e7b3      	b.n	800ea0e <_strtoul_l.constprop.0+0x3e>
 800eaa6:	2c30      	cmp	r4, #48	; 0x30
 800eaa8:	d0a9      	beq.n	800e9fe <_strtoul_l.constprop.0+0x2e>
 800eaaa:	230a      	movs	r3, #10
 800eaac:	e7af      	b.n	800ea0e <_strtoul_l.constprop.0+0x3e>
 800eaae:	bf00      	nop
 800eab0:	08010f61 	.word	0x08010f61

0800eab4 <_strtoul_r>:
 800eab4:	f7ff bf8c 	b.w	800e9d0 <_strtoul_l.constprop.0>

0800eab8 <__submore>:
 800eab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eabc:	460c      	mov	r4, r1
 800eabe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800eac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eac4:	4299      	cmp	r1, r3
 800eac6:	d11d      	bne.n	800eb04 <__submore+0x4c>
 800eac8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800eacc:	f7fb fb10 	bl	800a0f0 <_malloc_r>
 800ead0:	b918      	cbnz	r0, 800eada <__submore+0x22>
 800ead2:	f04f 30ff 	mov.w	r0, #4294967295
 800ead6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eade:	63a3      	str	r3, [r4, #56]	; 0x38
 800eae0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800eae4:	6360      	str	r0, [r4, #52]	; 0x34
 800eae6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800eaea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800eaee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800eaf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800eaf6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800eafa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800eafe:	6020      	str	r0, [r4, #0]
 800eb00:	2000      	movs	r0, #0
 800eb02:	e7e8      	b.n	800ead6 <__submore+0x1e>
 800eb04:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800eb06:	0077      	lsls	r7, r6, #1
 800eb08:	463a      	mov	r2, r7
 800eb0a:	f000 f867 	bl	800ebdc <_realloc_r>
 800eb0e:	4605      	mov	r5, r0
 800eb10:	2800      	cmp	r0, #0
 800eb12:	d0de      	beq.n	800ead2 <__submore+0x1a>
 800eb14:	eb00 0806 	add.w	r8, r0, r6
 800eb18:	4601      	mov	r1, r0
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	4640      	mov	r0, r8
 800eb1e:	f7fb fab0 	bl	800a082 <memcpy>
 800eb22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800eb26:	f8c4 8000 	str.w	r8, [r4]
 800eb2a:	e7e9      	b.n	800eb00 <__submore+0x48>

0800eb2c <__ascii_wctomb>:
 800eb2c:	b149      	cbz	r1, 800eb42 <__ascii_wctomb+0x16>
 800eb2e:	2aff      	cmp	r2, #255	; 0xff
 800eb30:	bf85      	ittet	hi
 800eb32:	238a      	movhi	r3, #138	; 0x8a
 800eb34:	6003      	strhi	r3, [r0, #0]
 800eb36:	700a      	strbls	r2, [r1, #0]
 800eb38:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb3c:	bf98      	it	ls
 800eb3e:	2001      	movls	r0, #1
 800eb40:	4770      	bx	lr
 800eb42:	4608      	mov	r0, r1
 800eb44:	4770      	bx	lr
	...

0800eb48 <__assert_func>:
 800eb48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb4a:	4614      	mov	r4, r2
 800eb4c:	461a      	mov	r2, r3
 800eb4e:	4b09      	ldr	r3, [pc, #36]	; (800eb74 <__assert_func+0x2c>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	4605      	mov	r5, r0
 800eb54:	68d8      	ldr	r0, [r3, #12]
 800eb56:	b14c      	cbz	r4, 800eb6c <__assert_func+0x24>
 800eb58:	4b07      	ldr	r3, [pc, #28]	; (800eb78 <__assert_func+0x30>)
 800eb5a:	9100      	str	r1, [sp, #0]
 800eb5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb60:	4906      	ldr	r1, [pc, #24]	; (800eb7c <__assert_func+0x34>)
 800eb62:	462b      	mov	r3, r5
 800eb64:	f000 f80e 	bl	800eb84 <fiprintf>
 800eb68:	f000 fa80 	bl	800f06c <abort>
 800eb6c:	4b04      	ldr	r3, [pc, #16]	; (800eb80 <__assert_func+0x38>)
 800eb6e:	461c      	mov	r4, r3
 800eb70:	e7f3      	b.n	800eb5a <__assert_func+0x12>
 800eb72:	bf00      	nop
 800eb74:	200000bc 	.word	0x200000bc
 800eb78:	080112f0 	.word	0x080112f0
 800eb7c:	080112fd 	.word	0x080112fd
 800eb80:	0801132b 	.word	0x0801132b

0800eb84 <fiprintf>:
 800eb84:	b40e      	push	{r1, r2, r3}
 800eb86:	b503      	push	{r0, r1, lr}
 800eb88:	4601      	mov	r1, r0
 800eb8a:	ab03      	add	r3, sp, #12
 800eb8c:	4805      	ldr	r0, [pc, #20]	; (800eba4 <fiprintf+0x20>)
 800eb8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb92:	6800      	ldr	r0, [r0, #0]
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	f000 f879 	bl	800ec8c <_vfiprintf_r>
 800eb9a:	b002      	add	sp, #8
 800eb9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eba0:	b003      	add	sp, #12
 800eba2:	4770      	bx	lr
 800eba4:	200000bc 	.word	0x200000bc

0800eba8 <memmove>:
 800eba8:	4288      	cmp	r0, r1
 800ebaa:	b510      	push	{r4, lr}
 800ebac:	eb01 0402 	add.w	r4, r1, r2
 800ebb0:	d902      	bls.n	800ebb8 <memmove+0x10>
 800ebb2:	4284      	cmp	r4, r0
 800ebb4:	4623      	mov	r3, r4
 800ebb6:	d807      	bhi.n	800ebc8 <memmove+0x20>
 800ebb8:	1e43      	subs	r3, r0, #1
 800ebba:	42a1      	cmp	r1, r4
 800ebbc:	d008      	beq.n	800ebd0 <memmove+0x28>
 800ebbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebc6:	e7f8      	b.n	800ebba <memmove+0x12>
 800ebc8:	4402      	add	r2, r0
 800ebca:	4601      	mov	r1, r0
 800ebcc:	428a      	cmp	r2, r1
 800ebce:	d100      	bne.n	800ebd2 <memmove+0x2a>
 800ebd0:	bd10      	pop	{r4, pc}
 800ebd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebda:	e7f7      	b.n	800ebcc <memmove+0x24>

0800ebdc <_realloc_r>:
 800ebdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe0:	4680      	mov	r8, r0
 800ebe2:	4614      	mov	r4, r2
 800ebe4:	460e      	mov	r6, r1
 800ebe6:	b921      	cbnz	r1, 800ebf2 <_realloc_r+0x16>
 800ebe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebec:	4611      	mov	r1, r2
 800ebee:	f7fb ba7f 	b.w	800a0f0 <_malloc_r>
 800ebf2:	b92a      	cbnz	r2, 800ec00 <_realloc_r+0x24>
 800ebf4:	f7ff f9cc 	bl	800df90 <_free_r>
 800ebf8:	4625      	mov	r5, r4
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec00:	f000 faa0 	bl	800f144 <_malloc_usable_size_r>
 800ec04:	4284      	cmp	r4, r0
 800ec06:	4607      	mov	r7, r0
 800ec08:	d802      	bhi.n	800ec10 <_realloc_r+0x34>
 800ec0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec0e:	d812      	bhi.n	800ec36 <_realloc_r+0x5a>
 800ec10:	4621      	mov	r1, r4
 800ec12:	4640      	mov	r0, r8
 800ec14:	f7fb fa6c 	bl	800a0f0 <_malloc_r>
 800ec18:	4605      	mov	r5, r0
 800ec1a:	2800      	cmp	r0, #0
 800ec1c:	d0ed      	beq.n	800ebfa <_realloc_r+0x1e>
 800ec1e:	42bc      	cmp	r4, r7
 800ec20:	4622      	mov	r2, r4
 800ec22:	4631      	mov	r1, r6
 800ec24:	bf28      	it	cs
 800ec26:	463a      	movcs	r2, r7
 800ec28:	f7fb fa2b 	bl	800a082 <memcpy>
 800ec2c:	4631      	mov	r1, r6
 800ec2e:	4640      	mov	r0, r8
 800ec30:	f7ff f9ae 	bl	800df90 <_free_r>
 800ec34:	e7e1      	b.n	800ebfa <_realloc_r+0x1e>
 800ec36:	4635      	mov	r5, r6
 800ec38:	e7df      	b.n	800ebfa <_realloc_r+0x1e>

0800ec3a <__sfputc_r>:
 800ec3a:	6893      	ldr	r3, [r2, #8]
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	b410      	push	{r4}
 800ec42:	6093      	str	r3, [r2, #8]
 800ec44:	da08      	bge.n	800ec58 <__sfputc_r+0x1e>
 800ec46:	6994      	ldr	r4, [r2, #24]
 800ec48:	42a3      	cmp	r3, r4
 800ec4a:	db01      	blt.n	800ec50 <__sfputc_r+0x16>
 800ec4c:	290a      	cmp	r1, #10
 800ec4e:	d103      	bne.n	800ec58 <__sfputc_r+0x1e>
 800ec50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec54:	f000 b94a 	b.w	800eeec <__swbuf_r>
 800ec58:	6813      	ldr	r3, [r2, #0]
 800ec5a:	1c58      	adds	r0, r3, #1
 800ec5c:	6010      	str	r0, [r2, #0]
 800ec5e:	7019      	strb	r1, [r3, #0]
 800ec60:	4608      	mov	r0, r1
 800ec62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <__sfputs_r>:
 800ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	4614      	mov	r4, r2
 800ec70:	18d5      	adds	r5, r2, r3
 800ec72:	42ac      	cmp	r4, r5
 800ec74:	d101      	bne.n	800ec7a <__sfputs_r+0x12>
 800ec76:	2000      	movs	r0, #0
 800ec78:	e007      	b.n	800ec8a <__sfputs_r+0x22>
 800ec7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec7e:	463a      	mov	r2, r7
 800ec80:	4630      	mov	r0, r6
 800ec82:	f7ff ffda 	bl	800ec3a <__sfputc_r>
 800ec86:	1c43      	adds	r3, r0, #1
 800ec88:	d1f3      	bne.n	800ec72 <__sfputs_r+0xa>
 800ec8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ec8c <_vfiprintf_r>:
 800ec8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec90:	460d      	mov	r5, r1
 800ec92:	b09d      	sub	sp, #116	; 0x74
 800ec94:	4614      	mov	r4, r2
 800ec96:	4698      	mov	r8, r3
 800ec98:	4606      	mov	r6, r0
 800ec9a:	b118      	cbz	r0, 800eca4 <_vfiprintf_r+0x18>
 800ec9c:	6983      	ldr	r3, [r0, #24]
 800ec9e:	b90b      	cbnz	r3, 800eca4 <_vfiprintf_r+0x18>
 800eca0:	f7fb f92a 	bl	8009ef8 <__sinit>
 800eca4:	4b89      	ldr	r3, [pc, #548]	; (800eecc <_vfiprintf_r+0x240>)
 800eca6:	429d      	cmp	r5, r3
 800eca8:	d11b      	bne.n	800ece2 <_vfiprintf_r+0x56>
 800ecaa:	6875      	ldr	r5, [r6, #4]
 800ecac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecae:	07d9      	lsls	r1, r3, #31
 800ecb0:	d405      	bmi.n	800ecbe <_vfiprintf_r+0x32>
 800ecb2:	89ab      	ldrh	r3, [r5, #12]
 800ecb4:	059a      	lsls	r2, r3, #22
 800ecb6:	d402      	bmi.n	800ecbe <_vfiprintf_r+0x32>
 800ecb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecba:	f7fb f9e0 	bl	800a07e <__retarget_lock_acquire_recursive>
 800ecbe:	89ab      	ldrh	r3, [r5, #12]
 800ecc0:	071b      	lsls	r3, r3, #28
 800ecc2:	d501      	bpl.n	800ecc8 <_vfiprintf_r+0x3c>
 800ecc4:	692b      	ldr	r3, [r5, #16]
 800ecc6:	b9eb      	cbnz	r3, 800ed04 <_vfiprintf_r+0x78>
 800ecc8:	4629      	mov	r1, r5
 800ecca:	4630      	mov	r0, r6
 800eccc:	f000 f960 	bl	800ef90 <__swsetup_r>
 800ecd0:	b1c0      	cbz	r0, 800ed04 <_vfiprintf_r+0x78>
 800ecd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecd4:	07dc      	lsls	r4, r3, #31
 800ecd6:	d50e      	bpl.n	800ecf6 <_vfiprintf_r+0x6a>
 800ecd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ecdc:	b01d      	add	sp, #116	; 0x74
 800ecde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece2:	4b7b      	ldr	r3, [pc, #492]	; (800eed0 <_vfiprintf_r+0x244>)
 800ece4:	429d      	cmp	r5, r3
 800ece6:	d101      	bne.n	800ecec <_vfiprintf_r+0x60>
 800ece8:	68b5      	ldr	r5, [r6, #8]
 800ecea:	e7df      	b.n	800ecac <_vfiprintf_r+0x20>
 800ecec:	4b79      	ldr	r3, [pc, #484]	; (800eed4 <_vfiprintf_r+0x248>)
 800ecee:	429d      	cmp	r5, r3
 800ecf0:	bf08      	it	eq
 800ecf2:	68f5      	ldreq	r5, [r6, #12]
 800ecf4:	e7da      	b.n	800ecac <_vfiprintf_r+0x20>
 800ecf6:	89ab      	ldrh	r3, [r5, #12]
 800ecf8:	0598      	lsls	r0, r3, #22
 800ecfa:	d4ed      	bmi.n	800ecd8 <_vfiprintf_r+0x4c>
 800ecfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecfe:	f7fb f9bf 	bl	800a080 <__retarget_lock_release_recursive>
 800ed02:	e7e9      	b.n	800ecd8 <_vfiprintf_r+0x4c>
 800ed04:	2300      	movs	r3, #0
 800ed06:	9309      	str	r3, [sp, #36]	; 0x24
 800ed08:	2320      	movs	r3, #32
 800ed0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed0e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed12:	2330      	movs	r3, #48	; 0x30
 800ed14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eed8 <_vfiprintf_r+0x24c>
 800ed18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed1c:	f04f 0901 	mov.w	r9, #1
 800ed20:	4623      	mov	r3, r4
 800ed22:	469a      	mov	sl, r3
 800ed24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed28:	b10a      	cbz	r2, 800ed2e <_vfiprintf_r+0xa2>
 800ed2a:	2a25      	cmp	r2, #37	; 0x25
 800ed2c:	d1f9      	bne.n	800ed22 <_vfiprintf_r+0x96>
 800ed2e:	ebba 0b04 	subs.w	fp, sl, r4
 800ed32:	d00b      	beq.n	800ed4c <_vfiprintf_r+0xc0>
 800ed34:	465b      	mov	r3, fp
 800ed36:	4622      	mov	r2, r4
 800ed38:	4629      	mov	r1, r5
 800ed3a:	4630      	mov	r0, r6
 800ed3c:	f7ff ff94 	bl	800ec68 <__sfputs_r>
 800ed40:	3001      	adds	r0, #1
 800ed42:	f000 80aa 	beq.w	800ee9a <_vfiprintf_r+0x20e>
 800ed46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed48:	445a      	add	r2, fp
 800ed4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ed4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f000 80a2 	beq.w	800ee9a <_vfiprintf_r+0x20e>
 800ed56:	2300      	movs	r3, #0
 800ed58:	f04f 32ff 	mov.w	r2, #4294967295
 800ed5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed60:	f10a 0a01 	add.w	sl, sl, #1
 800ed64:	9304      	str	r3, [sp, #16]
 800ed66:	9307      	str	r3, [sp, #28]
 800ed68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed6c:	931a      	str	r3, [sp, #104]	; 0x68
 800ed6e:	4654      	mov	r4, sl
 800ed70:	2205      	movs	r2, #5
 800ed72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed76:	4858      	ldr	r0, [pc, #352]	; (800eed8 <_vfiprintf_r+0x24c>)
 800ed78:	f7f1 fa42 	bl	8000200 <memchr>
 800ed7c:	9a04      	ldr	r2, [sp, #16]
 800ed7e:	b9d8      	cbnz	r0, 800edb8 <_vfiprintf_r+0x12c>
 800ed80:	06d1      	lsls	r1, r2, #27
 800ed82:	bf44      	itt	mi
 800ed84:	2320      	movmi	r3, #32
 800ed86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed8a:	0713      	lsls	r3, r2, #28
 800ed8c:	bf44      	itt	mi
 800ed8e:	232b      	movmi	r3, #43	; 0x2b
 800ed90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed94:	f89a 3000 	ldrb.w	r3, [sl]
 800ed98:	2b2a      	cmp	r3, #42	; 0x2a
 800ed9a:	d015      	beq.n	800edc8 <_vfiprintf_r+0x13c>
 800ed9c:	9a07      	ldr	r2, [sp, #28]
 800ed9e:	4654      	mov	r4, sl
 800eda0:	2000      	movs	r0, #0
 800eda2:	f04f 0c0a 	mov.w	ip, #10
 800eda6:	4621      	mov	r1, r4
 800eda8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edac:	3b30      	subs	r3, #48	; 0x30
 800edae:	2b09      	cmp	r3, #9
 800edb0:	d94e      	bls.n	800ee50 <_vfiprintf_r+0x1c4>
 800edb2:	b1b0      	cbz	r0, 800ede2 <_vfiprintf_r+0x156>
 800edb4:	9207      	str	r2, [sp, #28]
 800edb6:	e014      	b.n	800ede2 <_vfiprintf_r+0x156>
 800edb8:	eba0 0308 	sub.w	r3, r0, r8
 800edbc:	fa09 f303 	lsl.w	r3, r9, r3
 800edc0:	4313      	orrs	r3, r2
 800edc2:	9304      	str	r3, [sp, #16]
 800edc4:	46a2      	mov	sl, r4
 800edc6:	e7d2      	b.n	800ed6e <_vfiprintf_r+0xe2>
 800edc8:	9b03      	ldr	r3, [sp, #12]
 800edca:	1d19      	adds	r1, r3, #4
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	9103      	str	r1, [sp, #12]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	bfbb      	ittet	lt
 800edd4:	425b      	neglt	r3, r3
 800edd6:	f042 0202 	orrlt.w	r2, r2, #2
 800edda:	9307      	strge	r3, [sp, #28]
 800eddc:	9307      	strlt	r3, [sp, #28]
 800edde:	bfb8      	it	lt
 800ede0:	9204      	strlt	r2, [sp, #16]
 800ede2:	7823      	ldrb	r3, [r4, #0]
 800ede4:	2b2e      	cmp	r3, #46	; 0x2e
 800ede6:	d10c      	bne.n	800ee02 <_vfiprintf_r+0x176>
 800ede8:	7863      	ldrb	r3, [r4, #1]
 800edea:	2b2a      	cmp	r3, #42	; 0x2a
 800edec:	d135      	bne.n	800ee5a <_vfiprintf_r+0x1ce>
 800edee:	9b03      	ldr	r3, [sp, #12]
 800edf0:	1d1a      	adds	r2, r3, #4
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	9203      	str	r2, [sp, #12]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	bfb8      	it	lt
 800edfa:	f04f 33ff 	movlt.w	r3, #4294967295
 800edfe:	3402      	adds	r4, #2
 800ee00:	9305      	str	r3, [sp, #20]
 800ee02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eee8 <_vfiprintf_r+0x25c>
 800ee06:	7821      	ldrb	r1, [r4, #0]
 800ee08:	2203      	movs	r2, #3
 800ee0a:	4650      	mov	r0, sl
 800ee0c:	f7f1 f9f8 	bl	8000200 <memchr>
 800ee10:	b140      	cbz	r0, 800ee24 <_vfiprintf_r+0x198>
 800ee12:	2340      	movs	r3, #64	; 0x40
 800ee14:	eba0 000a 	sub.w	r0, r0, sl
 800ee18:	fa03 f000 	lsl.w	r0, r3, r0
 800ee1c:	9b04      	ldr	r3, [sp, #16]
 800ee1e:	4303      	orrs	r3, r0
 800ee20:	3401      	adds	r4, #1
 800ee22:	9304      	str	r3, [sp, #16]
 800ee24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee28:	482c      	ldr	r0, [pc, #176]	; (800eedc <_vfiprintf_r+0x250>)
 800ee2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee2e:	2206      	movs	r2, #6
 800ee30:	f7f1 f9e6 	bl	8000200 <memchr>
 800ee34:	2800      	cmp	r0, #0
 800ee36:	d03f      	beq.n	800eeb8 <_vfiprintf_r+0x22c>
 800ee38:	4b29      	ldr	r3, [pc, #164]	; (800eee0 <_vfiprintf_r+0x254>)
 800ee3a:	bb1b      	cbnz	r3, 800ee84 <_vfiprintf_r+0x1f8>
 800ee3c:	9b03      	ldr	r3, [sp, #12]
 800ee3e:	3307      	adds	r3, #7
 800ee40:	f023 0307 	bic.w	r3, r3, #7
 800ee44:	3308      	adds	r3, #8
 800ee46:	9303      	str	r3, [sp, #12]
 800ee48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee4a:	443b      	add	r3, r7
 800ee4c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee4e:	e767      	b.n	800ed20 <_vfiprintf_r+0x94>
 800ee50:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee54:	460c      	mov	r4, r1
 800ee56:	2001      	movs	r0, #1
 800ee58:	e7a5      	b.n	800eda6 <_vfiprintf_r+0x11a>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	3401      	adds	r4, #1
 800ee5e:	9305      	str	r3, [sp, #20]
 800ee60:	4619      	mov	r1, r3
 800ee62:	f04f 0c0a 	mov.w	ip, #10
 800ee66:	4620      	mov	r0, r4
 800ee68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee6c:	3a30      	subs	r2, #48	; 0x30
 800ee6e:	2a09      	cmp	r2, #9
 800ee70:	d903      	bls.n	800ee7a <_vfiprintf_r+0x1ee>
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d0c5      	beq.n	800ee02 <_vfiprintf_r+0x176>
 800ee76:	9105      	str	r1, [sp, #20]
 800ee78:	e7c3      	b.n	800ee02 <_vfiprintf_r+0x176>
 800ee7a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee7e:	4604      	mov	r4, r0
 800ee80:	2301      	movs	r3, #1
 800ee82:	e7f0      	b.n	800ee66 <_vfiprintf_r+0x1da>
 800ee84:	ab03      	add	r3, sp, #12
 800ee86:	9300      	str	r3, [sp, #0]
 800ee88:	462a      	mov	r2, r5
 800ee8a:	4b16      	ldr	r3, [pc, #88]	; (800eee4 <_vfiprintf_r+0x258>)
 800ee8c:	a904      	add	r1, sp, #16
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f7fb fa42 	bl	800a318 <_printf_float>
 800ee94:	4607      	mov	r7, r0
 800ee96:	1c78      	adds	r0, r7, #1
 800ee98:	d1d6      	bne.n	800ee48 <_vfiprintf_r+0x1bc>
 800ee9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee9c:	07d9      	lsls	r1, r3, #31
 800ee9e:	d405      	bmi.n	800eeac <_vfiprintf_r+0x220>
 800eea0:	89ab      	ldrh	r3, [r5, #12]
 800eea2:	059a      	lsls	r2, r3, #22
 800eea4:	d402      	bmi.n	800eeac <_vfiprintf_r+0x220>
 800eea6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eea8:	f7fb f8ea 	bl	800a080 <__retarget_lock_release_recursive>
 800eeac:	89ab      	ldrh	r3, [r5, #12]
 800eeae:	065b      	lsls	r3, r3, #25
 800eeb0:	f53f af12 	bmi.w	800ecd8 <_vfiprintf_r+0x4c>
 800eeb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeb6:	e711      	b.n	800ecdc <_vfiprintf_r+0x50>
 800eeb8:	ab03      	add	r3, sp, #12
 800eeba:	9300      	str	r3, [sp, #0]
 800eebc:	462a      	mov	r2, r5
 800eebe:	4b09      	ldr	r3, [pc, #36]	; (800eee4 <_vfiprintf_r+0x258>)
 800eec0:	a904      	add	r1, sp, #16
 800eec2:	4630      	mov	r0, r6
 800eec4:	f7fb fccc 	bl	800a860 <_printf_i>
 800eec8:	e7e4      	b.n	800ee94 <_vfiprintf_r+0x208>
 800eeca:	bf00      	nop
 800eecc:	08010e94 	.word	0x08010e94
 800eed0:	08010eb4 	.word	0x08010eb4
 800eed4:	08010e74 	.word	0x08010e74
 800eed8:	080112c4 	.word	0x080112c4
 800eedc:	080112ce 	.word	0x080112ce
 800eee0:	0800a319 	.word	0x0800a319
 800eee4:	0800ec69 	.word	0x0800ec69
 800eee8:	080112ca 	.word	0x080112ca

0800eeec <__swbuf_r>:
 800eeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeee:	460e      	mov	r6, r1
 800eef0:	4614      	mov	r4, r2
 800eef2:	4605      	mov	r5, r0
 800eef4:	b118      	cbz	r0, 800eefe <__swbuf_r+0x12>
 800eef6:	6983      	ldr	r3, [r0, #24]
 800eef8:	b90b      	cbnz	r3, 800eefe <__swbuf_r+0x12>
 800eefa:	f7fa fffd 	bl	8009ef8 <__sinit>
 800eefe:	4b21      	ldr	r3, [pc, #132]	; (800ef84 <__swbuf_r+0x98>)
 800ef00:	429c      	cmp	r4, r3
 800ef02:	d12b      	bne.n	800ef5c <__swbuf_r+0x70>
 800ef04:	686c      	ldr	r4, [r5, #4]
 800ef06:	69a3      	ldr	r3, [r4, #24]
 800ef08:	60a3      	str	r3, [r4, #8]
 800ef0a:	89a3      	ldrh	r3, [r4, #12]
 800ef0c:	071a      	lsls	r2, r3, #28
 800ef0e:	d52f      	bpl.n	800ef70 <__swbuf_r+0x84>
 800ef10:	6923      	ldr	r3, [r4, #16]
 800ef12:	b36b      	cbz	r3, 800ef70 <__swbuf_r+0x84>
 800ef14:	6923      	ldr	r3, [r4, #16]
 800ef16:	6820      	ldr	r0, [r4, #0]
 800ef18:	1ac0      	subs	r0, r0, r3
 800ef1a:	6963      	ldr	r3, [r4, #20]
 800ef1c:	b2f6      	uxtb	r6, r6
 800ef1e:	4283      	cmp	r3, r0
 800ef20:	4637      	mov	r7, r6
 800ef22:	dc04      	bgt.n	800ef2e <__swbuf_r+0x42>
 800ef24:	4621      	mov	r1, r4
 800ef26:	4628      	mov	r0, r5
 800ef28:	f7fd ff72 	bl	800ce10 <_fflush_r>
 800ef2c:	bb30      	cbnz	r0, 800ef7c <__swbuf_r+0x90>
 800ef2e:	68a3      	ldr	r3, [r4, #8]
 800ef30:	3b01      	subs	r3, #1
 800ef32:	60a3      	str	r3, [r4, #8]
 800ef34:	6823      	ldr	r3, [r4, #0]
 800ef36:	1c5a      	adds	r2, r3, #1
 800ef38:	6022      	str	r2, [r4, #0]
 800ef3a:	701e      	strb	r6, [r3, #0]
 800ef3c:	6963      	ldr	r3, [r4, #20]
 800ef3e:	3001      	adds	r0, #1
 800ef40:	4283      	cmp	r3, r0
 800ef42:	d004      	beq.n	800ef4e <__swbuf_r+0x62>
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	07db      	lsls	r3, r3, #31
 800ef48:	d506      	bpl.n	800ef58 <__swbuf_r+0x6c>
 800ef4a:	2e0a      	cmp	r6, #10
 800ef4c:	d104      	bne.n	800ef58 <__swbuf_r+0x6c>
 800ef4e:	4621      	mov	r1, r4
 800ef50:	4628      	mov	r0, r5
 800ef52:	f7fd ff5d 	bl	800ce10 <_fflush_r>
 800ef56:	b988      	cbnz	r0, 800ef7c <__swbuf_r+0x90>
 800ef58:	4638      	mov	r0, r7
 800ef5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef5c:	4b0a      	ldr	r3, [pc, #40]	; (800ef88 <__swbuf_r+0x9c>)
 800ef5e:	429c      	cmp	r4, r3
 800ef60:	d101      	bne.n	800ef66 <__swbuf_r+0x7a>
 800ef62:	68ac      	ldr	r4, [r5, #8]
 800ef64:	e7cf      	b.n	800ef06 <__swbuf_r+0x1a>
 800ef66:	4b09      	ldr	r3, [pc, #36]	; (800ef8c <__swbuf_r+0xa0>)
 800ef68:	429c      	cmp	r4, r3
 800ef6a:	bf08      	it	eq
 800ef6c:	68ec      	ldreq	r4, [r5, #12]
 800ef6e:	e7ca      	b.n	800ef06 <__swbuf_r+0x1a>
 800ef70:	4621      	mov	r1, r4
 800ef72:	4628      	mov	r0, r5
 800ef74:	f000 f80c 	bl	800ef90 <__swsetup_r>
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	d0cb      	beq.n	800ef14 <__swbuf_r+0x28>
 800ef7c:	f04f 37ff 	mov.w	r7, #4294967295
 800ef80:	e7ea      	b.n	800ef58 <__swbuf_r+0x6c>
 800ef82:	bf00      	nop
 800ef84:	08010e94 	.word	0x08010e94
 800ef88:	08010eb4 	.word	0x08010eb4
 800ef8c:	08010e74 	.word	0x08010e74

0800ef90 <__swsetup_r>:
 800ef90:	4b32      	ldr	r3, [pc, #200]	; (800f05c <__swsetup_r+0xcc>)
 800ef92:	b570      	push	{r4, r5, r6, lr}
 800ef94:	681d      	ldr	r5, [r3, #0]
 800ef96:	4606      	mov	r6, r0
 800ef98:	460c      	mov	r4, r1
 800ef9a:	b125      	cbz	r5, 800efa6 <__swsetup_r+0x16>
 800ef9c:	69ab      	ldr	r3, [r5, #24]
 800ef9e:	b913      	cbnz	r3, 800efa6 <__swsetup_r+0x16>
 800efa0:	4628      	mov	r0, r5
 800efa2:	f7fa ffa9 	bl	8009ef8 <__sinit>
 800efa6:	4b2e      	ldr	r3, [pc, #184]	; (800f060 <__swsetup_r+0xd0>)
 800efa8:	429c      	cmp	r4, r3
 800efaa:	d10f      	bne.n	800efcc <__swsetup_r+0x3c>
 800efac:	686c      	ldr	r4, [r5, #4]
 800efae:	89a3      	ldrh	r3, [r4, #12]
 800efb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800efb4:	0719      	lsls	r1, r3, #28
 800efb6:	d42c      	bmi.n	800f012 <__swsetup_r+0x82>
 800efb8:	06dd      	lsls	r5, r3, #27
 800efba:	d411      	bmi.n	800efe0 <__swsetup_r+0x50>
 800efbc:	2309      	movs	r3, #9
 800efbe:	6033      	str	r3, [r6, #0]
 800efc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800efc4:	81a3      	strh	r3, [r4, #12]
 800efc6:	f04f 30ff 	mov.w	r0, #4294967295
 800efca:	e03e      	b.n	800f04a <__swsetup_r+0xba>
 800efcc:	4b25      	ldr	r3, [pc, #148]	; (800f064 <__swsetup_r+0xd4>)
 800efce:	429c      	cmp	r4, r3
 800efd0:	d101      	bne.n	800efd6 <__swsetup_r+0x46>
 800efd2:	68ac      	ldr	r4, [r5, #8]
 800efd4:	e7eb      	b.n	800efae <__swsetup_r+0x1e>
 800efd6:	4b24      	ldr	r3, [pc, #144]	; (800f068 <__swsetup_r+0xd8>)
 800efd8:	429c      	cmp	r4, r3
 800efda:	bf08      	it	eq
 800efdc:	68ec      	ldreq	r4, [r5, #12]
 800efde:	e7e6      	b.n	800efae <__swsetup_r+0x1e>
 800efe0:	0758      	lsls	r0, r3, #29
 800efe2:	d512      	bpl.n	800f00a <__swsetup_r+0x7a>
 800efe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efe6:	b141      	cbz	r1, 800effa <__swsetup_r+0x6a>
 800efe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efec:	4299      	cmp	r1, r3
 800efee:	d002      	beq.n	800eff6 <__swsetup_r+0x66>
 800eff0:	4630      	mov	r0, r6
 800eff2:	f7fe ffcd 	bl	800df90 <_free_r>
 800eff6:	2300      	movs	r3, #0
 800eff8:	6363      	str	r3, [r4, #52]	; 0x34
 800effa:	89a3      	ldrh	r3, [r4, #12]
 800effc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f000:	81a3      	strh	r3, [r4, #12]
 800f002:	2300      	movs	r3, #0
 800f004:	6063      	str	r3, [r4, #4]
 800f006:	6923      	ldr	r3, [r4, #16]
 800f008:	6023      	str	r3, [r4, #0]
 800f00a:	89a3      	ldrh	r3, [r4, #12]
 800f00c:	f043 0308 	orr.w	r3, r3, #8
 800f010:	81a3      	strh	r3, [r4, #12]
 800f012:	6923      	ldr	r3, [r4, #16]
 800f014:	b94b      	cbnz	r3, 800f02a <__swsetup_r+0x9a>
 800f016:	89a3      	ldrh	r3, [r4, #12]
 800f018:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f020:	d003      	beq.n	800f02a <__swsetup_r+0x9a>
 800f022:	4621      	mov	r1, r4
 800f024:	4630      	mov	r0, r6
 800f026:	f000 f84d 	bl	800f0c4 <__smakebuf_r>
 800f02a:	89a0      	ldrh	r0, [r4, #12]
 800f02c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f030:	f010 0301 	ands.w	r3, r0, #1
 800f034:	d00a      	beq.n	800f04c <__swsetup_r+0xbc>
 800f036:	2300      	movs	r3, #0
 800f038:	60a3      	str	r3, [r4, #8]
 800f03a:	6963      	ldr	r3, [r4, #20]
 800f03c:	425b      	negs	r3, r3
 800f03e:	61a3      	str	r3, [r4, #24]
 800f040:	6923      	ldr	r3, [r4, #16]
 800f042:	b943      	cbnz	r3, 800f056 <__swsetup_r+0xc6>
 800f044:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f048:	d1ba      	bne.n	800efc0 <__swsetup_r+0x30>
 800f04a:	bd70      	pop	{r4, r5, r6, pc}
 800f04c:	0781      	lsls	r1, r0, #30
 800f04e:	bf58      	it	pl
 800f050:	6963      	ldrpl	r3, [r4, #20]
 800f052:	60a3      	str	r3, [r4, #8]
 800f054:	e7f4      	b.n	800f040 <__swsetup_r+0xb0>
 800f056:	2000      	movs	r0, #0
 800f058:	e7f7      	b.n	800f04a <__swsetup_r+0xba>
 800f05a:	bf00      	nop
 800f05c:	200000bc 	.word	0x200000bc
 800f060:	08010e94 	.word	0x08010e94
 800f064:	08010eb4 	.word	0x08010eb4
 800f068:	08010e74 	.word	0x08010e74

0800f06c <abort>:
 800f06c:	b508      	push	{r3, lr}
 800f06e:	2006      	movs	r0, #6
 800f070:	f000 f898 	bl	800f1a4 <raise>
 800f074:	2001      	movs	r0, #1
 800f076:	f7f5 fd1b 	bl	8004ab0 <_exit>

0800f07a <__swhatbuf_r>:
 800f07a:	b570      	push	{r4, r5, r6, lr}
 800f07c:	460e      	mov	r6, r1
 800f07e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f082:	2900      	cmp	r1, #0
 800f084:	b096      	sub	sp, #88	; 0x58
 800f086:	4614      	mov	r4, r2
 800f088:	461d      	mov	r5, r3
 800f08a:	da08      	bge.n	800f09e <__swhatbuf_r+0x24>
 800f08c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f090:	2200      	movs	r2, #0
 800f092:	602a      	str	r2, [r5, #0]
 800f094:	061a      	lsls	r2, r3, #24
 800f096:	d410      	bmi.n	800f0ba <__swhatbuf_r+0x40>
 800f098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f09c:	e00e      	b.n	800f0bc <__swhatbuf_r+0x42>
 800f09e:	466a      	mov	r2, sp
 800f0a0:	f000 f89c 	bl	800f1dc <_fstat_r>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	dbf1      	blt.n	800f08c <__swhatbuf_r+0x12>
 800f0a8:	9a01      	ldr	r2, [sp, #4]
 800f0aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f0ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f0b2:	425a      	negs	r2, r3
 800f0b4:	415a      	adcs	r2, r3
 800f0b6:	602a      	str	r2, [r5, #0]
 800f0b8:	e7ee      	b.n	800f098 <__swhatbuf_r+0x1e>
 800f0ba:	2340      	movs	r3, #64	; 0x40
 800f0bc:	2000      	movs	r0, #0
 800f0be:	6023      	str	r3, [r4, #0]
 800f0c0:	b016      	add	sp, #88	; 0x58
 800f0c2:	bd70      	pop	{r4, r5, r6, pc}

0800f0c4 <__smakebuf_r>:
 800f0c4:	898b      	ldrh	r3, [r1, #12]
 800f0c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0c8:	079d      	lsls	r5, r3, #30
 800f0ca:	4606      	mov	r6, r0
 800f0cc:	460c      	mov	r4, r1
 800f0ce:	d507      	bpl.n	800f0e0 <__smakebuf_r+0x1c>
 800f0d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f0d4:	6023      	str	r3, [r4, #0]
 800f0d6:	6123      	str	r3, [r4, #16]
 800f0d8:	2301      	movs	r3, #1
 800f0da:	6163      	str	r3, [r4, #20]
 800f0dc:	b002      	add	sp, #8
 800f0de:	bd70      	pop	{r4, r5, r6, pc}
 800f0e0:	ab01      	add	r3, sp, #4
 800f0e2:	466a      	mov	r2, sp
 800f0e4:	f7ff ffc9 	bl	800f07a <__swhatbuf_r>
 800f0e8:	9900      	ldr	r1, [sp, #0]
 800f0ea:	4605      	mov	r5, r0
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	f7fa ffff 	bl	800a0f0 <_malloc_r>
 800f0f2:	b948      	cbnz	r0, 800f108 <__smakebuf_r+0x44>
 800f0f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0f8:	059a      	lsls	r2, r3, #22
 800f0fa:	d4ef      	bmi.n	800f0dc <__smakebuf_r+0x18>
 800f0fc:	f023 0303 	bic.w	r3, r3, #3
 800f100:	f043 0302 	orr.w	r3, r3, #2
 800f104:	81a3      	strh	r3, [r4, #12]
 800f106:	e7e3      	b.n	800f0d0 <__smakebuf_r+0xc>
 800f108:	4b0d      	ldr	r3, [pc, #52]	; (800f140 <__smakebuf_r+0x7c>)
 800f10a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f10c:	89a3      	ldrh	r3, [r4, #12]
 800f10e:	6020      	str	r0, [r4, #0]
 800f110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f114:	81a3      	strh	r3, [r4, #12]
 800f116:	9b00      	ldr	r3, [sp, #0]
 800f118:	6163      	str	r3, [r4, #20]
 800f11a:	9b01      	ldr	r3, [sp, #4]
 800f11c:	6120      	str	r0, [r4, #16]
 800f11e:	b15b      	cbz	r3, 800f138 <__smakebuf_r+0x74>
 800f120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f124:	4630      	mov	r0, r6
 800f126:	f000 f86b 	bl	800f200 <_isatty_r>
 800f12a:	b128      	cbz	r0, 800f138 <__smakebuf_r+0x74>
 800f12c:	89a3      	ldrh	r3, [r4, #12]
 800f12e:	f023 0303 	bic.w	r3, r3, #3
 800f132:	f043 0301 	orr.w	r3, r3, #1
 800f136:	81a3      	strh	r3, [r4, #12]
 800f138:	89a0      	ldrh	r0, [r4, #12]
 800f13a:	4305      	orrs	r5, r0
 800f13c:	81a5      	strh	r5, [r4, #12]
 800f13e:	e7cd      	b.n	800f0dc <__smakebuf_r+0x18>
 800f140:	08009e91 	.word	0x08009e91

0800f144 <_malloc_usable_size_r>:
 800f144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f148:	1f18      	subs	r0, r3, #4
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	bfbc      	itt	lt
 800f14e:	580b      	ldrlt	r3, [r1, r0]
 800f150:	18c0      	addlt	r0, r0, r3
 800f152:	4770      	bx	lr

0800f154 <_raise_r>:
 800f154:	291f      	cmp	r1, #31
 800f156:	b538      	push	{r3, r4, r5, lr}
 800f158:	4604      	mov	r4, r0
 800f15a:	460d      	mov	r5, r1
 800f15c:	d904      	bls.n	800f168 <_raise_r+0x14>
 800f15e:	2316      	movs	r3, #22
 800f160:	6003      	str	r3, [r0, #0]
 800f162:	f04f 30ff 	mov.w	r0, #4294967295
 800f166:	bd38      	pop	{r3, r4, r5, pc}
 800f168:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f16a:	b112      	cbz	r2, 800f172 <_raise_r+0x1e>
 800f16c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f170:	b94b      	cbnz	r3, 800f186 <_raise_r+0x32>
 800f172:	4620      	mov	r0, r4
 800f174:	f000 f830 	bl	800f1d8 <_getpid_r>
 800f178:	462a      	mov	r2, r5
 800f17a:	4601      	mov	r1, r0
 800f17c:	4620      	mov	r0, r4
 800f17e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f182:	f000 b817 	b.w	800f1b4 <_kill_r>
 800f186:	2b01      	cmp	r3, #1
 800f188:	d00a      	beq.n	800f1a0 <_raise_r+0x4c>
 800f18a:	1c59      	adds	r1, r3, #1
 800f18c:	d103      	bne.n	800f196 <_raise_r+0x42>
 800f18e:	2316      	movs	r3, #22
 800f190:	6003      	str	r3, [r0, #0]
 800f192:	2001      	movs	r0, #1
 800f194:	e7e7      	b.n	800f166 <_raise_r+0x12>
 800f196:	2400      	movs	r4, #0
 800f198:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f19c:	4628      	mov	r0, r5
 800f19e:	4798      	blx	r3
 800f1a0:	2000      	movs	r0, #0
 800f1a2:	e7e0      	b.n	800f166 <_raise_r+0x12>

0800f1a4 <raise>:
 800f1a4:	4b02      	ldr	r3, [pc, #8]	; (800f1b0 <raise+0xc>)
 800f1a6:	4601      	mov	r1, r0
 800f1a8:	6818      	ldr	r0, [r3, #0]
 800f1aa:	f7ff bfd3 	b.w	800f154 <_raise_r>
 800f1ae:	bf00      	nop
 800f1b0:	200000bc 	.word	0x200000bc

0800f1b4 <_kill_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4d07      	ldr	r5, [pc, #28]	; (800f1d4 <_kill_r+0x20>)
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4608      	mov	r0, r1
 800f1be:	4611      	mov	r1, r2
 800f1c0:	602b      	str	r3, [r5, #0]
 800f1c2:	f7f5 fc65 	bl	8004a90 <_kill>
 800f1c6:	1c43      	adds	r3, r0, #1
 800f1c8:	d102      	bne.n	800f1d0 <_kill_r+0x1c>
 800f1ca:	682b      	ldr	r3, [r5, #0]
 800f1cc:	b103      	cbz	r3, 800f1d0 <_kill_r+0x1c>
 800f1ce:	6023      	str	r3, [r4, #0]
 800f1d0:	bd38      	pop	{r3, r4, r5, pc}
 800f1d2:	bf00      	nop
 800f1d4:	2000db64 	.word	0x2000db64

0800f1d8 <_getpid_r>:
 800f1d8:	f7f5 bc52 	b.w	8004a80 <_getpid>

0800f1dc <_fstat_r>:
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	4d07      	ldr	r5, [pc, #28]	; (800f1fc <_fstat_r+0x20>)
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	4608      	mov	r0, r1
 800f1e6:	4611      	mov	r1, r2
 800f1e8:	602b      	str	r3, [r5, #0]
 800f1ea:	f7f5 fcb0 	bl	8004b4e <_fstat>
 800f1ee:	1c43      	adds	r3, r0, #1
 800f1f0:	d102      	bne.n	800f1f8 <_fstat_r+0x1c>
 800f1f2:	682b      	ldr	r3, [r5, #0]
 800f1f4:	b103      	cbz	r3, 800f1f8 <_fstat_r+0x1c>
 800f1f6:	6023      	str	r3, [r4, #0]
 800f1f8:	bd38      	pop	{r3, r4, r5, pc}
 800f1fa:	bf00      	nop
 800f1fc:	2000db64 	.word	0x2000db64

0800f200 <_isatty_r>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4d06      	ldr	r5, [pc, #24]	; (800f21c <_isatty_r+0x1c>)
 800f204:	2300      	movs	r3, #0
 800f206:	4604      	mov	r4, r0
 800f208:	4608      	mov	r0, r1
 800f20a:	602b      	str	r3, [r5, #0]
 800f20c:	f7f5 fcaf 	bl	8004b6e <_isatty>
 800f210:	1c43      	adds	r3, r0, #1
 800f212:	d102      	bne.n	800f21a <_isatty_r+0x1a>
 800f214:	682b      	ldr	r3, [r5, #0]
 800f216:	b103      	cbz	r3, 800f21a <_isatty_r+0x1a>
 800f218:	6023      	str	r3, [r4, #0]
 800f21a:	bd38      	pop	{r3, r4, r5, pc}
 800f21c:	2000db64 	.word	0x2000db64

0800f220 <cosf>:
 800f220:	ee10 3a10 	vmov	r3, s0
 800f224:	b507      	push	{r0, r1, r2, lr}
 800f226:	4a1e      	ldr	r2, [pc, #120]	; (800f2a0 <cosf+0x80>)
 800f228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f22c:	4293      	cmp	r3, r2
 800f22e:	dc06      	bgt.n	800f23e <cosf+0x1e>
 800f230:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800f2a4 <cosf+0x84>
 800f234:	b003      	add	sp, #12
 800f236:	f85d eb04 	ldr.w	lr, [sp], #4
 800f23a:	f000 b9b7 	b.w	800f5ac <__kernel_cosf>
 800f23e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f242:	db04      	blt.n	800f24e <cosf+0x2e>
 800f244:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f248:	b003      	add	sp, #12
 800f24a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f24e:	4668      	mov	r0, sp
 800f250:	f000 f870 	bl	800f334 <__ieee754_rem_pio2f>
 800f254:	f000 0003 	and.w	r0, r0, #3
 800f258:	2801      	cmp	r0, #1
 800f25a:	d009      	beq.n	800f270 <cosf+0x50>
 800f25c:	2802      	cmp	r0, #2
 800f25e:	d010      	beq.n	800f282 <cosf+0x62>
 800f260:	b9b0      	cbnz	r0, 800f290 <cosf+0x70>
 800f262:	eddd 0a01 	vldr	s1, [sp, #4]
 800f266:	ed9d 0a00 	vldr	s0, [sp]
 800f26a:	f000 f99f 	bl	800f5ac <__kernel_cosf>
 800f26e:	e7eb      	b.n	800f248 <cosf+0x28>
 800f270:	eddd 0a01 	vldr	s1, [sp, #4]
 800f274:	ed9d 0a00 	vldr	s0, [sp]
 800f278:	f000 fc6e 	bl	800fb58 <__kernel_sinf>
 800f27c:	eeb1 0a40 	vneg.f32	s0, s0
 800f280:	e7e2      	b.n	800f248 <cosf+0x28>
 800f282:	eddd 0a01 	vldr	s1, [sp, #4]
 800f286:	ed9d 0a00 	vldr	s0, [sp]
 800f28a:	f000 f98f 	bl	800f5ac <__kernel_cosf>
 800f28e:	e7f5      	b.n	800f27c <cosf+0x5c>
 800f290:	eddd 0a01 	vldr	s1, [sp, #4]
 800f294:	ed9d 0a00 	vldr	s0, [sp]
 800f298:	2001      	movs	r0, #1
 800f29a:	f000 fc5d 	bl	800fb58 <__kernel_sinf>
 800f29e:	e7d3      	b.n	800f248 <cosf+0x28>
 800f2a0:	3f490fd8 	.word	0x3f490fd8
 800f2a4:	00000000 	.word	0x00000000

0800f2a8 <sinf>:
 800f2a8:	ee10 3a10 	vmov	r3, s0
 800f2ac:	b507      	push	{r0, r1, r2, lr}
 800f2ae:	4a1f      	ldr	r2, [pc, #124]	; (800f32c <sinf+0x84>)
 800f2b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	dc07      	bgt.n	800f2c8 <sinf+0x20>
 800f2b8:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800f330 <sinf+0x88>
 800f2bc:	2000      	movs	r0, #0
 800f2be:	b003      	add	sp, #12
 800f2c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2c4:	f000 bc48 	b.w	800fb58 <__kernel_sinf>
 800f2c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f2cc:	db04      	blt.n	800f2d8 <sinf+0x30>
 800f2ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f2d2:	b003      	add	sp, #12
 800f2d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f2d8:	4668      	mov	r0, sp
 800f2da:	f000 f82b 	bl	800f334 <__ieee754_rem_pio2f>
 800f2de:	f000 0003 	and.w	r0, r0, #3
 800f2e2:	2801      	cmp	r0, #1
 800f2e4:	d00a      	beq.n	800f2fc <sinf+0x54>
 800f2e6:	2802      	cmp	r0, #2
 800f2e8:	d00f      	beq.n	800f30a <sinf+0x62>
 800f2ea:	b9c0      	cbnz	r0, 800f31e <sinf+0x76>
 800f2ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800f2f0:	ed9d 0a00 	vldr	s0, [sp]
 800f2f4:	2001      	movs	r0, #1
 800f2f6:	f000 fc2f 	bl	800fb58 <__kernel_sinf>
 800f2fa:	e7ea      	b.n	800f2d2 <sinf+0x2a>
 800f2fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800f300:	ed9d 0a00 	vldr	s0, [sp]
 800f304:	f000 f952 	bl	800f5ac <__kernel_cosf>
 800f308:	e7e3      	b.n	800f2d2 <sinf+0x2a>
 800f30a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f30e:	ed9d 0a00 	vldr	s0, [sp]
 800f312:	2001      	movs	r0, #1
 800f314:	f000 fc20 	bl	800fb58 <__kernel_sinf>
 800f318:	eeb1 0a40 	vneg.f32	s0, s0
 800f31c:	e7d9      	b.n	800f2d2 <sinf+0x2a>
 800f31e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f322:	ed9d 0a00 	vldr	s0, [sp]
 800f326:	f000 f941 	bl	800f5ac <__kernel_cosf>
 800f32a:	e7f5      	b.n	800f318 <sinf+0x70>
 800f32c:	3f490fd8 	.word	0x3f490fd8
 800f330:	00000000 	.word	0x00000000

0800f334 <__ieee754_rem_pio2f>:
 800f334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f336:	ee10 6a10 	vmov	r6, s0
 800f33a:	4b8e      	ldr	r3, [pc, #568]	; (800f574 <__ieee754_rem_pio2f+0x240>)
 800f33c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f340:	429d      	cmp	r5, r3
 800f342:	b087      	sub	sp, #28
 800f344:	eef0 7a40 	vmov.f32	s15, s0
 800f348:	4604      	mov	r4, r0
 800f34a:	dc05      	bgt.n	800f358 <__ieee754_rem_pio2f+0x24>
 800f34c:	2300      	movs	r3, #0
 800f34e:	ed80 0a00 	vstr	s0, [r0]
 800f352:	6043      	str	r3, [r0, #4]
 800f354:	2000      	movs	r0, #0
 800f356:	e01a      	b.n	800f38e <__ieee754_rem_pio2f+0x5a>
 800f358:	4b87      	ldr	r3, [pc, #540]	; (800f578 <__ieee754_rem_pio2f+0x244>)
 800f35a:	429d      	cmp	r5, r3
 800f35c:	dc46      	bgt.n	800f3ec <__ieee754_rem_pio2f+0xb8>
 800f35e:	2e00      	cmp	r6, #0
 800f360:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800f57c <__ieee754_rem_pio2f+0x248>
 800f364:	4b86      	ldr	r3, [pc, #536]	; (800f580 <__ieee754_rem_pio2f+0x24c>)
 800f366:	f025 050f 	bic.w	r5, r5, #15
 800f36a:	dd1f      	ble.n	800f3ac <__ieee754_rem_pio2f+0x78>
 800f36c:	429d      	cmp	r5, r3
 800f36e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f372:	d00e      	beq.n	800f392 <__ieee754_rem_pio2f+0x5e>
 800f374:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800f584 <__ieee754_rem_pio2f+0x250>
 800f378:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f37c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f380:	ed80 0a00 	vstr	s0, [r0]
 800f384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f388:	2001      	movs	r0, #1
 800f38a:	edc4 7a01 	vstr	s15, [r4, #4]
 800f38e:	b007      	add	sp, #28
 800f390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f392:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800f588 <__ieee754_rem_pio2f+0x254>
 800f396:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800f58c <__ieee754_rem_pio2f+0x258>
 800f39a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f39e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f3a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f3a6:	edc0 6a00 	vstr	s13, [r0]
 800f3aa:	e7eb      	b.n	800f384 <__ieee754_rem_pio2f+0x50>
 800f3ac:	429d      	cmp	r5, r3
 800f3ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f3b2:	d00e      	beq.n	800f3d2 <__ieee754_rem_pio2f+0x9e>
 800f3b4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f584 <__ieee754_rem_pio2f+0x250>
 800f3b8:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f3bc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f3c0:	ed80 0a00 	vstr	s0, [r0]
 800f3c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3cc:	edc4 7a01 	vstr	s15, [r4, #4]
 800f3d0:	e7dd      	b.n	800f38e <__ieee754_rem_pio2f+0x5a>
 800f3d2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800f588 <__ieee754_rem_pio2f+0x254>
 800f3d6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800f58c <__ieee754_rem_pio2f+0x258>
 800f3da:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f3de:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f3e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f3e6:	edc0 6a00 	vstr	s13, [r0]
 800f3ea:	e7eb      	b.n	800f3c4 <__ieee754_rem_pio2f+0x90>
 800f3ec:	4b68      	ldr	r3, [pc, #416]	; (800f590 <__ieee754_rem_pio2f+0x25c>)
 800f3ee:	429d      	cmp	r5, r3
 800f3f0:	dc72      	bgt.n	800f4d8 <__ieee754_rem_pio2f+0x1a4>
 800f3f2:	f000 fbf9 	bl	800fbe8 <fabsf>
 800f3f6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f594 <__ieee754_rem_pio2f+0x260>
 800f3fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f3fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f40a:	ee17 0a90 	vmov	r0, s15
 800f40e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f57c <__ieee754_rem_pio2f+0x248>
 800f412:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f416:	281f      	cmp	r0, #31
 800f418:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f584 <__ieee754_rem_pio2f+0x250>
 800f41c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f420:	eeb1 6a47 	vneg.f32	s12, s14
 800f424:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f428:	ee16 2a90 	vmov	r2, s13
 800f42c:	dc1c      	bgt.n	800f468 <__ieee754_rem_pio2f+0x134>
 800f42e:	495a      	ldr	r1, [pc, #360]	; (800f598 <__ieee754_rem_pio2f+0x264>)
 800f430:	1e47      	subs	r7, r0, #1
 800f432:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f436:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f43a:	428b      	cmp	r3, r1
 800f43c:	d014      	beq.n	800f468 <__ieee754_rem_pio2f+0x134>
 800f43e:	6022      	str	r2, [r4, #0]
 800f440:	ed94 7a00 	vldr	s14, [r4]
 800f444:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f448:	2e00      	cmp	r6, #0
 800f44a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f44e:	ed84 0a01 	vstr	s0, [r4, #4]
 800f452:	da9c      	bge.n	800f38e <__ieee754_rem_pio2f+0x5a>
 800f454:	eeb1 7a47 	vneg.f32	s14, s14
 800f458:	eeb1 0a40 	vneg.f32	s0, s0
 800f45c:	ed84 7a00 	vstr	s14, [r4]
 800f460:	ed84 0a01 	vstr	s0, [r4, #4]
 800f464:	4240      	negs	r0, r0
 800f466:	e792      	b.n	800f38e <__ieee754_rem_pio2f+0x5a>
 800f468:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f46c:	15eb      	asrs	r3, r5, #23
 800f46e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800f472:	2d08      	cmp	r5, #8
 800f474:	dde3      	ble.n	800f43e <__ieee754_rem_pio2f+0x10a>
 800f476:	eddf 7a44 	vldr	s15, [pc, #272]	; 800f588 <__ieee754_rem_pio2f+0x254>
 800f47a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f58c <__ieee754_rem_pio2f+0x258>
 800f47e:	eef0 6a40 	vmov.f32	s13, s0
 800f482:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f486:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f48a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800f48e:	eef0 7a40 	vmov.f32	s15, s0
 800f492:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f496:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f49a:	ee15 2a90 	vmov	r2, s11
 800f49e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f4a2:	1a5b      	subs	r3, r3, r1
 800f4a4:	2b19      	cmp	r3, #25
 800f4a6:	dc04      	bgt.n	800f4b2 <__ieee754_rem_pio2f+0x17e>
 800f4a8:	edc4 5a00 	vstr	s11, [r4]
 800f4ac:	eeb0 0a66 	vmov.f32	s0, s13
 800f4b0:	e7c6      	b.n	800f440 <__ieee754_rem_pio2f+0x10c>
 800f4b2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f59c <__ieee754_rem_pio2f+0x268>
 800f4b6:	eeb0 0a66 	vmov.f32	s0, s13
 800f4ba:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f4be:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f4c2:	eddf 6a37 	vldr	s13, [pc, #220]	; 800f5a0 <__ieee754_rem_pio2f+0x26c>
 800f4c6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f4ca:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f4ce:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f4d2:	ed84 7a00 	vstr	s14, [r4]
 800f4d6:	e7b3      	b.n	800f440 <__ieee754_rem_pio2f+0x10c>
 800f4d8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f4dc:	db06      	blt.n	800f4ec <__ieee754_rem_pio2f+0x1b8>
 800f4de:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f4e2:	edc0 7a01 	vstr	s15, [r0, #4]
 800f4e6:	edc0 7a00 	vstr	s15, [r0]
 800f4ea:	e733      	b.n	800f354 <__ieee754_rem_pio2f+0x20>
 800f4ec:	15ea      	asrs	r2, r5, #23
 800f4ee:	3a86      	subs	r2, #134	; 0x86
 800f4f0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f4f4:	ee07 3a90 	vmov	s15, r3
 800f4f8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f4fc:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f5a4 <__ieee754_rem_pio2f+0x270>
 800f500:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f504:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f508:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f50c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f510:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f514:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f518:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f51c:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f520:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f524:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52c:	edcd 7a05 	vstr	s15, [sp, #20]
 800f530:	d11e      	bne.n	800f570 <__ieee754_rem_pio2f+0x23c>
 800f532:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f53a:	bf14      	ite	ne
 800f53c:	2302      	movne	r3, #2
 800f53e:	2301      	moveq	r3, #1
 800f540:	4919      	ldr	r1, [pc, #100]	; (800f5a8 <__ieee754_rem_pio2f+0x274>)
 800f542:	9101      	str	r1, [sp, #4]
 800f544:	2102      	movs	r1, #2
 800f546:	9100      	str	r1, [sp, #0]
 800f548:	a803      	add	r0, sp, #12
 800f54a:	4621      	mov	r1, r4
 800f54c:	f000 f88e 	bl	800f66c <__kernel_rem_pio2f>
 800f550:	2e00      	cmp	r6, #0
 800f552:	f6bf af1c 	bge.w	800f38e <__ieee754_rem_pio2f+0x5a>
 800f556:	edd4 7a00 	vldr	s15, [r4]
 800f55a:	eef1 7a67 	vneg.f32	s15, s15
 800f55e:	edc4 7a00 	vstr	s15, [r4]
 800f562:	edd4 7a01 	vldr	s15, [r4, #4]
 800f566:	eef1 7a67 	vneg.f32	s15, s15
 800f56a:	edc4 7a01 	vstr	s15, [r4, #4]
 800f56e:	e779      	b.n	800f464 <__ieee754_rem_pio2f+0x130>
 800f570:	2303      	movs	r3, #3
 800f572:	e7e5      	b.n	800f540 <__ieee754_rem_pio2f+0x20c>
 800f574:	3f490fd8 	.word	0x3f490fd8
 800f578:	4016cbe3 	.word	0x4016cbe3
 800f57c:	3fc90f80 	.word	0x3fc90f80
 800f580:	3fc90fd0 	.word	0x3fc90fd0
 800f584:	37354443 	.word	0x37354443
 800f588:	37354400 	.word	0x37354400
 800f58c:	2e85a308 	.word	0x2e85a308
 800f590:	43490f80 	.word	0x43490f80
 800f594:	3f22f984 	.word	0x3f22f984
 800f598:	0801132c 	.word	0x0801132c
 800f59c:	2e85a300 	.word	0x2e85a300
 800f5a0:	248d3132 	.word	0x248d3132
 800f5a4:	43800000 	.word	0x43800000
 800f5a8:	080113ac 	.word	0x080113ac

0800f5ac <__kernel_cosf>:
 800f5ac:	ee10 3a10 	vmov	r3, s0
 800f5b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5b4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f5b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f5bc:	da05      	bge.n	800f5ca <__kernel_cosf+0x1e>
 800f5be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f5c2:	ee17 2a90 	vmov	r2, s15
 800f5c6:	2a00      	cmp	r2, #0
 800f5c8:	d03d      	beq.n	800f646 <__kernel_cosf+0x9a>
 800f5ca:	ee60 5a00 	vmul.f32	s11, s0, s0
 800f5ce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f64c <__kernel_cosf+0xa0>
 800f5d2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800f650 <__kernel_cosf+0xa4>
 800f5d6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800f654 <__kernel_cosf+0xa8>
 800f5da:	4a1f      	ldr	r2, [pc, #124]	; (800f658 <__kernel_cosf+0xac>)
 800f5dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f65c <__kernel_cosf+0xb0>
 800f5e6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f5ea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800f660 <__kernel_cosf+0xb4>
 800f5ee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f5f2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800f664 <__kernel_cosf+0xb8>
 800f5f6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f5fa:	eeb0 7a66 	vmov.f32	s14, s13
 800f5fe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f602:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f606:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800f60a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800f60e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800f612:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f616:	dc04      	bgt.n	800f622 <__kernel_cosf+0x76>
 800f618:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f61c:	ee36 0a47 	vsub.f32	s0, s12, s14
 800f620:	4770      	bx	lr
 800f622:	4a11      	ldr	r2, [pc, #68]	; (800f668 <__kernel_cosf+0xbc>)
 800f624:	4293      	cmp	r3, r2
 800f626:	bfda      	itte	le
 800f628:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f62c:	ee06 3a90 	vmovle	s13, r3
 800f630:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800f634:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f638:	ee36 0a66 	vsub.f32	s0, s12, s13
 800f63c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f640:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f644:	4770      	bx	lr
 800f646:	eeb0 0a46 	vmov.f32	s0, s12
 800f64a:	4770      	bx	lr
 800f64c:	ad47d74e 	.word	0xad47d74e
 800f650:	310f74f6 	.word	0x310f74f6
 800f654:	3d2aaaab 	.word	0x3d2aaaab
 800f658:	3e999999 	.word	0x3e999999
 800f65c:	b493f27c 	.word	0xb493f27c
 800f660:	37d00d01 	.word	0x37d00d01
 800f664:	bab60b61 	.word	0xbab60b61
 800f668:	3f480000 	.word	0x3f480000

0800f66c <__kernel_rem_pio2f>:
 800f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f670:	ed2d 8b04 	vpush	{d8-d9}
 800f674:	b0d9      	sub	sp, #356	; 0x164
 800f676:	4688      	mov	r8, r1
 800f678:	9002      	str	r0, [sp, #8]
 800f67a:	49bb      	ldr	r1, [pc, #748]	; (800f968 <__kernel_rem_pio2f+0x2fc>)
 800f67c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800f67e:	9301      	str	r3, [sp, #4]
 800f680:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800f684:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800f688:	1e59      	subs	r1, r3, #1
 800f68a:	1d13      	adds	r3, r2, #4
 800f68c:	db27      	blt.n	800f6de <__kernel_rem_pio2f+0x72>
 800f68e:	f1b2 0b03 	subs.w	fp, r2, #3
 800f692:	bf48      	it	mi
 800f694:	f102 0b04 	addmi.w	fp, r2, #4
 800f698:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800f69c:	1c45      	adds	r5, r0, #1
 800f69e:	00ec      	lsls	r4, r5, #3
 800f6a0:	1a47      	subs	r7, r0, r1
 800f6a2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800f978 <__kernel_rem_pio2f+0x30c>
 800f6a6:	9403      	str	r4, [sp, #12]
 800f6a8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800f6ac:	eb0a 0c01 	add.w	ip, sl, r1
 800f6b0:	ae1c      	add	r6, sp, #112	; 0x70
 800f6b2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800f6b6:	2400      	movs	r4, #0
 800f6b8:	4564      	cmp	r4, ip
 800f6ba:	dd12      	ble.n	800f6e2 <__kernel_rem_pio2f+0x76>
 800f6bc:	9b01      	ldr	r3, [sp, #4]
 800f6be:	ac1c      	add	r4, sp, #112	; 0x70
 800f6c0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f6c4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800f6c8:	f04f 0c00 	mov.w	ip, #0
 800f6cc:	45d4      	cmp	ip, sl
 800f6ce:	dc27      	bgt.n	800f720 <__kernel_rem_pio2f+0xb4>
 800f6d0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f6d4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800f978 <__kernel_rem_pio2f+0x30c>
 800f6d8:	4627      	mov	r7, r4
 800f6da:	2600      	movs	r6, #0
 800f6dc:	e016      	b.n	800f70c <__kernel_rem_pio2f+0xa0>
 800f6de:	2000      	movs	r0, #0
 800f6e0:	e7dc      	b.n	800f69c <__kernel_rem_pio2f+0x30>
 800f6e2:	42e7      	cmn	r7, r4
 800f6e4:	bf5d      	ittte	pl
 800f6e6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800f6ea:	ee07 3a90 	vmovpl	s15, r3
 800f6ee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f6f2:	eef0 7a47 	vmovmi.f32	s15, s14
 800f6f6:	ece6 7a01 	vstmia	r6!, {s15}
 800f6fa:	3401      	adds	r4, #1
 800f6fc:	e7dc      	b.n	800f6b8 <__kernel_rem_pio2f+0x4c>
 800f6fe:	ecf9 6a01 	vldmia	r9!, {s13}
 800f702:	ed97 7a00 	vldr	s14, [r7]
 800f706:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f70a:	3601      	adds	r6, #1
 800f70c:	428e      	cmp	r6, r1
 800f70e:	f1a7 0704 	sub.w	r7, r7, #4
 800f712:	ddf4      	ble.n	800f6fe <__kernel_rem_pio2f+0x92>
 800f714:	eceb 7a01 	vstmia	fp!, {s15}
 800f718:	f10c 0c01 	add.w	ip, ip, #1
 800f71c:	3404      	adds	r4, #4
 800f71e:	e7d5      	b.n	800f6cc <__kernel_rem_pio2f+0x60>
 800f720:	ab08      	add	r3, sp, #32
 800f722:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f726:	eddf 8a93 	vldr	s17, [pc, #588]	; 800f974 <__kernel_rem_pio2f+0x308>
 800f72a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800f970 <__kernel_rem_pio2f+0x304>
 800f72e:	9304      	str	r3, [sp, #16]
 800f730:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800f734:	4656      	mov	r6, sl
 800f736:	00b3      	lsls	r3, r6, #2
 800f738:	9305      	str	r3, [sp, #20]
 800f73a:	ab58      	add	r3, sp, #352	; 0x160
 800f73c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f740:	ac08      	add	r4, sp, #32
 800f742:	ab44      	add	r3, sp, #272	; 0x110
 800f744:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800f748:	46a4      	mov	ip, r4
 800f74a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f74e:	4637      	mov	r7, r6
 800f750:	2f00      	cmp	r7, #0
 800f752:	f1a0 0004 	sub.w	r0, r0, #4
 800f756:	dc4f      	bgt.n	800f7f8 <__kernel_rem_pio2f+0x18c>
 800f758:	4628      	mov	r0, r5
 800f75a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800f75e:	f000 fa8d 	bl	800fc7c <scalbnf>
 800f762:	eeb0 8a40 	vmov.f32	s16, s0
 800f766:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f76a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f76e:	f000 fa43 	bl	800fbf8 <floorf>
 800f772:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800f776:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f77a:	2d00      	cmp	r5, #0
 800f77c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f780:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f784:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800f788:	ee17 9a90 	vmov	r9, s15
 800f78c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f790:	dd44      	ble.n	800f81c <__kernel_rem_pio2f+0x1b0>
 800f792:	f106 3cff 	add.w	ip, r6, #4294967295
 800f796:	ab08      	add	r3, sp, #32
 800f798:	f1c5 0e08 	rsb	lr, r5, #8
 800f79c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800f7a0:	fa47 f00e 	asr.w	r0, r7, lr
 800f7a4:	4481      	add	r9, r0
 800f7a6:	fa00 f00e 	lsl.w	r0, r0, lr
 800f7aa:	1a3f      	subs	r7, r7, r0
 800f7ac:	f1c5 0007 	rsb	r0, r5, #7
 800f7b0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800f7b4:	4107      	asrs	r7, r0
 800f7b6:	2f00      	cmp	r7, #0
 800f7b8:	dd3f      	ble.n	800f83a <__kernel_rem_pio2f+0x1ce>
 800f7ba:	f04f 0e00 	mov.w	lr, #0
 800f7be:	f109 0901 	add.w	r9, r9, #1
 800f7c2:	4673      	mov	r3, lr
 800f7c4:	4576      	cmp	r6, lr
 800f7c6:	dc6b      	bgt.n	800f8a0 <__kernel_rem_pio2f+0x234>
 800f7c8:	2d00      	cmp	r5, #0
 800f7ca:	dd04      	ble.n	800f7d6 <__kernel_rem_pio2f+0x16a>
 800f7cc:	2d01      	cmp	r5, #1
 800f7ce:	d078      	beq.n	800f8c2 <__kernel_rem_pio2f+0x256>
 800f7d0:	2d02      	cmp	r5, #2
 800f7d2:	f000 8081 	beq.w	800f8d8 <__kernel_rem_pio2f+0x26c>
 800f7d6:	2f02      	cmp	r7, #2
 800f7d8:	d12f      	bne.n	800f83a <__kernel_rem_pio2f+0x1ce>
 800f7da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f7de:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f7e2:	b353      	cbz	r3, 800f83a <__kernel_rem_pio2f+0x1ce>
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800f7ea:	f000 fa47 	bl	800fc7c <scalbnf>
 800f7ee:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f7f2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f7f6:	e020      	b.n	800f83a <__kernel_rem_pio2f+0x1ce>
 800f7f8:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f7fc:	3f01      	subs	r7, #1
 800f7fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f806:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f80a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f80e:	ecac 0a01 	vstmia	ip!, {s0}
 800f812:	ed90 0a00 	vldr	s0, [r0]
 800f816:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f81a:	e799      	b.n	800f750 <__kernel_rem_pio2f+0xe4>
 800f81c:	d105      	bne.n	800f82a <__kernel_rem_pio2f+0x1be>
 800f81e:	1e70      	subs	r0, r6, #1
 800f820:	ab08      	add	r3, sp, #32
 800f822:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800f826:	11ff      	asrs	r7, r7, #7
 800f828:	e7c5      	b.n	800f7b6 <__kernel_rem_pio2f+0x14a>
 800f82a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f82e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f836:	da31      	bge.n	800f89c <__kernel_rem_pio2f+0x230>
 800f838:	2700      	movs	r7, #0
 800f83a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f842:	f040 809b 	bne.w	800f97c <__kernel_rem_pio2f+0x310>
 800f846:	1e74      	subs	r4, r6, #1
 800f848:	46a4      	mov	ip, r4
 800f84a:	2000      	movs	r0, #0
 800f84c:	45d4      	cmp	ip, sl
 800f84e:	da4a      	bge.n	800f8e6 <__kernel_rem_pio2f+0x27a>
 800f850:	2800      	cmp	r0, #0
 800f852:	d07a      	beq.n	800f94a <__kernel_rem_pio2f+0x2de>
 800f854:	ab08      	add	r3, sp, #32
 800f856:	3d08      	subs	r5, #8
 800f858:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f000 8081 	beq.w	800f964 <__kernel_rem_pio2f+0x2f8>
 800f862:	4628      	mov	r0, r5
 800f864:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f868:	00a5      	lsls	r5, r4, #2
 800f86a:	f000 fa07 	bl	800fc7c <scalbnf>
 800f86e:	aa44      	add	r2, sp, #272	; 0x110
 800f870:	1d2b      	adds	r3, r5, #4
 800f872:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800f974 <__kernel_rem_pio2f+0x308>
 800f876:	18d1      	adds	r1, r2, r3
 800f878:	4622      	mov	r2, r4
 800f87a:	2a00      	cmp	r2, #0
 800f87c:	f280 80ae 	bge.w	800f9dc <__kernel_rem_pio2f+0x370>
 800f880:	4622      	mov	r2, r4
 800f882:	2a00      	cmp	r2, #0
 800f884:	f2c0 80cc 	blt.w	800fa20 <__kernel_rem_pio2f+0x3b4>
 800f888:	a944      	add	r1, sp, #272	; 0x110
 800f88a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800f88e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800f96c <__kernel_rem_pio2f+0x300>
 800f892:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f978 <__kernel_rem_pio2f+0x30c>
 800f896:	2000      	movs	r0, #0
 800f898:	1aa1      	subs	r1, r4, r2
 800f89a:	e0b6      	b.n	800fa0a <__kernel_rem_pio2f+0x39e>
 800f89c:	2702      	movs	r7, #2
 800f89e:	e78c      	b.n	800f7ba <__kernel_rem_pio2f+0x14e>
 800f8a0:	6820      	ldr	r0, [r4, #0]
 800f8a2:	b94b      	cbnz	r3, 800f8b8 <__kernel_rem_pio2f+0x24c>
 800f8a4:	b118      	cbz	r0, 800f8ae <__kernel_rem_pio2f+0x242>
 800f8a6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800f8aa:	6020      	str	r0, [r4, #0]
 800f8ac:	2001      	movs	r0, #1
 800f8ae:	f10e 0e01 	add.w	lr, lr, #1
 800f8b2:	3404      	adds	r4, #4
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	e785      	b.n	800f7c4 <__kernel_rem_pio2f+0x158>
 800f8b8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800f8bc:	6020      	str	r0, [r4, #0]
 800f8be:	4618      	mov	r0, r3
 800f8c0:	e7f5      	b.n	800f8ae <__kernel_rem_pio2f+0x242>
 800f8c2:	1e74      	subs	r4, r6, #1
 800f8c4:	a808      	add	r0, sp, #32
 800f8c6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f8ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f8ce:	f10d 0c20 	add.w	ip, sp, #32
 800f8d2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800f8d6:	e77e      	b.n	800f7d6 <__kernel_rem_pio2f+0x16a>
 800f8d8:	1e74      	subs	r4, r6, #1
 800f8da:	a808      	add	r0, sp, #32
 800f8dc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f8e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800f8e4:	e7f3      	b.n	800f8ce <__kernel_rem_pio2f+0x262>
 800f8e6:	ab08      	add	r3, sp, #32
 800f8e8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800f8ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f8f0:	4318      	orrs	r0, r3
 800f8f2:	e7ab      	b.n	800f84c <__kernel_rem_pio2f+0x1e0>
 800f8f4:	f10c 0c01 	add.w	ip, ip, #1
 800f8f8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800f8fc:	2c00      	cmp	r4, #0
 800f8fe:	d0f9      	beq.n	800f8f4 <__kernel_rem_pio2f+0x288>
 800f900:	9b05      	ldr	r3, [sp, #20]
 800f902:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800f906:	eb0d 0003 	add.w	r0, sp, r3
 800f90a:	9b01      	ldr	r3, [sp, #4]
 800f90c:	18f4      	adds	r4, r6, r3
 800f90e:	ab1c      	add	r3, sp, #112	; 0x70
 800f910:	1c77      	adds	r7, r6, #1
 800f912:	384c      	subs	r0, #76	; 0x4c
 800f914:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f918:	4466      	add	r6, ip
 800f91a:	42be      	cmp	r6, r7
 800f91c:	f6ff af0b 	blt.w	800f736 <__kernel_rem_pio2f+0xca>
 800f920:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800f924:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f928:	ee07 3a90 	vmov	s15, r3
 800f92c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f930:	f04f 0c00 	mov.w	ip, #0
 800f934:	ece4 7a01 	vstmia	r4!, {s15}
 800f938:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f978 <__kernel_rem_pio2f+0x30c>
 800f93c:	46a1      	mov	r9, r4
 800f93e:	458c      	cmp	ip, r1
 800f940:	dd07      	ble.n	800f952 <__kernel_rem_pio2f+0x2e6>
 800f942:	ece0 7a01 	vstmia	r0!, {s15}
 800f946:	3701      	adds	r7, #1
 800f948:	e7e7      	b.n	800f91a <__kernel_rem_pio2f+0x2ae>
 800f94a:	9804      	ldr	r0, [sp, #16]
 800f94c:	f04f 0c01 	mov.w	ip, #1
 800f950:	e7d2      	b.n	800f8f8 <__kernel_rem_pio2f+0x28c>
 800f952:	ecfe 6a01 	vldmia	lr!, {s13}
 800f956:	ed39 7a01 	vldmdb	r9!, {s14}
 800f95a:	f10c 0c01 	add.w	ip, ip, #1
 800f95e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f962:	e7ec      	b.n	800f93e <__kernel_rem_pio2f+0x2d2>
 800f964:	3c01      	subs	r4, #1
 800f966:	e775      	b.n	800f854 <__kernel_rem_pio2f+0x1e8>
 800f968:	080116f0 	.word	0x080116f0
 800f96c:	080116c4 	.word	0x080116c4
 800f970:	43800000 	.word	0x43800000
 800f974:	3b800000 	.word	0x3b800000
 800f978:	00000000 	.word	0x00000000
 800f97c:	9b03      	ldr	r3, [sp, #12]
 800f97e:	eeb0 0a48 	vmov.f32	s0, s16
 800f982:	1a98      	subs	r0, r3, r2
 800f984:	f000 f97a 	bl	800fc7c <scalbnf>
 800f988:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800f970 <__kernel_rem_pio2f+0x304>
 800f98c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f994:	db19      	blt.n	800f9ca <__kernel_rem_pio2f+0x35e>
 800f996:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f974 <__kernel_rem_pio2f+0x308>
 800f99a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f99e:	aa08      	add	r2, sp, #32
 800f9a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9a4:	1c74      	adds	r4, r6, #1
 800f9a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9aa:	3508      	adds	r5, #8
 800f9ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f9b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f9b8:	ee10 3a10 	vmov	r3, s0
 800f9bc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f9c0:	ee17 3a90 	vmov	r3, s15
 800f9c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f9c8:	e74b      	b.n	800f862 <__kernel_rem_pio2f+0x1f6>
 800f9ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f9ce:	aa08      	add	r2, sp, #32
 800f9d0:	ee10 3a10 	vmov	r3, s0
 800f9d4:	4634      	mov	r4, r6
 800f9d6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f9da:	e742      	b.n	800f862 <__kernel_rem_pio2f+0x1f6>
 800f9dc:	a808      	add	r0, sp, #32
 800f9de:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f9e2:	9001      	str	r0, [sp, #4]
 800f9e4:	ee07 0a90 	vmov	s15, r0
 800f9e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9ec:	3a01      	subs	r2, #1
 800f9ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f9f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f9f6:	ed61 7a01 	vstmdb	r1!, {s15}
 800f9fa:	e73e      	b.n	800f87a <__kernel_rem_pio2f+0x20e>
 800f9fc:	ecfc 6a01 	vldmia	ip!, {s13}
 800fa00:	ecb6 7a01 	vldmia	r6!, {s14}
 800fa04:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fa08:	3001      	adds	r0, #1
 800fa0a:	4550      	cmp	r0, sl
 800fa0c:	dc01      	bgt.n	800fa12 <__kernel_rem_pio2f+0x3a6>
 800fa0e:	4288      	cmp	r0, r1
 800fa10:	ddf4      	ble.n	800f9fc <__kernel_rem_pio2f+0x390>
 800fa12:	a858      	add	r0, sp, #352	; 0x160
 800fa14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fa18:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800fa1c:	3a01      	subs	r2, #1
 800fa1e:	e730      	b.n	800f882 <__kernel_rem_pio2f+0x216>
 800fa20:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800fa22:	2a02      	cmp	r2, #2
 800fa24:	dc09      	bgt.n	800fa3a <__kernel_rem_pio2f+0x3ce>
 800fa26:	2a00      	cmp	r2, #0
 800fa28:	dc2a      	bgt.n	800fa80 <__kernel_rem_pio2f+0x414>
 800fa2a:	d043      	beq.n	800fab4 <__kernel_rem_pio2f+0x448>
 800fa2c:	f009 0007 	and.w	r0, r9, #7
 800fa30:	b059      	add	sp, #356	; 0x164
 800fa32:	ecbd 8b04 	vpop	{d8-d9}
 800fa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800fa3c:	2b03      	cmp	r3, #3
 800fa3e:	d1f5      	bne.n	800fa2c <__kernel_rem_pio2f+0x3c0>
 800fa40:	ab30      	add	r3, sp, #192	; 0xc0
 800fa42:	442b      	add	r3, r5
 800fa44:	461a      	mov	r2, r3
 800fa46:	4619      	mov	r1, r3
 800fa48:	4620      	mov	r0, r4
 800fa4a:	2800      	cmp	r0, #0
 800fa4c:	f1a1 0104 	sub.w	r1, r1, #4
 800fa50:	dc51      	bgt.n	800faf6 <__kernel_rem_pio2f+0x48a>
 800fa52:	4621      	mov	r1, r4
 800fa54:	2901      	cmp	r1, #1
 800fa56:	f1a2 0204 	sub.w	r2, r2, #4
 800fa5a:	dc5c      	bgt.n	800fb16 <__kernel_rem_pio2f+0x4aa>
 800fa5c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f978 <__kernel_rem_pio2f+0x30c>
 800fa60:	3304      	adds	r3, #4
 800fa62:	2c01      	cmp	r4, #1
 800fa64:	dc67      	bgt.n	800fb36 <__kernel_rem_pio2f+0x4ca>
 800fa66:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800fa6a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800fa6e:	2f00      	cmp	r7, #0
 800fa70:	d167      	bne.n	800fb42 <__kernel_rem_pio2f+0x4d6>
 800fa72:	edc8 6a00 	vstr	s13, [r8]
 800fa76:	ed88 7a01 	vstr	s14, [r8, #4]
 800fa7a:	edc8 7a02 	vstr	s15, [r8, #8]
 800fa7e:	e7d5      	b.n	800fa2c <__kernel_rem_pio2f+0x3c0>
 800fa80:	aa30      	add	r2, sp, #192	; 0xc0
 800fa82:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800f978 <__kernel_rem_pio2f+0x30c>
 800fa86:	4413      	add	r3, r2
 800fa88:	4622      	mov	r2, r4
 800fa8a:	2a00      	cmp	r2, #0
 800fa8c:	da24      	bge.n	800fad8 <__kernel_rem_pio2f+0x46c>
 800fa8e:	b34f      	cbz	r7, 800fae4 <__kernel_rem_pio2f+0x478>
 800fa90:	eef1 7a47 	vneg.f32	s15, s14
 800fa94:	edc8 7a00 	vstr	s15, [r8]
 800fa98:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800fa9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800faa0:	aa31      	add	r2, sp, #196	; 0xc4
 800faa2:	2301      	movs	r3, #1
 800faa4:	429c      	cmp	r4, r3
 800faa6:	da20      	bge.n	800faea <__kernel_rem_pio2f+0x47e>
 800faa8:	b10f      	cbz	r7, 800faae <__kernel_rem_pio2f+0x442>
 800faaa:	eef1 7a67 	vneg.f32	s15, s15
 800faae:	edc8 7a01 	vstr	s15, [r8, #4]
 800fab2:	e7bb      	b.n	800fa2c <__kernel_rem_pio2f+0x3c0>
 800fab4:	aa30      	add	r2, sp, #192	; 0xc0
 800fab6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800f978 <__kernel_rem_pio2f+0x30c>
 800faba:	4413      	add	r3, r2
 800fabc:	2c00      	cmp	r4, #0
 800fabe:	da05      	bge.n	800facc <__kernel_rem_pio2f+0x460>
 800fac0:	b10f      	cbz	r7, 800fac6 <__kernel_rem_pio2f+0x45a>
 800fac2:	eef1 7a67 	vneg.f32	s15, s15
 800fac6:	edc8 7a00 	vstr	s15, [r8]
 800faca:	e7af      	b.n	800fa2c <__kernel_rem_pio2f+0x3c0>
 800facc:	ed33 7a01 	vldmdb	r3!, {s14}
 800fad0:	3c01      	subs	r4, #1
 800fad2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fad6:	e7f1      	b.n	800fabc <__kernel_rem_pio2f+0x450>
 800fad8:	ed73 7a01 	vldmdb	r3!, {s15}
 800fadc:	3a01      	subs	r2, #1
 800fade:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fae2:	e7d2      	b.n	800fa8a <__kernel_rem_pio2f+0x41e>
 800fae4:	eef0 7a47 	vmov.f32	s15, s14
 800fae8:	e7d4      	b.n	800fa94 <__kernel_rem_pio2f+0x428>
 800faea:	ecb2 7a01 	vldmia	r2!, {s14}
 800faee:	3301      	adds	r3, #1
 800faf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800faf4:	e7d6      	b.n	800faa4 <__kernel_rem_pio2f+0x438>
 800faf6:	edd1 7a00 	vldr	s15, [r1]
 800fafa:	edd1 6a01 	vldr	s13, [r1, #4]
 800fafe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb02:	3801      	subs	r0, #1
 800fb04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb08:	ed81 7a00 	vstr	s14, [r1]
 800fb0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb10:	edc1 7a01 	vstr	s15, [r1, #4]
 800fb14:	e799      	b.n	800fa4a <__kernel_rem_pio2f+0x3de>
 800fb16:	edd2 7a00 	vldr	s15, [r2]
 800fb1a:	edd2 6a01 	vldr	s13, [r2, #4]
 800fb1e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb22:	3901      	subs	r1, #1
 800fb24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb28:	ed82 7a00 	vstr	s14, [r2]
 800fb2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb30:	edc2 7a01 	vstr	s15, [r2, #4]
 800fb34:	e78e      	b.n	800fa54 <__kernel_rem_pio2f+0x3e8>
 800fb36:	ed33 7a01 	vldmdb	r3!, {s14}
 800fb3a:	3c01      	subs	r4, #1
 800fb3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb40:	e78f      	b.n	800fa62 <__kernel_rem_pio2f+0x3f6>
 800fb42:	eef1 6a66 	vneg.f32	s13, s13
 800fb46:	eeb1 7a47 	vneg.f32	s14, s14
 800fb4a:	edc8 6a00 	vstr	s13, [r8]
 800fb4e:	ed88 7a01 	vstr	s14, [r8, #4]
 800fb52:	eef1 7a67 	vneg.f32	s15, s15
 800fb56:	e790      	b.n	800fa7a <__kernel_rem_pio2f+0x40e>

0800fb58 <__kernel_sinf>:
 800fb58:	ee10 3a10 	vmov	r3, s0
 800fb5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb60:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fb64:	da04      	bge.n	800fb70 <__kernel_sinf+0x18>
 800fb66:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fb6a:	ee17 3a90 	vmov	r3, s15
 800fb6e:	b35b      	cbz	r3, 800fbc8 <__kernel_sinf+0x70>
 800fb70:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fb74:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fbcc <__kernel_sinf+0x74>
 800fb78:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800fbd0 <__kernel_sinf+0x78>
 800fb7c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fb80:	eddf 7a14 	vldr	s15, [pc, #80]	; 800fbd4 <__kernel_sinf+0x7c>
 800fb84:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb88:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800fbd8 <__kernel_sinf+0x80>
 800fb8c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fb90:	eddf 7a12 	vldr	s15, [pc, #72]	; 800fbdc <__kernel_sinf+0x84>
 800fb94:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fb98:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb9c:	b930      	cbnz	r0, 800fbac <__kernel_sinf+0x54>
 800fb9e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800fbe0 <__kernel_sinf+0x88>
 800fba2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fba6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fbaa:	4770      	bx	lr
 800fbac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fbb0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fbb4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fbb8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fbbc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800fbe4 <__kernel_sinf+0x8c>
 800fbc0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fbc4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	2f2ec9d3 	.word	0x2f2ec9d3
 800fbd0:	b2d72f34 	.word	0xb2d72f34
 800fbd4:	3638ef1b 	.word	0x3638ef1b
 800fbd8:	b9500d01 	.word	0xb9500d01
 800fbdc:	3c088889 	.word	0x3c088889
 800fbe0:	be2aaaab 	.word	0xbe2aaaab
 800fbe4:	3e2aaaab 	.word	0x3e2aaaab

0800fbe8 <fabsf>:
 800fbe8:	ee10 3a10 	vmov	r3, s0
 800fbec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbf0:	ee00 3a10 	vmov	s0, r3
 800fbf4:	4770      	bx	lr
	...

0800fbf8 <floorf>:
 800fbf8:	ee10 3a10 	vmov	r3, s0
 800fbfc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fc00:	3a7f      	subs	r2, #127	; 0x7f
 800fc02:	2a16      	cmp	r2, #22
 800fc04:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fc08:	dc2a      	bgt.n	800fc60 <floorf+0x68>
 800fc0a:	2a00      	cmp	r2, #0
 800fc0c:	da11      	bge.n	800fc32 <floorf+0x3a>
 800fc0e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800fc70 <floorf+0x78>
 800fc12:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc1e:	dd05      	ble.n	800fc2c <floorf+0x34>
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	da23      	bge.n	800fc6c <floorf+0x74>
 800fc24:	4a13      	ldr	r2, [pc, #76]	; (800fc74 <floorf+0x7c>)
 800fc26:	2900      	cmp	r1, #0
 800fc28:	bf18      	it	ne
 800fc2a:	4613      	movne	r3, r2
 800fc2c:	ee00 3a10 	vmov	s0, r3
 800fc30:	4770      	bx	lr
 800fc32:	4911      	ldr	r1, [pc, #68]	; (800fc78 <floorf+0x80>)
 800fc34:	4111      	asrs	r1, r2
 800fc36:	420b      	tst	r3, r1
 800fc38:	d0fa      	beq.n	800fc30 <floorf+0x38>
 800fc3a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800fc70 <floorf+0x78>
 800fc3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc42:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc4a:	ddef      	ble.n	800fc2c <floorf+0x34>
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	bfbe      	ittt	lt
 800fc50:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800fc54:	fa40 f202 	asrlt.w	r2, r0, r2
 800fc58:	189b      	addlt	r3, r3, r2
 800fc5a:	ea23 0301 	bic.w	r3, r3, r1
 800fc5e:	e7e5      	b.n	800fc2c <floorf+0x34>
 800fc60:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fc64:	d3e4      	bcc.n	800fc30 <floorf+0x38>
 800fc66:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc6a:	4770      	bx	lr
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	e7dd      	b.n	800fc2c <floorf+0x34>
 800fc70:	7149f2ca 	.word	0x7149f2ca
 800fc74:	bf800000 	.word	0xbf800000
 800fc78:	007fffff 	.word	0x007fffff

0800fc7c <scalbnf>:
 800fc7c:	ee10 3a10 	vmov	r3, s0
 800fc80:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800fc84:	d025      	beq.n	800fcd2 <scalbnf+0x56>
 800fc86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fc8a:	d302      	bcc.n	800fc92 <scalbnf+0x16>
 800fc8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc90:	4770      	bx	lr
 800fc92:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800fc96:	d122      	bne.n	800fcde <scalbnf+0x62>
 800fc98:	4b2a      	ldr	r3, [pc, #168]	; (800fd44 <scalbnf+0xc8>)
 800fc9a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fd48 <scalbnf+0xcc>
 800fc9e:	4298      	cmp	r0, r3
 800fca0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fca4:	db16      	blt.n	800fcd4 <scalbnf+0x58>
 800fca6:	ee10 3a10 	vmov	r3, s0
 800fcaa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fcae:	3a19      	subs	r2, #25
 800fcb0:	4402      	add	r2, r0
 800fcb2:	2afe      	cmp	r2, #254	; 0xfe
 800fcb4:	dd15      	ble.n	800fce2 <scalbnf+0x66>
 800fcb6:	ee10 3a10 	vmov	r3, s0
 800fcba:	eddf 7a24 	vldr	s15, [pc, #144]	; 800fd4c <scalbnf+0xd0>
 800fcbe:	eddf 6a24 	vldr	s13, [pc, #144]	; 800fd50 <scalbnf+0xd4>
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	eeb0 7a67 	vmov.f32	s14, s15
 800fcc8:	bfb8      	it	lt
 800fcca:	eef0 7a66 	vmovlt.f32	s15, s13
 800fcce:	ee27 0a27 	vmul.f32	s0, s14, s15
 800fcd2:	4770      	bx	lr
 800fcd4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fd54 <scalbnf+0xd8>
 800fcd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fcdc:	4770      	bx	lr
 800fcde:	0dd2      	lsrs	r2, r2, #23
 800fce0:	e7e6      	b.n	800fcb0 <scalbnf+0x34>
 800fce2:	2a00      	cmp	r2, #0
 800fce4:	dd06      	ble.n	800fcf4 <scalbnf+0x78>
 800fce6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fcea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fcee:	ee00 3a10 	vmov	s0, r3
 800fcf2:	4770      	bx	lr
 800fcf4:	f112 0f16 	cmn.w	r2, #22
 800fcf8:	da1a      	bge.n	800fd30 <scalbnf+0xb4>
 800fcfa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fcfe:	4298      	cmp	r0, r3
 800fd00:	ee10 3a10 	vmov	r3, s0
 800fd04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd08:	dd0a      	ble.n	800fd20 <scalbnf+0xa4>
 800fd0a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800fd4c <scalbnf+0xd0>
 800fd0e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800fd50 <scalbnf+0xd4>
 800fd12:	eef0 7a40 	vmov.f32	s15, s0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	bf18      	it	ne
 800fd1a:	eeb0 0a47 	vmovne.f32	s0, s14
 800fd1e:	e7db      	b.n	800fcd8 <scalbnf+0x5c>
 800fd20:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800fd54 <scalbnf+0xd8>
 800fd24:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fd58 <scalbnf+0xdc>
 800fd28:	eef0 7a40 	vmov.f32	s15, s0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	e7f3      	b.n	800fd18 <scalbnf+0x9c>
 800fd30:	3219      	adds	r2, #25
 800fd32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fd3a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fd5c <scalbnf+0xe0>
 800fd3e:	ee07 3a10 	vmov	s14, r3
 800fd42:	e7c4      	b.n	800fcce <scalbnf+0x52>
 800fd44:	ffff3cb0 	.word	0xffff3cb0
 800fd48:	4c000000 	.word	0x4c000000
 800fd4c:	7149f2ca 	.word	0x7149f2ca
 800fd50:	f149f2ca 	.word	0xf149f2ca
 800fd54:	0da24260 	.word	0x0da24260
 800fd58:	8da24260 	.word	0x8da24260
 800fd5c:	33000000 	.word	0x33000000

0800fd60 <_init>:
 800fd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd62:	bf00      	nop
 800fd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd66:	bc08      	pop	{r3}
 800fd68:	469e      	mov	lr, r3
 800fd6a:	4770      	bx	lr

0800fd6c <_fini>:
 800fd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd6e:	bf00      	nop
 800fd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd72:	bc08      	pop	{r3}
 800fd74:	469e      	mov	lr, r3
 800fd76:	4770      	bx	lr
